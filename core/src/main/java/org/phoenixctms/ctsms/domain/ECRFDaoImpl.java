// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.NoSuchElementException;

import org.hibernate.Criteria;
import org.hibernate.criterion.Conjunction;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.phoenixctms.ctsms.compare.EcrfRevisionComparator;
import org.phoenixctms.ctsms.compare.VOIDComparator;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CategoryCriterion.EmptyPrefixModes;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.AssociationPath;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.vo.ECRFInVO;
import org.phoenixctms.ctsms.vo.ECRFOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandGroupOutVO;
import org.phoenixctms.ctsms.vo.ProbandListStatusTypeVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vo.VisitOutVO;

public class ECRFDaoImpl
		extends ECRFDaoBase {

	private final static VOIDComparator PROBAND_GROUP_ID_COMPARATOR = new VOIDComparator<ProbandGroupOutVO>(false);
	private final static VOIDComparator VISIT_ID_COMPARATOR = new VOIDComparator<VisitOutVO>(false);
	private static final String UNIQUE_ECRF_NAME = "{0} - {1}";
	private static final String UNIQUE_ECRF_NAME_REVISION = "{0} - {1} ({2})";
	EcrfRevisionComparator ECRF_REVISION_COMPARATOR = new EcrfRevisionComparator();

	public static String getUniqueEcrfName(ECRFOutVO ecrfVO, VisitOutVO visitVO) {
		if (ecrfVO != null && ecrfVO.getTrial() != null) {
			if (ecrfVO.getRevision() != null && ecrfVO.getRevision().length() > 0) {
				return MessageFormat.format(UNIQUE_ECRF_NAME_REVISION, ecrfVO.getTrial().getName(), CommonUtil.getEcrfVisitName(ecrfVO, visitVO), ecrfVO.getRevision());
			} else {
				return MessageFormat.format(UNIQUE_ECRF_NAME, ecrfVO.getTrial().getName(), CommonUtil.getEcrfVisitName(ecrfVO, visitVO));
			}
		}
		return null;
	}

	private static String getUniqueEcrfName(ECRFOutVO ecrfVO) {
		return getUniqueEcrfName(ecrfVO, null);
	}

	private org.hibernate.Criteria createEcrfCriteria(String alias) {
		org.hibernate.Criteria ecrfCriteria;
		if (alias != null && alias.length() > 0) {
			ecrfCriteria = this.getSession().createCriteria(ECRF.class, alias);
		} else {
			ecrfCriteria = this.getSession().createCriteria(ECRF.class);
		}
		return ecrfCriteria;
	}

	@Override
	public ECRF eCRFInVOToEntity(ECRFInVO eCRFInVO) {
		ECRF entity = this.loadECRFFromECRFInVO(eCRFInVO);
		this.eCRFInVOToEntity(eCRFInVO, entity, true);
		return entity;
	}

	@Override
	public void eCRFInVOToEntity(
			ECRFInVO source,
			ECRF target,
			boolean copyIfNull) {
		super.eCRFInVOToEntity(source, target, copyIfNull);
		Long trialId = source.getTrialId();
		Long probandListStatusId = source.getProbandListStatusId();
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addEcrfs(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeEcrfs(target);
			}
		}
		Collection visitIds;
		if ((visitIds = source.getVisitIds()).size() > 0 || copyIfNull) {
			target.setVisits(toVisitSet(visitIds));
		}
		Collection groupIds;
		if ((groupIds = source.getGroupIds()).size() > 0 || copyIfNull) {
			target.setGroups(toProbandGroupSet(groupIds));
		}
		if (probandListStatusId != null) {
			target.setProbandListStatus(this.getProbandListStatusTypeDao().load(probandListStatusId));
		} else if (copyIfNull) {
			target.setProbandListStatus(null);
		}
	}

	private HashSet<Visit> toVisitSet(Collection<Long> visitIds) { // lazyload persistentset prevention
		VisitDao visitDao = this.getVisitDao();
		HashSet<Visit> result = new HashSet<Visit>(visitIds.size());
		Iterator<Long> it = visitIds.iterator();
		while (it.hasNext()) {
			result.add(visitDao.load(it.next()));
		}
		return result;
	}

	private HashSet<ProbandGroup> toProbandGroupSet(Collection<Long> probandGroupIds) { // lazyload persistentset prevention
		ProbandGroupDao probandGroupDao = this.getProbandGroupDao();
		HashSet<ProbandGroup> result = new HashSet<ProbandGroup>(probandGroupIds.size());
		Iterator<Long> it = probandGroupIds.iterator();
		while (it.hasNext()) {
			result.add(probandGroupDao.load(it.next()));
		}
		return result;
	}

	private ArrayList<VisitOutVO> toVisitOutVOCollection(Collection<Visit> visits) { // lazyload persistentset prevention
		// related to http://forum.andromda.org/viewtopic.php?t=4288
		VisitDao visitDao = this.getVisitDao();
		ArrayList<VisitOutVO> result = new ArrayList<VisitOutVO>(visits.size());
		Iterator<Visit> it = visits.iterator();
		while (it.hasNext()) {
			result.add(visitDao.toVisitOutVO(it.next()));
		}
		Collections.sort(result, VISIT_ID_COMPARATOR);
		return result;
	}

	private ArrayList<ProbandGroupOutVO> toProbandGroupOutVOCollection(Collection<ProbandGroup> groups) { // lazyload persistentset prevention
		// related to http://forum.andromda.org/viewtopic.php?t=4288
		ProbandGroupDao probandGroupDao = this.getProbandGroupDao();
		ArrayList<ProbandGroupOutVO> result = new ArrayList<ProbandGroupOutVO>(groups.size());
		Iterator<ProbandGroup> it = groups.iterator();
		while (it.hasNext()) {
			result.add(probandGroupDao.toProbandGroupOutVO(it.next()));
		}
		Collections.sort(result, PROBAND_GROUP_ID_COMPARATOR);
		return result;
	}

	@Override
	public ECRF eCRFOutVOToEntity(ECRFOutVO eCRFOutVO) {
		ECRF entity = this.loadECRFFromECRFOutVO(eCRFOutVO);
		this.eCRFOutVOToEntity(eCRFOutVO, entity, true);
		return entity;
	}

	@Override
	public void eCRFOutVOToEntity(
			ECRFOutVO source,
			ECRF target,
			boolean copyIfNull) {
		super.eCRFOutVOToEntity(source, target, copyIfNull);
		TrialOutVO trialVO = source.getTrial();
		ProbandListStatusTypeVO probandListStatusVO = source.getProbandListStatus();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addEcrfs(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeEcrfs(target);
			}
		}
		Collection visits = source.getVisits();
		if (visits.size() > 0) {
			visits = new ArrayList(visits); //prevent changing VO
			this.getVisitDao().visitOutVOToEntityCollection(visits);
			target.setVisits(visits); // hashset-exception!!!
		} else if (copyIfNull) {
			target.getVisits().clear();
		}
		Collection groups = source.getGroups();
		if (groups.size() > 0) {
			groups = new ArrayList(groups); //prevent changing VO
			this.getProbandGroupDao().probandGroupOutVOToEntityCollection(groups);
			target.setGroups(groups); // hashset-exception!!!
		} else if (copyIfNull) {
			target.getGroups().clear();
		}
		if (probandListStatusVO != null) {
			target.setProbandListStatus(this.getProbandListStatusTypeDao().probandListStatusTypeVOToEntity(probandListStatusVO));
		} else if (copyIfNull) {
			target.setProbandListStatus(null);
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	@Override
	protected ECRF handleFindByMaxRevision(Long trialId, String name, String revisionPattern) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		ecrfCriteria.add(Restrictions.eq("name", name));
		ecrfCriteria.add(Restrictions.like("revision", revisionPattern, MatchMode.EXACT));
		try {
			return (ECRF) Collections.max(ecrfCriteria.list(), ECRF_REVISION_COMPARATOR);
		} catch (NoSuchElementException e) {
			return null;
		}
	}
	//	@Override
	//	protected Collection<Object[]> handleFindByListEntryActiveSorted(Long probandListEntryId, Boolean active, boolean sort, PSFVO psf) throws Exception {
	//		ProbandListEntry listEntry = this.getProbandListEntryDao().load(probandListEntryId);
	//		Long trialId = listEntry.getTrial().getId();
	//		Long groupId = (listEntry.getGroup() != null ? listEntry.getGroup().getId() : null);
	//		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
	//		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRF.class, ecrfCriteria);
	//		ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
	//		Criteria ecrfFieldValueCriteria = null;
	//		if (groupId != null) {
	//			// http://stackoverflow.com/questions/4334970/hibernate-cannot-simultaneously-fetch-multiple-bags
	//			Criteria probandGroupCriteria = criteriaMap.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
	//			Criteria ecrfFieldCriteria = criteriaMap.createCriteria("ecrfFields", CriteriaSpecification.LEFT_JOIN);
	//			ecrfFieldValueCriteria = ecrfFieldCriteria.createCriteria("fieldValues", "ecrfFieldValues", CriteriaSpecification.LEFT_JOIN);
	//			if (active != null) {
	//				ecrfCriteria.add(Restrictions.or(
	//						Restrictions.and(
	//								Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
	//										Restrictions.isNull("probandGroups.id")),
	//								Restrictions.eq("active", active.booleanValue())),
	//						Restrictions.eq("ecrfFieldValues.listEntry.id", probandListEntryId.longValue())));
	//			} else {
	//				ecrfCriteria.add(Restrictions.or(
	//						Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
	//								Restrictions.isNull("probandGroups.id")),
	//						Restrictions.eq("ecrfFieldValues.listEntry.id", probandListEntryId.longValue())));
	//			}
	//		} else {
	//			if (active != null) {
	//				// http://stackoverflow.com/questions/4334970/hibernate-cannot-simultaneously-fetch-multiple-bags
	//				Criteria ecrfFieldCriteria = criteriaMap.createCriteria("ecrfFields", CriteriaSpecification.LEFT_JOIN);
	//				ecrfFieldValueCriteria = ecrfFieldCriteria.createCriteria("fieldValues", "ecrfFieldValues", CriteriaSpecification.LEFT_JOIN);
	//				ecrfCriteria.add(Restrictions.or(
	//						Restrictions.eq("active", active.booleanValue()),
	//						Restrictions.eq("ecrfFieldValues.listEntry.id", probandListEntryId.longValue())));
	//			}
	//			Criteria probandGroupCriteria = criteriaMap.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
	//			ecrfCriteria.add(Restrictions.isNull("probandGroups.id"));
	//		}
	//		Criteria visitCriteria = criteriaMap.createCriteria("visits", "visits0", CriteriaSpecification.LEFT_JOIN);
	//		if (ecrfFieldValueCriteria != null) {
	//			ecrfFieldValueCriteria.add(Restrictions.or(Restrictions.isNull("ecrfFieldValues.id"),
	//					Restrictions.or(Restrictions.and(Restrictions.isNull("ecrfFieldValues.visit.id"), Restrictions.isNull(visitCriteria.getAlias() + ".id")),
	//							Restrictions.eqProperty("ecrfFieldValues.visit.id", visitCriteria.getAlias() + ".id"))));
	//		}
	//		if (sort) {
	//			if (psf == null) {
	//				psf = new PSFVO();
	//			}
	//			psf.setSortField("name");
	//			psf.setSortOrder(true);
	//		}
	//		//return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this, "visits.id");
	//		AssociationPath sortFieldAssociationPath = new AssociationPath(psf.getSortField());
	//		Criteria projectioncriteria = CriteriaUtil.getProjectionCriteria(criteriaMap, sortFieldAssociationPath);
	//		CriteriaUtil.applyPSFVO(criteriaMap, psf); //as usual, before any addOrder()
	//		ProjectionList proj = Projections.projectionList();
	//		proj.add(Projections.id());
	//		proj.add(Projections.property(visitCriteria.getAlias() + ".id"));
	//		if (projectioncriteria != null) {
	//			//projectioncriteria
	//			//		.addOrder(psf.getSortOrder() ? Order.asc(sortFieldAssociationPath.getPropertyName()) : Order.desc(sortFieldAssociationPath.getPropertyName()));
	//			proj.add(Projections.property(sortFieldAssociationPath.getFullQualifiedPropertyName()));
	//			proj.add(Projections.property(visitCriteria.getAlias() + ".token"));
	//			visitCriteria.addOrder(Order.asc("token"));
	//		}
	//		//ecrfCriteria.setProjection(Projections.distinct(proj));
	//		ecrfCriteria.setProjection(proj);
	//		ArrayList<Object[]> result = new ArrayList<Object[]>();
	//		Iterator it = ecrfCriteria.list().iterator();
	//		while (it.hasNext()) {
	//			Object[] row = (Object[]) it.next();
	//			Long visitId = (Long) row[1];
	//			result.add(new Object[] {
	//					this.load((Long) (row)[0]),
	//					visitId != null ? this.getVisitDao().load(visitId) : null
	//			});
	//		}
	//		return result;
	//	}

	@Override
	protected Collection<Object[]> handleFindByListEntryActiveDoneValidatedReviewVerifiedSorted(Long probandListEntryId, Boolean active, Long ecrfStatusTypeId,
			Boolean valueLockdown, Boolean done,
			Boolean validated,
			Boolean review, Boolean verified, boolean sort, PSFVO psf) throws Exception {
		ProbandListEntry listEntry = this.getProbandListEntryDao().load(probandListEntryId);
		Long trialId = listEntry.getTrial().getId();
		Long groupId = (listEntry.getGroup() != null ? listEntry.getGroup().getId() : null);
		//		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		//		ecrfCriteria.createCriteria("ecrfFields", CriteriaSpecification.INNER_JOIN).createCriteria("fieldValues", CriteriaSpecification.INNER_JOIN)
		//				.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		//		ecrfCriteria.setProjection(Projections.distinct(Projections.id()));
		//		List valueEcrfIds = ecrfCriteria.list();
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRF.class, ecrfCriteria);
		Conjunction conjunction = Restrictions.conjunction();
		conjunction.add(Restrictions.eq("trial.id", trialId.longValue()));
		if (active != null) {
			conjunction.add(Restrictions.eq("active", active.booleanValue()));
		}
		Criteria probandGroupCriteria = criteriaMap.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
		if (groupId != null) {
			conjunction.add(Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
					Restrictions.isNull("probandGroups.id")));
		} else {
			conjunction.add(Restrictions.isNull("probandGroups.id"));
		}
		Criteria visitCriteria = criteriaMap.createCriteria("visits", "ecrfVisits", CriteriaSpecification.LEFT_JOIN);
		DetachedCriteria subQuery = DetachedCriteria.forClass(ECRFStatusEntryImpl.class, "ecrfStatusEntry"); // IMPL!!!!
		subQuery.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		subQuery.add(Restrictions.eqProperty("ecrf.id", ecrfCriteria.getAlias() + ".id"));
		subQuery.add(Restrictions.or(Restrictions.and(Restrictions.isNull("ecrfStatusEntry.visit.id"), Restrictions.isNull(visitCriteria.getAlias() + ".id")),
				Restrictions.eqProperty("ecrfStatusEntry.visit.id", visitCriteria.getAlias() + ".id")));
		subQuery.setProjection(Projections.id());
		ecrfCriteria.add(Restrictions.or(conjunction, Subqueries.exists(subQuery)));
		//		DetachedCriteria subQuery = DetachedCriteria.forClass(ECRFFieldImpl.class, "ecrfField"); // IMPL!!!!
		//		subQuery.createCriteria("fieldValues", "ecrfFieldValues", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		//		subQuery.add(Restrictions.eqProperty("ecrf.id", ecrfCriteria.getAlias() + ".id"));
		//		subQuery.add(Restrictions.or(Restrictions.and(Restrictions.isNull("ecrfFieldValues.visit.id"), Restrictions.isNull(visitCriteria.getAlias() + ".id")),
		//				Restrictions.eqProperty("ecrfFieldValues.visit.id", visitCriteria.getAlias() + ".id")));
		//		subQuery.setProjection(Projections.rowCount());
		//		ecrfCriteria.add(Restrictions.or(conjunction, Subqueries.exists( subQuery)));
		if (ecrfStatusTypeId != null || valueLockdown != null || done != null || validated != null || review != null || verified != null) {
			subQuery = DetachedCriteria.forClass(ECRFStatusEntryImpl.class, "ecrfStatusEntry"); // IMPL!!!!
			subQuery.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
			subQuery.add(Restrictions.eqProperty("ecrf.id", ecrfCriteria.getAlias() + ".id"));
			DetachedCriteria ecrfStatusTypeCriteria = subQuery.createCriteria("status");
			if (ecrfStatusTypeId != null) {
				ecrfStatusTypeCriteria.add(Restrictions.idEq(ecrfStatusTypeId.longValue()));
			}
			if (valueLockdown != null) {
				ecrfStatusTypeCriteria.add(Restrictions.eq("valueLockdown", valueLockdown.booleanValue()));
			}
			if (done != null) {
				ecrfStatusTypeCriteria.add(Restrictions.eq("done", done.booleanValue()));
			}
			if (validated != null) {
				ecrfStatusTypeCriteria.add(Restrictions.eq("validated", validated.booleanValue()));
			}
			if (review != null) {
				ecrfStatusTypeCriteria.add(Restrictions.eq("review", review.booleanValue()));
			}
			if (verified != null) {
				ecrfStatusTypeCriteria.add(Restrictions.eq("verified", verified.booleanValue()));
			}
			subQuery.setProjection(Projections.id());
			ecrfCriteria.add(Subqueries.exists(subQuery));
		}
		if (sort) {
			if (psf == null) {
				psf = new PSFVO();
			}
			psf.setSortField("name");
			psf.setSortOrder(true);
		}
		//return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this, "visits.id");
		AssociationPath sortFieldAssociationPath = new AssociationPath(psf.getSortField());
		Criteria projectioncriteria = CriteriaUtil.getProjectionCriteria(criteriaMap, sortFieldAssociationPath);
		CriteriaUtil.applyPSFVO(criteriaMap, psf); //as usual, before any addOrder()
		ProjectionList proj = Projections.projectionList();
		proj.add(Projections.id());
		proj.add(Projections.property(visitCriteria.getAlias() + ".id"));
		if (projectioncriteria != null) {
			//projectioncriteria
			//		.addOrder(psf.getSortOrder() ? Order.asc(sortFieldAssociationPath.getPropertyName()) : Order.desc(sortFieldAssociationPath.getPropertyName()));
			proj.add(Projections.property(sortFieldAssociationPath.getFullQualifiedPropertyName()));
			proj.add(Projections.property(visitCriteria.getAlias() + ".token"));
			visitCriteria.addOrder(Order.asc("token"));
		}
		ecrfCriteria.setProjection(Projections.distinct(proj));
		//ecrfCriteria.setProjection(proj);
		ArrayList<Object[]> result = new ArrayList<Object[]>();
		Iterator it = ecrfCriteria.list().iterator();
		while (it.hasNext()) {
			Object[] row = (Object[]) it.next();
			Long visitId = (Long) row[1];
			result.add(new Object[] {
					this.load((Long) (row)[0]),
					visitId != null ? this.getVisitDao().load(visitId) : null
			});
		}
		return result;
	}

	@Override
	protected Collection<ECRF> handleFindByTrialActiveSorted(Long trialId, Boolean active, boolean sort, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRF.class, ecrfCriteria);
		if (trialId != null) {
			ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (active != null) {
			ecrfCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (sort) {
			if (psf == null) {
				psf = new PSFVO();
			}
			psf.setSortField("name");
			psf.setSortOrder(true);
		}
		return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this); //ecrf.groups, ecrf.visits filter
	}

	@Override
	protected Collection<ECRF> handleFindByTrialGroupVisitActiveSorted(Long trialId, Long groupId, Long visitId, Boolean active, boolean sort, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRF.class, ecrfCriteria);
		if (trialId != null) {
			ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (groupId != null) {
			Criteria probandGroupCriteria = criteriaMap.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
			ecrfCriteria.add(Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
					Restrictions.isNull("probandGroups.id")));
		}
		if (visitId != null) {
			Criteria visitCriteria = criteriaMap.createCriteria("visits", "visits0", CriteriaSpecification.LEFT_JOIN);
			ecrfCriteria.add(Restrictions.or(Restrictions.eq("visits0.id", visitId.longValue()),
					Restrictions.isNull("visits0.id")));
		}
		if (active != null) {
			ecrfCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (sort) {
			if (psf == null) {
				psf = new PSFVO();
			}
			psf.setSortField("name");
			psf.setSortOrder(true);
		}
		return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this); //ecrf.groups, ecrf.visits filter
	}

	@Override
	protected Collection<ECRF> handleFindCollidingTrialNameRevision(
			Long trialId, String name, String revision) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		if (trialId != null) {
			ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (name != null) {
			ecrfCriteria.add(Restrictions.eq("name", name));
		}
		CategoryCriterion.apply(ecrfCriteria, new CategoryCriterion(revision, "revision", MatchMode.EXACT, EmptyPrefixModes.EMPTY_ROWS));
		return ecrfCriteria.list();
	}

	@Override
	protected long handleGetCount(Long trialId, Long groupId, Long visitId, Boolean active) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		if (trialId != null) {
			ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (groupId != null) {
			Criteria probandGroupCriteria = ecrfCriteria.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
			ecrfCriteria.add(Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
					Restrictions.isNull("probandGroups.id")));
		}
		if (visitId != null) {
			Criteria visitCriteria = ecrfCriteria.createCriteria("visits", "visits0", CriteriaSpecification.LEFT_JOIN);
			ecrfCriteria.add(Restrictions.or(Restrictions.eq("visits0.id", visitId.longValue()),
					Restrictions.isNull("visits0.id")));
		}
		if (active != null) {
			ecrfCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		return (Long) ecrfCriteria.setProjection(Projections.countDistinct("id")).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRF loadECRFFromECRFInVO(ECRFInVO eCRFInVO) {
		ECRF ecrf = null;
		Long id = eCRFInVO.getId();
		if (id != null) {
			ecrf = this.load(id);
		}
		if (ecrf == null) {
			ecrf = ECRF.Factory.newInstance();
		}
		return ecrf;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRF loadECRFFromECRFOutVO(ECRFOutVO eCRFOutVO) {
		ECRF ecrf = this.load(eCRFOutVO.getId());
		if (ecrf == null) {
			ecrf = ECRF.Factory.newInstance();
		}
		return ecrf;
	}

	@Override
	public ECRFInVO toECRFInVO(final ECRF entity) {
		return super.toECRFInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toECRFInVO(
			ECRF source,
			ECRFInVO target) {
		super.toECRFInVO(source, target);
		Trial trial = source.getTrial();
		ProbandListStatusType probandListStatus = source.getProbandListStatus();
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		target.setVisitIds(toVisitIdCollection(source.getVisits()));
		target.setGroupIds(toProbandGroupIdCollection(source.getGroups()));
		if (probandListStatus != null) {
			target.setProbandListStatusId(probandListStatus.getId());
		}
	}

	private static ArrayList<Long> toVisitIdCollection(Collection<Visit> visits) { // lazyload persistentset prevention
		ArrayList<Long> result = new ArrayList<Long>(visits.size());
		Iterator<Visit> it = visits.iterator();
		while (it.hasNext()) {
			result.add(it.next().getId());
		}
		Collections.sort(result); // InVO ID sorting
		return result;
	}

	private static ArrayList<Long> toProbandGroupIdCollection(Collection<ProbandGroup> groups) { // lazyload persistentset prevention
		ArrayList<Long> result = new ArrayList<Long>(groups.size());
		Iterator<ProbandGroup> it = groups.iterator();
		while (it.hasNext()) {
			result.add(it.next().getId());
		}
		Collections.sort(result); // InVO ID sorting
		return result;
	}

	@Override
	public ECRFOutVO toECRFOutVO(final ECRF entity) {
		return super.toECRFOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toECRFOutVO(
			ECRF source,
			ECRFOutVO target) {
		super.toECRFOutVO(source, target);
		Trial trial = source.getTrial();
		ProbandListStatusType probandListStatus = source.getProbandListStatus();
		User modifiedUser = source.getModifiedUser();
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		target.setVisits(toVisitOutVOCollection(source.getVisits()));
		target.setGroups(toProbandGroupOutVOCollection(source.getGroups()));
		if (probandListStatus != null) {
			target.setProbandListStatus(this.getProbandListStatusTypeDao().toProbandListStatusTypeVO(probandListStatus));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setUniqueName(getUniqueEcrfName(target));
	}
}