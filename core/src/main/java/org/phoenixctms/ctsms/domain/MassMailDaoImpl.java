// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// This file is part of the Phoenix CTMS project (www.phoenixctms.org),
// distributed under LGPL v2.1. Copyright (C) 2011 - 2017.
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import org.hibernate.Query;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.phoenixctms.ctsms.compare.VOIDComparator;
import org.phoenixctms.ctsms.enumeration.DBModule;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.QueryUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.CriteriaInstantVO;
import org.phoenixctms.ctsms.vo.DepartmentVO;
import org.phoenixctms.ctsms.vo.MassMailInVO;
import org.phoenixctms.ctsms.vo.MassMailOutVO;
import org.phoenixctms.ctsms.vo.MassMailStatusTypeVO;
import org.phoenixctms.ctsms.vo.MassMailTypeVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandListStatusTypeVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vo.VisitScheduleItemOutVO;

/**
 * @see MassMail
 */
public class MassMailDaoImpl
		extends MassMailDaoBase {

	private final static VOIDComparator VISIT_SCHEDULE_ITEM_ID_COMPARATOR = new VOIDComparator<VisitScheduleItemOutVO>(false);

	private org.hibernate.Criteria createMassMailCriteria(String alias) {
		org.hibernate.Criteria massMailCriteria;
		if (alias != null && alias.length() > 0) {
			massMailCriteria = this.getSession().createCriteria(MassMail.class, alias);
		} else {
			massMailCriteria = this.getSession().createCriteria(MassMail.class);
		}
		return massMailCriteria;
	}

	@Override
	protected Collection<MassMail> handleFindByCriteria(
			CriteriaInstantVO criteria, PSFVO psf) throws Exception {
		Query query = QueryUtil.createSearchQuery(
				criteria,
				DBModule.MASS_MAIL_DB,
				psf,
				this.getSessionFactory(),
				this.getCriterionTieDao(),
				this.getCriterionPropertyDao(),
				this.getCriterionRestrictionDao());
		return query.list();
	}

	@Override
	protected Collection<MassMail> handleFindByIdDepartment(Long massMailId,
			Long departmentId, PSFVO psf) throws Exception {
		org.hibernate.Criteria massMailCriteria = createMassMailCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(MassMail.class, massMailCriteria);
		CriteriaUtil.applyIdDepartmentCriterion(massMailCriteria, massMailId, departmentId);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return massMailCriteria.list();
	}

	@Override
	protected Collection<MassMail> handleFindByTrialProbandListStatusTypeLocked(Long trialId, Long probandListStatusTypeId, Boolean locked, PSFVO psf) throws Exception {
		org.hibernate.Criteria massMailCriteria = createMassMailCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(MassMail.class, massMailCriteria);
		if (trialId != null) {
			massMailCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (probandListStatusTypeId != null) {
			massMailCriteria.add(Restrictions.eq("probandListStatus.id", probandListStatusTypeId.longValue()));
		}
		if (locked != null) {
			criteriaMap.createCriteria("status").add(Restrictions.eq("locked", locked.booleanValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return massMailCriteria.list();
	}

	@Override
	protected Collection<MassMail> handleFindByVisitScheduleItemsLocked(Set<Long> VisitScheduleItemIds, Boolean locked) throws Exception {
		org.hibernate.Criteria massMailCriteria = createMassMailCriteria(null);
		if (VisitScheduleItemIds != null && VisitScheduleItemIds.size() > 0) {
			massMailCriteria.createCriteria("visitScheduleItems", CriteriaSpecification.INNER_JOIN).add(Restrictions.in("id", VisitScheduleItemIds));
		} else {
			return new ArrayList<MassMail>();
		}
		if (locked != null) {
			massMailCriteria.createCriteria("status").add(Restrictions.eq("locked", locked.booleanValue()));
		}
		massMailCriteria.addOrder(Order.asc("id")); // save when used for lock order
		return massMailCriteria.list();
	}

	@Override
	protected long handleGetCount(Long trialId, Long probandListStatusTypeId, Boolean locked, Long resendProbandId) throws Exception {
		org.hibernate.Criteria massMailCriteria = createMassMailCriteria("massMail0");
		if (trialId != null) {
			massMailCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (probandListStatusTypeId != null) {
			massMailCriteria.add(Restrictions.eq("probandListStatus.id", probandListStatusTypeId.longValue()));
		}
		if (locked != null) {
			massMailCriteria.createCriteria("status").add(Restrictions.eq("locked", locked.booleanValue()));
		}
		if (resendProbandId != null) {
			DetachedCriteria recipientsSubQuery = DetachedCriteria.forClass(MassMailRecipientImpl.class, "massMailRecipient1"); // IMPL!!!!
			recipientsSubQuery.setProjection(Projections.id());
			recipientsSubQuery.add(Restrictions.eq("proband.id", resendProbandId.longValue()));
			recipientsSubQuery.add(Restrictions.eqProperty("massMail.id", "massMail0.id"));
			massMailCriteria.add(Restrictions.or(Restrictions.eq("probandListStatusResend", true),
					Subqueries.exists(recipientsSubQuery)));
		}
		return (Long) massMailCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCountByCriteria(CriteriaInstantVO criteria, PSFVO psf) throws Exception {
		return QueryUtil.getSearchQueryResultCount(
				criteria,
				DBModule.MASS_MAIL_DB,
				psf,
				this.getSessionFactory(),
				this.getCriterionTieDao(),
				this.getCriterionPropertyDao(),
				this.getCriterionRestrictionDao());
	}

	private MassMail loadMassMailFromMassMailInVO(MassMailInVO massMailInVO) {
		MassMail massMail = null;
		Long id = massMailInVO.getId();
		if (id != null) {
			massMail = this.load(id);
		}
		if (massMail == null) {
			massMail = MassMail.Factory.newInstance();
		}
		return massMail;
	}

	private MassMail loadMassMailFromMassMailOutVO(MassMailOutVO massMailOutVO) {
		MassMail massMail = this.load(massMailOutVO.getId());
		if (massMail == null) {
			massMail = MassMail.Factory.newInstance();
		}
		return massMail;
	}

	@Override
	public MassMail massMailInVOToEntity(MassMailInVO massMailInVO) {
		MassMail entity = this.loadMassMailFromMassMailInVO(massMailInVO);
		this.massMailInVOToEntity(massMailInVO, entity, true);
		return entity;
	}

	@Override
	public void massMailInVOToEntity(
			MassMailInVO source,
			MassMail target,
			boolean copyIfNull) {
		super.massMailInVOToEntity(source, target, copyIfNull);
		Long departmentId = source.getDepartmentId();
		Long statusId = source.getStatusId();
		Long typeId = source.getTypeId();
		Long probandListStatusId = source.getProbandListStatusId();
		Long trialId = source.getTrialId();
		if (departmentId != null) {
			target.setDepartment(this.getDepartmentDao().load(departmentId));
		} else if (copyIfNull) {
			target.setDepartment(null);
		}
		if (statusId != null) {
			target.setStatus(this.getMassMailStatusTypeDao().load(statusId));
		} else if (copyIfNull) {
			target.setStatus(null);
		}
		if (typeId != null) {
			target.setType(this.getMassMailTypeDao().load(typeId));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (probandListStatusId != null) {
			target.setProbandListStatus(this.getProbandListStatusTypeDao().load(probandListStatusId));
		} else if (copyIfNull) {
			target.setProbandListStatus(null);
		}
		if (trialId != null) {
			target.setTrial(this.getTrialDao().load(trialId));
		} else if (copyIfNull) {
			target.setTrial(null);
		}
		Collection visitScheduleItemIds;
		if ((visitScheduleItemIds = source.getVisitScheduleItemIds()).size() > 0 || copyIfNull) {
			target.setVisitScheduleItems(toVisitScheduleItemSet(visitScheduleItemIds));
		}
	}

	private HashSet<VisitScheduleItem> toVisitScheduleItemSet(Collection<Long> visitScheduleItemIds) { // lazyload persistentset prevention
		VisitScheduleItemDao visitScheduleItemDao = this.getVisitScheduleItemDao();
		HashSet<VisitScheduleItem> result = new HashSet<VisitScheduleItem>(visitScheduleItemIds.size());
		Iterator<Long> it = visitScheduleItemIds.iterator();
		while (it.hasNext()) {
			result.add(visitScheduleItemDao.load(it.next()));
		}
		return result;
	}

	private ArrayList<VisitScheduleItemOutVO> toVisitScheduleItemOutVOCollection(Collection<VisitScheduleItem> visitScheduleItems) { // lazyload persistentset prevention
		// related to http://forum.andromda.org/viewtopic.php?t=4288
		VisitScheduleItemDao visitScheduleItemDao = this.getVisitScheduleItemDao();
		ArrayList<VisitScheduleItemOutVO> result = new ArrayList<VisitScheduleItemOutVO>(visitScheduleItems.size());
		Iterator<VisitScheduleItem> it = visitScheduleItems.iterator();
		while (it.hasNext()) {
			result.add(visitScheduleItemDao.toVisitScheduleItemOutVO(it.next()));
		}
		Collections.sort(result, VISIT_SCHEDULE_ITEM_ID_COMPARATOR);
		return result;
	}

	@Override
	public MassMail massMailOutVOToEntity(MassMailOutVO massMailOutVO) {
		MassMail entity = this.loadMassMailFromMassMailOutVO(massMailOutVO);
		this.massMailOutVOToEntity(massMailOutVO, entity, true);
		return entity;
	}

	@Override
	public void massMailOutVOToEntity(
			MassMailOutVO source,
			MassMail target,
			boolean copyIfNull) {
		super.massMailOutVOToEntity(source, target, copyIfNull);
		MassMailStatusTypeVO statusVO = source.getStatus();
		DepartmentVO departmentVO = source.getDepartment();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		MassMailTypeVO typeVO = source.getType();
		ProbandListStatusTypeVO probandListStatusVO = source.getProbandListStatus();
		TrialOutVO trialVO = source.getTrial();
		if (statusVO != null) {
			target.setStatus(this.getMassMailStatusTypeDao().massMailStatusTypeVOToEntity(statusVO));
		} else if (copyIfNull) {
			target.setStatus(null);
		}
		if (departmentVO != null) {
			target.setDepartment(this.getDepartmentDao().departmentVOToEntity(departmentVO));
		} else if (copyIfNull) {
			target.setDepartment(null);
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
		if (typeVO != null) {
			target.setType(this.getMassMailTypeDao().massMailTypeVOToEntity(typeVO));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (probandListStatusVO != null) {
			target.setProbandListStatus(this.getProbandListStatusTypeDao().probandListStatusTypeVOToEntity(probandListStatusVO));
		} else if (copyIfNull) {
			target.setProbandListStatus(null);
		}
		if (trialVO != null) {
			target.setTrial(this.getTrialDao().trialOutVOToEntity(trialVO));
		} else if (copyIfNull) {
			target.setTrial(null);
		}
		Collection visitScheduleItems = source.getVisitScheduleItems();
		if (visitScheduleItems.size() > 0) {
			visitScheduleItems = new ArrayList(visitScheduleItems); //prevent changing VO
			this.getVisitScheduleItemDao().visitScheduleItemOutVOToEntityCollection(visitScheduleItems);
			target.setVisitScheduleItems(visitScheduleItems); // hashset-exception!!!
		} else if (copyIfNull) {
			target.getVisitScheduleItems().clear();
		}
	}

	@Override
	public MassMailInVO toMassMailInVO(final MassMail entity) {
		return super.toMassMailInVO(entity);
	}

	@Override
	public void toMassMailInVO(
			MassMail source,
			MassMailInVO target) {
		super.toMassMailInVO(source, target);
		Department department = source.getDepartment();
		MassMailStatusType status = source.getStatus();
		MassMailType type = source.getType();
		ProbandListStatusType probandListStatus = source.getProbandListStatus();
		Trial trial = source.getTrial();
		if (department != null) {
			target.setDepartmentId(department.getId());
		}
		if (status != null) {
			target.setStatusId(status.getId());
		}
		if (type != null) {
			target.setTypeId(type.getId());
		}
		if (probandListStatus != null) {
			target.setProbandListStatusId(probandListStatus.getId());
		}
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		target.setVisitScheduleItemIds(toVisitScheduleItemIdCollection(source.getVisitScheduleItems()));
	}

	private static ArrayList<Long> toVisitScheduleItemIdCollection(Collection<VisitScheduleItem> visitScheduleItems) { // lazyload persistentset prevention
		ArrayList<Long> result = new ArrayList<Long>(visitScheduleItems.size());
		Iterator<VisitScheduleItem> it = visitScheduleItems.iterator();
		while (it.hasNext()) {
			result.add(it.next().getId());
		}
		Collections.sort(result); // InVO ID sorting
		return result;
	}

	@Override
	public MassMailOutVO toMassMailOutVO(final MassMail entity) {
		return super.toMassMailOutVO(entity);
	}

	@Override
	public void toMassMailOutVO(
			MassMail source,
			MassMailOutVO target) {
		super.toMassMailOutVO(source, target);
		MassMailStatusType status = source.getStatus();
		Department department = source.getDepartment();
		User modifiedUser = source.getModifiedUser();
		MassMailType type = source.getType();
		ProbandListStatusType probandListStatus = source.getProbandListStatus();
		Trial trial = source.getTrial();
		if (status != null) {
			target.setStatus(this.getMassMailStatusTypeDao().toMassMailStatusTypeVO(status));
		}
		if (department != null) {
			target.setDepartment(this.getDepartmentDao().toDepartmentVO(department));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		if (type != null) {
			target.setType(this.getMassMailTypeDao().toMassMailTypeVO(type));
		}
		if (probandListStatus != null) {
			target.setProbandListStatus(this.getProbandListStatusTypeDao().toProbandListStatusTypeVO(probandListStatus));
		}
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		target.setVisitScheduleItems(toVisitScheduleItemOutVOCollection(source.getVisitScheduleItems()));
	}
}