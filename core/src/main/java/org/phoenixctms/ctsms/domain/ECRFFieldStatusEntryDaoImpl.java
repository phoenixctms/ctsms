// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.Hibernate;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.phoenixctms.ctsms.enumeration.ECRFFieldStatusQueue;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.ECRFFieldOutVO;
import org.phoenixctms.ctsms.vo.ECRFFieldStatusEntryInVO;
import org.phoenixctms.ctsms.vo.ECRFFieldStatusEntryOutVO;
import org.phoenixctms.ctsms.vo.ECRFFieldStatusTypeVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandListEntryOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vo.VisitOutVO;

/**
 * @see ECRFFieldStatusEntry
 */
public class ECRFFieldStatusEntryDaoImpl
		extends ECRFFieldStatusEntryDaoBase {

	private static void applyEcrfFieldStatusEntryMaxIdSubCriteria(org.hibernate.Criteria ecrfFieldStatusEntryCriteria,
			org.hibernate.Criteria probandListEntryCriteria, org.hibernate.Criteria visitCriteria, org.hibernate.Criteria ecrfFieldCriteria, ECRFFieldStatusQueue queue,
			Long probandListEntryId, Long ecrfFieldId) {
		DetachedCriteria subQuery = createEcrfFieldStatusEntryDetachedCriteriaMaxId(ecrfFieldStatusEntryCriteria, probandListEntryCriteria,
				visitCriteria, ecrfFieldCriteria, queue,
				probandListEntryId,
				ecrfFieldId);
		subQuery.add(Restrictions.or(Restrictions.isNull("index"),
				Restrictions.eqProperty("index", ecrfFieldStatusEntryCriteria.getAlias() + ".index")));
		ecrfFieldStatusEntryCriteria.add(Subqueries.propertyIn("id", subQuery));
	}

	private static void applyEcrfFieldStatusEntryMaxIdSubCriteria(org.hibernate.Criteria ecrfFieldStatusEntryCriteria,
			org.hibernate.Criteria probandListEntryCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			ECRFFieldStatusQueue queue, Long probandListEntryId, Long visitId, Long ecrfFieldId) {
		DetachedCriteria subQuery = createEcrfFieldStatusEntryDetachedCriteriaMaxId(ecrfFieldStatusEntryCriteria, probandListEntryCriteria,
				ecrfFieldCriteria, queue,
				probandListEntryId, visitId,
				ecrfFieldId);
		subQuery.add(Restrictions.or(Restrictions.isNull("index"),
				Restrictions.eqProperty("index", ecrfFieldStatusEntryCriteria.getAlias() + ".index")));
		ecrfFieldStatusEntryCriteria.add(Subqueries.propertyIn("id", subQuery));
	}

	private static void applyEcrfFieldStatusEntryMaxIdSubCriteria(org.hibernate.Criteria ecrfFieldStatusEntryCriteria,
			org.hibernate.Criteria probandListEntryCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			ECRFFieldStatusQueue queue, Long probandListEntryId, Long visitId, Long ecrfFieldId, Long index) {
		DetachedCriteria subQuery = createEcrfFieldStatusEntryDetachedCriteriaMaxId(ecrfFieldStatusEntryCriteria, probandListEntryCriteria, ecrfFieldCriteria, queue,
				probandListEntryId, visitId,
				ecrfFieldId);
		if (index != null) {
			subQuery.add(Restrictions.eq("index", index.longValue()));
		} else {
			subQuery.add(Restrictions.isNull("index"));
		}
		ecrfFieldStatusEntryCriteria.add(Subqueries.propertyIn("id", subQuery));
	}

	private static void applySortOrders(boolean sortByVisit, org.hibernate.Criteria listEntryCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			org.hibernate.Criteria ecrfFieldStatusEntryCriteria) {
		if (listEntryCriteria != null) {
			listEntryCriteria.addOrder(Order.asc("trial"));
			listEntryCriteria.addOrder(Order.asc("position"));
		}
		if (ecrfFieldCriteria != null) {
			ecrfFieldCriteria.addOrder(Order.asc("trial"));
			ecrfFieldCriteria.addOrder(Order.asc("ecrf"));
		}
		if (ecrfFieldStatusEntryCriteria != null && sortByVisit) {
			// do not sort NULL values from LEFT JOIN
			ecrfFieldStatusEntryCriteria.addOrder(Order.asc("visit"));
		}
		if (ecrfFieldCriteria != null) {
			ecrfFieldCriteria.addOrder(Order.asc("section"));
		}
		if (ecrfFieldStatusEntryCriteria != null) {
			ecrfFieldStatusEntryCriteria.addOrder(Order.asc("index"));
		}
		if (ecrfFieldCriteria != null) {
			ecrfFieldCriteria.addOrder(Order.asc("position"));
		}
		if (ecrfFieldStatusEntryCriteria != null) {
			ecrfFieldStatusEntryCriteria.addOrder(Order.asc("id"));
		}
	}

	private static DetachedCriteria createEcrfFieldStatusEntryDetachedCriteria(org.hibernate.Criteria ecrfFieldStatusEntryCriteria,
			org.hibernate.Criteria probandListEntryCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			ECRFFieldStatusQueue queue, Long probandListEntryId, Long ecrfFieldId) {
		DetachedCriteria subQuery = DetachedCriteria.forClass(ECRFFieldStatusEntryImpl.class, "ecrfFieldStatusEntry1"); // IMPL!!!!
		if (probandListEntryId == null) {
			if (probandListEntryCriteria == null) {
				probandListEntryCriteria = ecrfFieldStatusEntryCriteria.createCriteria("listEntry", "probandListEntry0");
			}
			subQuery.add(Restrictions.eqProperty("listEntry.id", probandListEntryCriteria.getAlias() + ".id"));
		} else {
			subQuery.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		}
		if (ecrfFieldId == null) {
			if (ecrfFieldCriteria == null) {
				ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", "ecrfField0");
			}
			subQuery.add(Restrictions.eqProperty("ecrfField.id", ecrfFieldCriteria.getAlias() + ".id"));
		} else {
			subQuery.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		}
		if (queue != null) {
			subQuery.add(Restrictions.eq("queue", queue));
			subQuery.setProjection(Projections.max("id"));
		} else {
			ProjectionList proj = Projections.projectionList();
			proj.add(Projections.sqlGroupProjection(
					"max({alias}.id) as maxId",
					"{alias}.queue",
					new String[] { "maxId" },
					new org.hibernate.type.Type[] { Hibernate.LONG }));
			subQuery.setProjection(proj);
		}
		return subQuery;
	}

	private static DetachedCriteria createEcrfFieldStatusEntryDetachedCriteriaMaxId(org.hibernate.Criteria ecrfFieldStatusEntryCriteria,
			org.hibernate.Criteria probandListEntryCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			ECRFFieldStatusQueue queue, Long probandListEntryId, Long visitId, Long ecrfFieldId) {
		DetachedCriteria subQuery = createEcrfFieldStatusEntryDetachedCriteria(ecrfFieldStatusEntryCriteria, probandListEntryCriteria, ecrfFieldCriteria, queue, probandListEntryId,
				ecrfFieldId);
		if (visitId != null) {
			subQuery.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			subQuery.add(Restrictions.isNull("visit.id"));
		}
		return subQuery;
	}

	private static DetachedCriteria createEcrfFieldStatusEntryDetachedCriteriaMaxId(org.hibernate.Criteria ecrfFieldStatusEntryCriteria,
			org.hibernate.Criteria probandListEntryCriteria, org.hibernate.Criteria visitCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			ECRFFieldStatusQueue queue, Long probandListEntryId, Long ecrfFieldId) {
		DetachedCriteria subQuery = createEcrfFieldStatusEntryDetachedCriteria(ecrfFieldStatusEntryCriteria, probandListEntryCriteria, ecrfFieldCriteria, queue, probandListEntryId,
				ecrfFieldId);
		if (visitCriteria == null) {
			visitCriteria = ecrfFieldStatusEntryCriteria.createCriteria("visit", "visit0", CriteriaSpecification.LEFT_JOIN);
		}
		subQuery.add(Restrictions.or(Restrictions.and(Restrictions.isNull("visit.id"), Restrictions.isNull(visitCriteria.getAlias() + ".id")),
				Restrictions.eqProperty("visit.id", visitCriteria.getAlias() + ".id")));
		return subQuery;
	}

	private org.hibernate.Criteria createEcrfFieldStatusEntryCriteria(String alias) {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria;
		if (alias != null && alias.length() > 0) {
			ecrfFieldStatusEntryCriteria = this.getSession().createCriteria(ECRFFieldStatusEntry.class, alias);
		} else {
			ecrfFieldStatusEntryCriteria = this.getSession().createCriteria(ECRFFieldStatusEntry.class);
		}
		return ecrfFieldStatusEntryCriteria;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ECRFFieldStatusEntry eCRFFieldStatusEntryInVOToEntity(ECRFFieldStatusEntryInVO eCRFFieldStatusEntryInVO) {
		ECRFFieldStatusEntry entity = this.loadECRFFieldStatusEntryFromECRFFieldStatusEntryInVO(eCRFFieldStatusEntryInVO);
		this.eCRFFieldStatusEntryInVOToEntity(eCRFFieldStatusEntryInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void eCRFFieldStatusEntryInVOToEntity(
			ECRFFieldStatusEntryInVO source,
			ECRFFieldStatusEntry target,
			boolean copyIfNull) {
		super.eCRFFieldStatusEntryInVOToEntity(source, target, copyIfNull);
		Long statusId = source.getStatusId();
		Long listEntryId = source.getListEntryId();
		Long ecrfFieldId = source.getEcrfFieldId();
		Long visitId = source.getVisitId();
		if (statusId != null) {
			target.setStatus(this.getECRFFieldStatusTypeDao().load(statusId));
		} else if (copyIfNull) {
			target.setStatus(null);
		}
		if (listEntryId != null) {
			ProbandListEntry listEntry = this.getProbandListEntryDao().load(listEntryId);
			target.setListEntry(listEntry);
			listEntry.addEcrfFieldStatusEntries(target);
		} else if (copyIfNull) {
			ProbandListEntry listEntry = target.getListEntry();
			target.setListEntry(null);
			if (listEntry != null) {
				listEntry.removeEcrfFieldStatusEntries(target);
			}
		}
		if (ecrfFieldId != null) {
			ECRFField ecrfField = this.getECRFFieldDao().load(ecrfFieldId);
			target.setEcrfField(ecrfField);
			ecrfField.addEcrfFieldStatusEntries(target);
		} else if (copyIfNull) {
			ECRFField ecrfField = target.getEcrfField();
			target.setEcrfField(null);
			if (ecrfField != null) {
				ecrfField.removeEcrfFieldStatusEntries(target);
			}
		}
		if (visitId != null) {
			Visit visit = this.getVisitDao().load(visitId);
			target.setVisit(visit);
			visit.addEcrfFieldStatusEntries(target);
		} else if (copyIfNull) {
			Visit visit = target.getVisit();
			target.setVisit(null);
			if (visit != null) {
				visit.removeEcrfFieldStatusEntries(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ECRFFieldStatusEntry eCRFFieldStatusEntryOutVOToEntity(ECRFFieldStatusEntryOutVO eCRFFieldStatusEntryOutVO) {
		ECRFFieldStatusEntry entity = this.loadECRFFieldStatusEntryFromECRFFieldStatusEntryOutVO(eCRFFieldStatusEntryOutVO);
		this.eCRFFieldStatusEntryOutVOToEntity(eCRFFieldStatusEntryOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void eCRFFieldStatusEntryOutVOToEntity(
			ECRFFieldStatusEntryOutVO source,
			ECRFFieldStatusEntry target,
			boolean copyIfNull) {
		super.eCRFFieldStatusEntryOutVOToEntity(source, target, copyIfNull);
		ECRFFieldStatusTypeVO statusVO = source.getStatus();
		ProbandListEntryOutVO listEntryVO = source.getListEntry();
		ECRFFieldOutVO ecrfFieldVO = source.getEcrfField();
		VisitOutVO visitVO = source.getVisit();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (statusVO != null) {
			target.setStatus(this.getECRFFieldStatusTypeDao().eCRFFieldStatusTypeVOToEntity(statusVO));
		} else if (copyIfNull) {
			target.setStatus(null);
		}
		if (listEntryVO != null) {
			ProbandListEntry listEntry = this.getProbandListEntryDao().probandListEntryOutVOToEntity(listEntryVO);
			target.setListEntry(listEntry);
			listEntry.addEcrfFieldStatusEntries(target);
		} else if (copyIfNull) {
			ProbandListEntry listEntry = target.getListEntry();
			target.setListEntry(null);
			if (listEntry != null) {
				listEntry.removeEcrfFieldStatusEntries(target);
			}
		}
		if (ecrfFieldVO != null) {
			ECRFField ecrfField = this.getECRFFieldDao().eCRFFieldOutVOToEntity(ecrfFieldVO);
			target.setEcrfField(ecrfField);
			ecrfField.addEcrfFieldStatusEntries(target);
		} else if (copyIfNull) {
			ECRFField ecrfField = target.getEcrfField();
			target.setEcrfField(null);
			if (ecrfField != null) {
				ecrfField.removeEcrfFieldStatusEntries(target);
			}
		}
		if (visitVO != null) {
			Visit visit = this.getVisitDao().visitOutVOToEntity(visitVO);
			target.setVisit(visit);
			visit.addEcrfFieldStatusEntries(target);
		} else if (copyIfNull) {
			Visit visit = target.getVisit();
			target.setVisit(null);
			if (visit != null) {
				visit.removeEcrfFieldStatusEntries(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	@Override
	protected Collection<ECRFFieldStatusEntry> handleFindByListEntryEcrfVisit(Long probandListEntryId, Long ecrfId, Long visitId, boolean sort, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria(null);
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField");
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (visitId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
		}
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldStatusEntry.class, ecrfFieldStatusEntryCriteria);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(false, null, ecrfFieldCriteria, ecrfFieldStatusEntryCriteria);
		}
		return ecrfFieldStatusEntryCriteria.list();
	}

	@Override
	protected Collection<ECRFFieldStatusEntry> handleFindByListEntryVisitEcrfFieldIndex(ECRFFieldStatusQueue queue, Long probandListEntryId, Long visitId, Long ecrfFieldId,
			Long index, boolean last,
			boolean sort, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		if (visitId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
		}
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		if (index != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("index", index.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("index"));
		}
		if (last) {
			// uncorrelated - fast:
			// value with max id only:
			applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, null, null, queue, probandListEntryId, visitId, ecrfFieldId, index);
		}
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldStatusEntry.class, ecrfFieldStatusEntryCriteria);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) { // after applyPSFVO
			ecrfFieldStatusEntryCriteria.addOrder(Order.asc("index"));
			ecrfFieldStatusEntryCriteria.addOrder(Order.desc("id"));
		}
		return ecrfFieldStatusEntryCriteria.list();
	}

	@Override
	protected Collection<ECRFFieldStatusEntry> handleFindByListEntryEcrfVisitSection(Long probandListEntryId, Long ecrfId, Long visitId, String section, boolean sort, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria(null);
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField");
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (visitId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
		}
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldStatusEntry.class, ecrfFieldStatusEntryCriteria);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(false, null, ecrfFieldCriteria, ecrfFieldStatusEntryCriteria);
		}
		return ecrfFieldStatusEntryCriteria.list();
	}

	@Override
	protected ECRFFieldStatusEntry handleFindLastStatus(
			ECRFFieldStatusQueue queue, Long probandListEntryId, Long visitId, Long ecrfFieldId, Long index) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria(null);
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		if (visitId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
		}
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		if (index != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("index", index.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("index"));
		}
		ecrfFieldStatusEntryCriteria.addOrder(Order.desc("id"));
		ecrfFieldStatusEntryCriteria.setMaxResults(1);
		return (ECRFFieldStatusEntry) ecrfFieldStatusEntryCriteria.uniqueResult();
	}

	@Override
	protected long handleGetCount(ECRFFieldStatusQueue queue, Long probandListEntryId, boolean last, Boolean initial, Boolean updated, Boolean proposed, Boolean resolved)
			throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		if (initial != null || updated != null || proposed != null || resolved != null) {
			org.hibernate.Criteria statusCriteria = ecrfFieldStatusEntryCriteria.createCriteria("status");
			if (initial != null) {
				statusCriteria.add(Restrictions.eq("initial", initial.booleanValue()));
			}
			if (updated != null) {
				statusCriteria.add(Restrictions.eq("updated", updated.booleanValue()));
			}
			if (proposed != null) {
				statusCriteria.add(Restrictions.eq("proposed", proposed.booleanValue()));
			}
			if (resolved != null) {
				statusCriteria.add(Restrictions.eq("resolved", resolved.booleanValue()));
			}
		}
		if (last) {
			applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, null, null, null, queue, probandListEntryId, null);
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(ECRFFieldStatusQueue queue, Long probandListEntryId, Long ecrfId, Long visitId, boolean last, Boolean initial, Boolean updated, Boolean proposed,
			Boolean resolved)
			throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		if (visitId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", "ecrfField0");
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (initial != null || updated != null || proposed != null || resolved != null) {
			org.hibernate.Criteria statusCriteria = ecrfFieldStatusEntryCriteria.createCriteria("status");
			if (initial != null) {
				statusCriteria.add(Restrictions.eq("initial", initial.booleanValue()));
			}
			if (updated != null) {
				statusCriteria.add(Restrictions.eq("updated", updated.booleanValue()));
			}
			if (proposed != null) {
				statusCriteria.add(Restrictions.eq("proposed", proposed.booleanValue()));
			}
			if (resolved != null) {
				statusCriteria.add(Restrictions.eq("resolved", resolved.booleanValue()));
			}
		}
		if (last) {
			applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, null, ecrfFieldCriteria, queue, probandListEntryId, visitId, null);
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(ECRFFieldStatusQueue queue, Long trialId, Long probandListEntryId, Long ecrfId, Long visitId, boolean last)
			throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		org.hibernate.Criteria listEntryCriteria = ecrfFieldStatusEntryCriteria.createCriteria("listEntry", "probandListEntry0");
		if (trialId != null || probandListEntryId != null) {
			if (trialId != null) {
				listEntryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
			}
			if (probandListEntryId != null) {
				listEntryCriteria.add(Restrictions.idEq(probandListEntryId.longValue()));
			}
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", "ecrfField0");
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
			if (visitId != null) {
				ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
			} else {
				ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
			}
			if (last) {
				// uncorrelated - fast:
				// value with max id only:
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, listEntryCriteria, ecrfFieldCriteria, queue, probandListEntryId, visitId, null);
			}
		} else {
			if (last) {
				// uncorrelated - fast:
				// value with max id only:
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, listEntryCriteria, null, ecrfFieldCriteria, queue, probandListEntryId, null);
			}
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(ECRFFieldStatusQueue queue, Long probandListEntryId, Long visitId, Long ecrfFieldId, Long index, boolean last, Boolean initial, Boolean updated,
			Boolean proposed,
			Boolean resolved) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		if (visitId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
		}
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		if (index != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("index", index.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("index"));
		}
		if (initial != null || updated != null || proposed != null || resolved != null) {
			org.hibernate.Criteria statusCriteria = ecrfFieldStatusEntryCriteria.createCriteria("status");
			if (initial != null) {
				statusCriteria.add(Restrictions.eq("initial", initial.booleanValue()));
			}
			if (updated != null) {
				statusCriteria.add(Restrictions.eq("updated", updated.booleanValue()));
			}
			if (proposed != null) {
				statusCriteria.add(Restrictions.eq("proposed", proposed.booleanValue()));
			}
			if (resolved != null) {
				statusCriteria.add(Restrictions.eq("resolved", resolved.booleanValue()));
			}
		}
		if (last) {
			applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, null, null, queue, probandListEntryId, visitId, ecrfFieldId, index);
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(ECRFFieldStatusQueue queue, Long trialId, Long probandListEntryId, Long ecrfId, Long visitId, String section, boolean last)
			throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		org.hibernate.Criteria listEntryCriteria = ecrfFieldStatusEntryCriteria.createCriteria("listEntry", "probandListEntry0");
		if (trialId != null || probandListEntryId != null) {
			if (trialId != null) {
				listEntryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
			}
			if (probandListEntryId != null) {
				listEntryCriteria.add(Restrictions.idEq(probandListEntryId.longValue()));
			}
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", "ecrfField0");
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
			if (section != null && section.length() > 0) {
				ecrfFieldCriteria.add(Restrictions.eq("section", section));
			} else {
				ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
			}
			if (visitId != null) {
				ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
			} else {
				ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
			}
			if (last) {
				// uncorrelated - fast:
				// value with max id only:
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, listEntryCriteria, ecrfFieldCriteria, queue, probandListEntryId, visitId, null);
			}
		} else {
			if (last) {
				// uncorrelated - fast:
				// value with max id only:
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, listEntryCriteria, null, ecrfFieldCriteria, queue, probandListEntryId, null);
			}
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(ECRFFieldStatusQueue queue, Long probandListEntryId, Long ecrfId, Long visitId, String section, boolean last, Boolean initial, Boolean updated,
			Boolean proposed, Boolean resolved) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		ecrfFieldStatusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		if (visitId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", "ecrfField0");
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		if (initial != null || updated != null || proposed != null || resolved != null) {
			org.hibernate.Criteria statusCriteria = ecrfFieldStatusEntryCriteria.createCriteria("status");
			if (initial != null) {
				statusCriteria.add(Restrictions.eq("initial", initial.booleanValue()));
			}
			if (updated != null) {
				statusCriteria.add(Restrictions.eq("updated", updated.booleanValue()));
			}
			if (proposed != null) {
				statusCriteria.add(Restrictions.eq("proposed", proposed.booleanValue()));
			}
			if (resolved != null) {
				statusCriteria.add(Restrictions.eq("resolved", resolved.booleanValue()));
			}
		}
		if (last) {
			applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, null, ecrfFieldCriteria, queue, probandListEntryId, visitId, null);
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long visitId, Long ecrfFieldId, boolean last) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (ecrfFieldId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
			if (visitId != null) {
				ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
			} else {
				ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
			}
			if (last) {
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, null, null, null, (Long) null, visitId, ecrfFieldId);
			}
		} else {
			if (last) {
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, null, null, (org.hibernate.Criteria) null, null, null, ecrfFieldId);
			}
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long ecrfFieldId, boolean last) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (ecrfFieldId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		}
		if (last) {
			applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, null, null, (org.hibernate.Criteria) null, null, null, ecrfFieldId);
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long ecrfId, Long visitId, String section) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria(null);
		if (visitId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", CriteriaSpecification.INNER_JOIN);
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long ecrfId, Long visitId) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria(null);
		if (visitId != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", CriteriaSpecification.INNER_JOIN);
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long ecrfId, String section) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria(null);
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", CriteriaSpecification.INNER_JOIN);
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		return (Long) ecrfFieldStatusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected Collection<ECRFFieldStatusEntry> handleGetLog(ECRFFieldStatusQueue queue, Long trialId, Long probandListEntryId, Long ecrfId, Long visitId, boolean last,
			boolean sort, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		org.hibernate.Criteria listEntryCriteria = ecrfFieldStatusEntryCriteria.createCriteria("listEntry", "probandListEntry0");
		if (trialId != null || probandListEntryId != null) {
			if (trialId != null) {
				listEntryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
			}
			if (probandListEntryId != null) {
				listEntryCriteria.add(Restrictions.idEq(probandListEntryId.longValue()));
			}
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", "ecrfField0");
		org.hibernate.Criteria visitCriteria = null;
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
			if (visitId != null) {
				ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
			} else {
				ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
			}
			if (last) {
				// uncorrelated - fast:
				// value with max id only:
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, listEntryCriteria, ecrfFieldCriteria, queue, probandListEntryId, visitId, null);
			}
		} else {
			if (last) {
				// uncorrelated - fast:
				// value with max id only:
				visitCriteria = ecrfFieldStatusEntryCriteria.createCriteria("visit", "visit0", CriteriaSpecification.LEFT_JOIN);
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, listEntryCriteria, visitCriteria, ecrfFieldCriteria, queue, probandListEntryId, null);
			}
		}
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldStatusEntry.class, ecrfFieldStatusEntryCriteria);
		criteriaMap.registerCriteria("listEntry", listEntryCriteria);
		criteriaMap.registerCriteria("ecrfField", ecrfFieldCriteria);
		if (visitCriteria != null) {
			criteriaMap.registerCriteria("visit", visitCriteria);
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(true, listEntryCriteria, ecrfFieldCriteria, ecrfFieldStatusEntryCriteria);
		}
		return ecrfFieldStatusEntryCriteria.list(); //ecrf.groups filter not supported.
	}

	@Override
	protected Collection<ECRFFieldStatusEntry> handleGetLog(ECRFFieldStatusQueue queue, Long trialId, Long probandListEntryId, Long ecrfId, Long visitId, String section,
			boolean last,
			boolean sort, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfFieldStatusEntryCriteria = createEcrfFieldStatusEntryCriteria("ecrfFieldStatusEntry0");
		if (queue != null) {
			ecrfFieldStatusEntryCriteria.add(Restrictions.eq("queue", queue));
		}
		org.hibernate.Criteria listEntryCriteria = ecrfFieldStatusEntryCriteria.createCriteria("listEntry", "probandListEntry0");
		if (trialId != null || probandListEntryId != null) {
			if (trialId != null) {
				listEntryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
			}
			if (probandListEntryId != null) {
				listEntryCriteria.add(Restrictions.idEq(probandListEntryId.longValue()));
			}
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldStatusEntryCriteria.createCriteria("ecrfField", "ecrfField0");
		org.hibernate.Criteria visitCriteria = null;
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
			if (section != null && section.length() > 0) {
				ecrfFieldCriteria.add(Restrictions.eq("section", section));
			} else {
				ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
			}
			if (visitId != null) {
				ecrfFieldStatusEntryCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
			} else {
				ecrfFieldStatusEntryCriteria.add(Restrictions.isNull("visit.id"));
			}
			if (last) {
				// uncorrelated - fast:
				// value with max id only:
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, listEntryCriteria, ecrfFieldCriteria, queue, probandListEntryId, visitId, null);
			}
		} else {
			if (last) {
				// uncorrelated - fast:
				// value with max id only:
				visitCriteria = ecrfFieldStatusEntryCriteria.createCriteria("visit", "visit0", CriteriaSpecification.LEFT_JOIN);
				applyEcrfFieldStatusEntryMaxIdSubCriteria(ecrfFieldStatusEntryCriteria, listEntryCriteria, visitCriteria, ecrfFieldCriteria, queue, probandListEntryId, null);
			}
		}
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldStatusEntry.class, ecrfFieldStatusEntryCriteria);
		criteriaMap.registerCriteria("listEntry", listEntryCriteria);
		criteriaMap.registerCriteria("ecrfField", ecrfFieldCriteria);
		if (visitCriteria != null) {
			criteriaMap.registerCriteria("visit", visitCriteria);
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(true, listEntryCriteria, ecrfFieldCriteria, ecrfFieldStatusEntryCriteria);
		}
		return ecrfFieldStatusEntryCriteria.list(); //ecrf.groups filter not supported.
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRFFieldStatusEntry loadECRFFieldStatusEntryFromECRFFieldStatusEntryInVO(ECRFFieldStatusEntryInVO eCRFFieldStatusEntryInVO) {
		ECRFFieldStatusEntry ecrfFieldStatusEntry = null;
		Long id = eCRFFieldStatusEntryInVO.getId();
		if (id != null) {
			ecrfFieldStatusEntry = this.load(id);
		}
		if (ecrfFieldStatusEntry == null) {
			ecrfFieldStatusEntry = ECRFFieldStatusEntry.Factory.newInstance();
		}
		return ecrfFieldStatusEntry;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRFFieldStatusEntry loadECRFFieldStatusEntryFromECRFFieldStatusEntryOutVO(ECRFFieldStatusEntryOutVO eCRFFieldStatusEntryOutVO) {
		ECRFFieldStatusEntry eCRFFieldStatusEntry = this.load(eCRFFieldStatusEntryOutVO.getId());
		if (eCRFFieldStatusEntry == null) {
			eCRFFieldStatusEntry = ECRFFieldStatusEntry.Factory.newInstance();
		}
		return eCRFFieldStatusEntry;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ECRFFieldStatusEntryInVO toECRFFieldStatusEntryInVO(final ECRFFieldStatusEntry entity) {
		return super.toECRFFieldStatusEntryInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toECRFFieldStatusEntryInVO(
			ECRFFieldStatusEntry source,
			ECRFFieldStatusEntryInVO target) {
		super.toECRFFieldStatusEntryInVO(source, target);
		ECRFFieldStatusType status = source.getStatus();
		ProbandListEntry listEntry = source.getListEntry();
		ECRFField ecrfField = source.getEcrfField();
		Visit visit = source.getVisit();
		if (status != null) {
			target.setStatusId(status.getId());
		}
		if (listEntry != null) {
			target.setListEntryId(listEntry.getId());
		}
		if (ecrfField != null) {
			target.setEcrfFieldId(ecrfField.getId());
		}
		if (visit != null) {
			target.setVisitId(visit.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ECRFFieldStatusEntryOutVO toECRFFieldStatusEntryOutVO(final ECRFFieldStatusEntry entity) {
		return super.toECRFFieldStatusEntryOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toECRFFieldStatusEntryOutVO(
			ECRFFieldStatusEntry source,
			ECRFFieldStatusEntryOutVO target) {
		super.toECRFFieldStatusEntryOutVO(source, target);
		ECRFFieldStatusType status = source.getStatus();
		ProbandListEntry listEntry = source.getListEntry();
		ECRFField ecrfField = source.getEcrfField();
		Visit visit = source.getVisit();
		User modifiedUser = source.getModifiedUser();
		if (status != null) {
			target.setStatus(this.getECRFFieldStatusTypeDao().toECRFFieldStatusTypeVO(status));
		}
		if (listEntry != null) {
			target.setListEntry(this.getProbandListEntryDao().toProbandListEntryOutVO(listEntry));
		}
		if (ecrfField != null) {
			target.setEcrfField(this.getECRFFieldDao().toECRFFieldOutVO(ecrfField));
		}
		if (visit != null) {
			target.setVisit(this.getVisitDao().toVisitOutVO(visit));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
	}
}