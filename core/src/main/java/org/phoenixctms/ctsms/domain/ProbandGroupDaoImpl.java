// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.text.MessageFormat;
import java.util.Collection;

import org.hibernate.Criteria;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandGroupInVO;
import org.phoenixctms.ctsms.vo.ProbandGroupOutVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see ProbandGroup
 */
public class ProbandGroupDaoImpl
		extends ProbandGroupDaoBase {

	private static final String UNIQUE_PROBAND_GROUP_NAME = "{0} - {1}";

	private static String getUniqueProbandGroupName(ProbandGroupOutVO probandGroupVO) {
		if (probandGroupVO != null && probandGroupVO.getTrial() != null) {
			return MessageFormat.format(UNIQUE_PROBAND_GROUP_NAME, probandGroupVO.getTrial().getName(), probandGroupVO.getTitle(), probandGroupVO.getSize());
		}
		return null;
	}

	private org.hibernate.Criteria createProbandGroupCriteria() {
		org.hibernate.Criteria probandGroupCriteria = this.getSession().createCriteria(ProbandGroup.class);
		return probandGroupCriteria;
	}

	@Override
	protected Collection<ProbandGroup> handleFindProbandGroups(Long trialId, String tokenInfix, String titleInfix, Integer limit)
			throws Exception {
		Criteria probandGroupCriteria = createProbandGroupCriteria();
		if (trialId != null) {
			probandGroupCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		CategoryCriterion.applyOr(probandGroupCriteria,
				new CategoryCriterion(tokenInfix, "token", MatchMode.ANYWHERE),
				new CategoryCriterion(titleInfix, "title", MatchMode.ANYWHERE));
		probandGroupCriteria.addOrder(Order.asc("token"));
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.PROBAND_GROUP_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.PROBAND_GROUP_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), probandGroupCriteria);
		return probandGroupCriteria.list();
	}

	@Override
	protected Collection<ProbandGroup> handleFindByProbandSorted(Long probandId)
			throws Exception {
		org.hibernate.Criteria probandGroupCriteria = createProbandGroupCriteria();
		if (probandId != null) {
			probandGroupCriteria.createCriteria("probandListEntries", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		probandGroupCriteria.addOrder(Order.asc("trial"));
		probandGroupCriteria.addOrder(Order.asc("title"));
		return CriteriaUtil.listDistinctRoot(probandGroupCriteria, this, "trial.id", "title");
	}

	@Override
	protected Collection<ProbandGroup> handleFindByTrial(Long trialId, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria probandGroupCriteria = createProbandGroupCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ProbandGroup.class, probandGroupCriteria);
		if (trialId != null) {
			probandGroupCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this); // support filter by proband name
	}

	@Override
	protected Collection<ProbandGroup> handleFindByTrialRandomize(Long trialId,
			Boolean randomize) throws Exception {
		org.hibernate.Criteria probandGroupCriteria = createProbandGroupCriteria();
		if (trialId != null) {
			probandGroupCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (randomize != null) {
			probandGroupCriteria.add(Restrictions.eq("randomize", randomize.booleanValue()));
		}
		return probandGroupCriteria.list();
	}

	@Override
	protected Collection<ProbandGroup> handleFindByTrialTitleToken(Long trialId,
			String title, String token) throws Exception {
		org.hibernate.Criteria probandGroupCriteria = createProbandGroupCriteria();
		if (trialId != null) {
			probandGroupCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (title != null) {
			probandGroupCriteria.add(Restrictions.eq("title", title));
		}
		if (token != null) {
			probandGroupCriteria.add(Restrictions.eq("token", token));
		}
		return probandGroupCriteria.list();
	}

	@Override
	protected long handleGetCount(Long trialId)
			throws Exception {
		org.hibernate.Criteria probandGroupCriteria = createProbandGroupCriteria();
		if (trialId != null) {
			probandGroupCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		return (Long) probandGroupCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandGroup loadProbandGroupFromProbandGroupInVO(ProbandGroupInVO probandGroupInVO) {
		ProbandGroup probandGroup = null;
		Long id = probandGroupInVO.getId();
		if (id != null) {
			probandGroup = this.load(id);
		}
		if (probandGroup == null) {
			probandGroup = ProbandGroup.Factory.newInstance();
		}
		return probandGroup;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandGroup loadProbandGroupFromProbandGroupOutVO(ProbandGroupOutVO probandGroupOutVO) {
		ProbandGroup probandGroup = this.load(probandGroupOutVO.getId());
		if (probandGroup == null) {
			probandGroup = ProbandGroup.Factory.newInstance();
		}
		return probandGroup;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandGroup probandGroupInVOToEntity(ProbandGroupInVO probandGroupInVO) {
		ProbandGroup entity = this.loadProbandGroupFromProbandGroupInVO(probandGroupInVO);
		this.probandGroupInVOToEntity(probandGroupInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandGroupInVOToEntity(
			ProbandGroupInVO source,
			ProbandGroup target,
			boolean copyIfNull) {
		super.probandGroupInVOToEntity(source, target, copyIfNull);
		Long trialId = source.getTrialId();
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addGroups(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeGroups(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandGroup probandGroupOutVOToEntity(ProbandGroupOutVO probandGroupOutVO) {
		ProbandGroup entity = this.loadProbandGroupFromProbandGroupOutVO(probandGroupOutVO);
		this.probandGroupOutVOToEntity(probandGroupOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandGroupOutVOToEntity(
			ProbandGroupOutVO source,
			ProbandGroup target,
			boolean copyIfNull) {
		super.probandGroupOutVOToEntity(source, target, copyIfNull);
		TrialOutVO trialVO = source.getTrial();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addGroups(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeGroups(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandGroupInVO toProbandGroupInVO(final ProbandGroup entity) {
		return super.toProbandGroupInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandGroupInVO(
			ProbandGroup source,
			ProbandGroupInVO target) {
		super.toProbandGroupInVO(source, target);
		Trial trial = source.getTrial();
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandGroupOutVO toProbandGroupOutVO(final ProbandGroup entity) {
		return super.toProbandGroupOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandGroupOutVO(
			ProbandGroup source,
			ProbandGroupOutVO target) {
		super.toProbandGroupOutVO(source, target);
		Trial trial = source.getTrial();
		User modifiedUser = source.getModifiedUser();
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setSize(this.getProbandListEntryDao().getTrialDepartmentGroupProbandCount(null, null, source.getId(), null, false));
		target.setTotalSize(this.getProbandListEntryDao().getTrialDepartmentGroupProbandCount(null, null, source.getId(), null, true));
		target.setUniqueName(getUniqueProbandGroupName(target));
	}
}