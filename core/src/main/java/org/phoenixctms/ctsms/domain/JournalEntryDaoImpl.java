// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.phoenixctms.ctsms.compare.EntityIDComparator;
import org.phoenixctms.ctsms.enumeration.DBModule;
import org.phoenixctms.ctsms.enumeration.JournalModule;
import org.phoenixctms.ctsms.enumeration.VariablePeriod;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.security.CipherText;
import org.phoenixctms.ctsms.security.CryptoUtil;
import org.phoenixctms.ctsms.security.reencrypt.FieldReEncrypter;
import org.phoenixctms.ctsms.security.reencrypt.ReEncrypter;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.CoreUtil;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.util.date.DateCalc;
import org.phoenixctms.ctsms.vo.CourseOutVO;
import org.phoenixctms.ctsms.vo.CriteriaOutVO;
import org.phoenixctms.ctsms.vo.InputFieldOutVO;
import org.phoenixctms.ctsms.vo.InventoryOutVO;
import org.phoenixctms.ctsms.vo.JournalCategoryVO;
import org.phoenixctms.ctsms.vo.JournalEntryInVO;
import org.phoenixctms.ctsms.vo.JournalEntryOutVO;
import org.phoenixctms.ctsms.vo.MassMailOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandOutVO;
import org.phoenixctms.ctsms.vo.StaffOutVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see JournalEntry
 */
public class JournalEntryDaoImpl
		extends JournalEntryDaoBase {

	private final static int RECENT_JOURNAL_ENTRY_PAGE_SIZE_BASE = 10;

	private static void applyRecentJournalEntryTimestampCriterion(org.hibernate.Criteria journalCriteria, Date now) {
		if (journalCriteria != null) {
			VariablePeriod recentJournalEntryPeriod = Settings.getVariablePeriod(SettingCodes.RECENT_JOURNAL_ENTRY_PERIOD, Bundle.SETTINGS,
					DefaultSettings.RECENT_JOURNAL_ENTRY_PERIOD);
			if (recentJournalEntryPeriod != null) {
				Date start;
				if (now == null) {
					start = new Date();
				} else {
					start = now;
				}
				Long recentJournalEntryPeriodDays = Settings.getLongNullable(SettingCodes.RECENT_JOURNAL_ENTRY_PERIOD_DAYS, Bundle.SETTINGS,
						DefaultSettings.RECENT_JOURNAL_ENTRY_PERIOD_DAYS);
				start = DateCalc.subInterval(start, recentJournalEntryPeriod, recentJournalEntryPeriodDays);
				journalCriteria.add(Restrictions.gt("modifiedTimestamp", CommonUtil.dateToTimestamp(start)));
			}
		}
	}

	private static boolean setTitleComment(JournalEntry journalEntry, User modifiedUser, String titleL10nKey, Object[] titleArgs, String commentL10nKey, Object[] commentArgs) {
		JournalCategory category = journalEntry.getCategory();
		if (CommonUtil.getUseJournalEncryption(journalEntry.getSystemMessageModule(), category == null ? null : category.getModule())) {
			if (modifiedUser != null) {
				try {
					String title = L10nUtil.getSystemMessageTitle(Locales.JOURNAL, titleL10nKey, titleArgs);
					CipherText cipherText = CryptoUtil.encryptValue(title);
					journalEntry.setTitleIv(cipherText.getIv());
					journalEntry.setEncryptedTitle(cipherText.getCipherText());
					journalEntry.setTitleHash(CryptoUtil.hashForSearch(title));
					if (commentL10nKey != null) {
						String comment = L10nUtil.getSystemMessageComment(Locales.JOURNAL, commentL10nKey, commentArgs);
						cipherText = CryptoUtil.encryptValue(comment);
						journalEntry.setCommentIv(cipherText.getIv());
						journalEntry.setEncryptedComment(cipherText.getCipherText());
						journalEntry.setCommentHash(CryptoUtil.hashForSearch(comment));
					}
				} catch (Exception e) {
					throw new RuntimeException(e);
				} finally {
					journalEntry.setTitle(null);
					journalEntry.setComment(null);
				}
			} else {
				return false;
			}
		} else {
			journalEntry.setTitle(L10nUtil.getSystemMessageTitle(Locales.JOURNAL, titleL10nKey, titleArgs));
			if (commentL10nKey != null) {
				journalEntry.setComment(L10nUtil.getSystemMessageComment(Locales.JOURNAL, commentL10nKey, commentArgs));
			}
		}
		return true;
	}

	private final static Collection<ReEncrypter<JournalEntry>> RE_ENCRYPTERS = new ArrayList<ReEncrypter<JournalEntry>>();
	static {
		RE_ENCRYPTERS.add(new FieldReEncrypter<JournalEntry>() {

			@Override
			public byte[] getIv(JournalEntry item) {
				return item.getTitleIv();
			}

			@Override
			protected byte[] getEncrypted(JournalEntry item) {
				return item.getEncryptedTitle();
			}

			@Override
			protected void setIv(JournalEntry item, byte[] iv) {
				item.setTitleIv(iv);
			}

			@Override
			protected void setEncrypted(JournalEntry item, byte[] cipherText) {
				item.setEncryptedTitle(cipherText);
			}

			@Override
			protected void setHash(JournalEntry item, byte[] hash) {
				item.setTitleHash(hash);
			}

			@Override
			protected boolean isSkip(JournalEntry item) {
				JournalCategory category = item.getCategory();
				return !CommonUtil.getUseJournalEncryption(item.getSystemMessageModule(), category == null ? null : category.getModule());
			}
		});
		RE_ENCRYPTERS.add(new FieldReEncrypter<JournalEntry>() {

			@Override
			protected byte[] getIv(JournalEntry item) {
				return item.getCommentIv();
			}

			@Override
			protected byte[] getEncrypted(JournalEntry item) {
				return item.getEncryptedComment();
			}

			@Override
			protected void setIv(JournalEntry item, byte[] iv) {
				item.setCommentIv(iv);
			}

			@Override
			protected void setEncrypted(JournalEntry item, byte[] cipherText) {
				item.setEncryptedComment(cipherText);
			}

			@Override
			protected void setHash(JournalEntry item, byte[] hash) {
				item.setCommentHash(hash);
			}

			@Override
			protected boolean isSkip(JournalEntry item) {
				JournalCategory category = item.getCategory();
				return !CommonUtil.getUseJournalEncryption(item.getSystemMessageModule(), category == null ? null : category.getModule());
			}
		});
	}

	@Override
	protected Collection<ReEncrypter<JournalEntry>> getReEncrypters() {
		return RE_ENCRYPTERS;
	}

	private void applyJournalCriterion(org.hibernate.Criteria journalCriteria, JournalModule module, Long id) throws Exception {
		if (module != null) {
			journalCriteria.add(Restrictions.or(
					Restrictions.eq("systemMessage", false),
					Restrictions.and(Restrictions.eq("systemMessage", true), Restrictions.eq("systemMessageModule", module))));
			journalCriteria.createCriteria("category", CriteriaSpecification.LEFT_JOIN).add(Restrictions.or(Restrictions.eq("module", module), Restrictions.isNull("module")));
			if (id != null) {
				switch (module) {
					case INVENTORY_JOURNAL:
						journalCriteria.add(Restrictions.eq("inventory.id", id.longValue()));
						break;
					case STAFF_JOURNAL:
						journalCriteria.add(Restrictions.eq("staff.id", id.longValue()));
						break;
					case COURSE_JOURNAL:
						journalCriteria.add(Restrictions.eq("course.id", id.longValue()));
						break;
					case USER_JOURNAL:
						journalCriteria.add(Restrictions.eq("user.id", id.longValue()));
						break;
					case TRIAL_JOURNAL:
						journalCriteria.add(Restrictions.eq("trial.id", id.longValue()));
						break;
					case PROBAND_JOURNAL:
						journalCriteria.add(Restrictions.eq("proband.id", id.longValue()));
						break;
					case CRITERIA_JOURNAL:
						journalCriteria.add(Restrictions.eq("criteria.id", id.longValue()));
						break;
					case INPUT_FIELD_JOURNAL:
						journalCriteria.add(Restrictions.eq("inputField.id", id.longValue()));
						break;
					case MASS_MAIL_JOURNAL:
						journalCriteria.add(Restrictions.eq("massMail.id", id.longValue()));
						break;
					default:
				}
			}
		}
	}

	private org.hibernate.Criteria createJournalEntryCriteria(String alias) {
		org.hibernate.Criteria journalEntryCriteria;
		if (alias != null && alias.length() > 0) {
			journalEntryCriteria = this.getSession().createCriteria(JournalEntry.class, alias);
		} else {
			journalEntryCriteria = this.getSession().createCriteria(JournalEntry.class);
		}
		return journalEntryCriteria;
	}

	@Override
	protected JournalEntry handleAddSystemMessage(Course course, Timestamp now, User modifiedUser, String systemMessageCode, Object[] titleArgs,
			Object[] commentArgs) throws Exception {
		JournalEntry journalEntry = JournalEntry.Factory.newInstance();
		journalEntry.setSystemMessageModule(JournalModule.COURSE_JOURNAL);
		if (!setTitleComment(journalEntry, modifiedUser, systemMessageCode, titleArgs, systemMessageCode, commentArgs)) {
			return null;
		}
		CoreUtil.modifyVersion(journalEntry, now, modifiedUser);
		journalEntry.setRealTimestamp(CommonUtil.dateToTimestamp(DateCalc.getMillisCleared(now)));
		journalEntry.setSystemMessage(true);
		journalEntry.setSystemMessageCode(systemMessageCode);
		journalEntry.setCourse(course);
		course.addJournalEntries(journalEntry);
		return this.create(journalEntry);
	}

	@Override
	protected JournalEntry handleAddSystemMessage(Criteria criteria, Timestamp now, User modifiedUser, String systemMessageCode, Object[] titleArgs,
			Object[] commentArgs) throws Exception {
		JournalEntry journalEntry = JournalEntry.Factory.newInstance();
		journalEntry.setSystemMessageModule(JournalModule.CRITERIA_JOURNAL);
		if (!setTitleComment(journalEntry, modifiedUser, systemMessageCode, titleArgs, systemMessageCode, commentArgs)) {
			return null;
		}
		CoreUtil.modifyVersion(journalEntry, now, modifiedUser);
		journalEntry.setRealTimestamp(CommonUtil.dateToTimestamp(DateCalc.getMillisCleared(now)));
		journalEntry.setSystemMessage(true);
		journalEntry.setSystemMessageCode(systemMessageCode);
		journalEntry.setCriteria(criteria);
		criteria.addJournalEntries(journalEntry);
		return this.create(journalEntry);
	}

	@Override
	protected JournalEntry handleAddSystemMessage(InputField inputField, Timestamp now, User modifiedUser, String systemMessageCode, Object[] titleArgs,
			Object[] commentArgs) throws Exception {
		JournalEntry journalEntry = JournalEntry.Factory.newInstance();
		journalEntry.setSystemMessageModule(JournalModule.INPUT_FIELD_JOURNAL);
		if (!setTitleComment(journalEntry, modifiedUser, systemMessageCode, titleArgs, systemMessageCode, commentArgs)) {
			return null;
		}
		CoreUtil.modifyVersion(journalEntry, now, modifiedUser);
		journalEntry.setRealTimestamp(CommonUtil.dateToTimestamp(DateCalc.getMillisCleared(now)));
		journalEntry.setSystemMessage(true);
		journalEntry.setSystemMessageCode(systemMessageCode);
		journalEntry.setInputField(inputField);
		inputField.addJournalEntries(journalEntry);
		return this.create(journalEntry);
	}

	@Override
	protected JournalEntry handleAddSystemMessage(Inventory inventory, Timestamp now, User modifiedUser, String systemMessageCode, Object[] titleArgs,
			Object[] commentArgs) throws Exception {
		JournalEntry journalEntry = JournalEntry.Factory.newInstance();
		journalEntry.setSystemMessageModule(JournalModule.INVENTORY_JOURNAL);
		if (!setTitleComment(journalEntry, modifiedUser, systemMessageCode, titleArgs, systemMessageCode, commentArgs)) {
			return null;
		}
		CoreUtil.modifyVersion(journalEntry, now, modifiedUser);
		journalEntry.setRealTimestamp(CommonUtil.dateToTimestamp(DateCalc.getMillisCleared(now)));
		journalEntry.setSystemMessage(true);
		journalEntry.setSystemMessageCode(systemMessageCode);
		journalEntry.setInventory(inventory);
		inventory.addJournalEntries(journalEntry);
		return this.create(journalEntry);
	}

	@Override
	protected JournalEntry handleAddSystemMessage(MassMail massMail, Timestamp now, User modifiedUser, String systemMessageCode, Object[] titleArgs,
			Object[] commentArgs) throws Exception {
		JournalEntry journalEntry = JournalEntry.Factory.newInstance();
		journalEntry.setSystemMessageModule(JournalModule.MASS_MAIL_JOURNAL);
		if (!setTitleComment(journalEntry, modifiedUser, systemMessageCode, titleArgs, systemMessageCode, commentArgs)) {
			return null;
		}
		CoreUtil.modifyVersion(journalEntry, now, modifiedUser);
		journalEntry.setRealTimestamp(CommonUtil.dateToTimestamp(DateCalc.getMillisCleared(now)));
		journalEntry.setSystemMessage(true);
		journalEntry.setSystemMessageCode(systemMessageCode);
		journalEntry.setMassMail(massMail);
		massMail.addJournalEntries(journalEntry);
		return this.create(journalEntry);
	}

	@Override
	protected JournalEntry handleAddSystemMessage(Proband proband, Timestamp now, User modifiedUser, String systemMessageCode, Object[] titleArgs,
			Object[] commentArgs) throws Exception {
		JournalEntry journalEntry = JournalEntry.Factory.newInstance();
		journalEntry.setSystemMessageModule(JournalModule.PROBAND_JOURNAL);
		if (!setTitleComment(journalEntry, modifiedUser, systemMessageCode, titleArgs, systemMessageCode, commentArgs)) {
			return null;
		}
		CoreUtil.modifyVersion(journalEntry, now, modifiedUser);
		journalEntry.setRealTimestamp(CommonUtil.dateToTimestamp(DateCalc.getMillisCleared(now)));
		journalEntry.setSystemMessage(true);
		journalEntry.setSystemMessageCode(systemMessageCode);
		journalEntry.setProband(proband);
		proband.addJournalEntries(journalEntry);
		return this.create(journalEntry);
	}

	@Override
	protected JournalEntry handleAddSystemMessage(Staff staff, Timestamp now, User modifiedUser, String systemMessageCode, Object[] titleArgs,
			Object[] commentArgs) throws Exception {
		JournalEntry journalEntry = JournalEntry.Factory.newInstance();
		journalEntry.setSystemMessageModule(JournalModule.STAFF_JOURNAL);
		if (!setTitleComment(journalEntry, modifiedUser, systemMessageCode, titleArgs, systemMessageCode, commentArgs)) {
			return null;
		}
		CoreUtil.modifyVersion(journalEntry, now, modifiedUser);
		journalEntry.setRealTimestamp(CommonUtil.dateToTimestamp(DateCalc.getMillisCleared(now)));
		journalEntry.setSystemMessage(true);
		journalEntry.setSystemMessageCode(systemMessageCode);
		journalEntry.setStaff(staff);
		staff.addJournalEntries(journalEntry);
		return this.create(journalEntry);
	}

	@Override
	protected JournalEntry handleAddSystemMessage(Trial trial, Timestamp now, User modifiedUser, String systemMessageCode, Object[] titleArgs,
			Object[] commentArgs) throws Exception {
		JournalEntry journalEntry = JournalEntry.Factory.newInstance();
		journalEntry.setSystemMessageModule(JournalModule.TRIAL_JOURNAL);
		if (!setTitleComment(journalEntry, modifiedUser, systemMessageCode, titleArgs, systemMessageCode, commentArgs)) {
			return null;
		}
		CoreUtil.modifyVersion(journalEntry, now, modifiedUser);
		journalEntry.setRealTimestamp(CommonUtil.dateToTimestamp(DateCalc.getMillisCleared(now)));
		journalEntry.setSystemMessage(true);
		journalEntry.setSystemMessageCode(systemMessageCode);
		journalEntry.setTrial(trial);
		trial.addJournalEntries(journalEntry);
		return this.create(journalEntry);
	}

	@Override
	protected JournalEntry handleAddSystemMessage(User user, Timestamp now, User modifiedUser, String systemMessageCode, Object[] titleArgs, Object[] commentArgs)
			throws Exception {
		JournalEntry journalEntry = JournalEntry.Factory.newInstance();
		journalEntry.setSystemMessageModule(JournalModule.USER_JOURNAL);
		if (!setTitleComment(journalEntry, modifiedUser, systemMessageCode, titleArgs, systemMessageCode, commentArgs)) {
			return null;
		}
		CoreUtil.modifyVersion(journalEntry, now, modifiedUser);
		journalEntry.setRealTimestamp(CommonUtil.dateToTimestamp(DateCalc.getMillisCleared(now)));
		journalEntry.setSystemMessage(true);
		journalEntry.setSystemMessageCode(systemMessageCode);
		journalEntry.setUser(user);
		user.addJournalEntries(journalEntry);
		return this.create(journalEntry);
	}

	@Override
	protected Collection<JournalEntry> handleFindActivity(JournalModule module, Long modifiedUserId, DBModule criteriaModule, Long entityDepartmentId, boolean limit, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(JournalEntry.class, journalCriteria);
		if (modifiedUserId != null) {
			journalCriteria.add(Restrictions.eq("modifiedUser.id", modifiedUserId.longValue()));
		}
		if (limit) {
			applyRecentJournalEntryTimestampCriterion(journalCriteria, null);
		}
		if (module != null) {
			journalCriteria.add(Restrictions.or(
					Restrictions.eq("systemMessage", false),
					Restrictions.and(Restrictions.eq("systemMessage", true), Restrictions.eq("systemMessageModule", module))));
			criteriaMap.createCriteria("category", CriteriaSpecification.LEFT_JOIN).add(Restrictions.or(Restrictions.eq("module", module), Restrictions.isNull("module")));
			switch (module) {
				case INVENTORY_JOURNAL:
					if (entityDepartmentId != null) {
						criteriaMap.createCriteria("inventory").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case STAFF_JOURNAL:
					if (entityDepartmentId != null) {
						criteriaMap.createCriteria("staff").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case COURSE_JOURNAL:
					if (entityDepartmentId != null) {
						criteriaMap.createCriteria("course").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case USER_JOURNAL:
					if (entityDepartmentId != null) {
						criteriaMap.createCriteria("user").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case TRIAL_JOURNAL:
					if (entityDepartmentId != null) {
						criteriaMap.createCriteria("trial").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case PROBAND_JOURNAL:
					if (entityDepartmentId != null) {
						criteriaMap.createCriteria("proband").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case CRITERIA_JOURNAL:
					if (criteriaModule != null) {
						criteriaMap.createCriteria("criteria").add(Restrictions.eq("module", criteriaModule)); // inner join per default
					}
					break;
				case INPUT_FIELD_JOURNAL:
					break;
				case MASS_MAIL_JOURNAL:
					if (entityDepartmentId != null) {
						criteriaMap.createCriteria("massMail").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				default:
			}
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return journalCriteria.list();
	}

	@Override
	protected Collection<JournalEntry> handleFindEcrfJournal(Long trailId, Boolean systemMessage) throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
		if (systemMessage != null) {
			journalCriteria.add(Restrictions.eq("systemMessage", systemMessage.booleanValue()));
		}
		journalCriteria.add(Restrictions.or(
				Restrictions.eq("systemMessage", false),
				Restrictions.or(Restrictions.and(Restrictions.eq("systemMessage", true), Restrictions.eq("systemMessageModule", JournalModule.TRIAL_JOURNAL)),
						Restrictions.and(Restrictions.eq("systemMessage", true), Restrictions.eq("systemMessageModule", JournalModule.INPUT_FIELD_JOURNAL)))));
		journalCriteria.createCriteria("category", CriteriaSpecification.LEFT_JOIN).add(Restrictions.or(
				Restrictions.or(Restrictions.eq("module", JournalModule.TRIAL_JOURNAL), Restrictions.eq("module", JournalModule.INPUT_FIELD_JOURNAL)),
				Restrictions.isNull("module")));
		journalCriteria.createCriteria("inputField", CriteriaSpecification.LEFT_JOIN).createCriteria("ecrfFields", "trialEcrfField", CriteriaSpecification.LEFT_JOIN);
		journalCriteria.add(Restrictions.or(Restrictions.eq("trial.id", trailId.longValue()),
				Restrictions.eq("trialEcrfField.trial.id", trailId.longValue())));
		journalCriteria.addOrder(Order.asc("id"));
		return CriteriaUtil.listDistinctRoot(journalCriteria, this);
	}

	@Override
	protected Collection<JournalEntry> handleFindJournal(JournalModule module,
			Long id, PSFVO psf) throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(JournalEntry.class, journalCriteria);
		applyJournalCriterion(journalCriteria, module, id);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return journalCriteria.list();
	}

	@Override
	protected Collection<User> handleFindJournalUsers(JournalModule module,
			Long id, boolean limit) throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
		if (limit) {
			applyRecentJournalEntryTimestampCriterion(journalCriteria, null);
		}
		applyJournalCriterion(journalCriteria, module, id);
		journalCriteria.setProjection(Projections.distinct(Projections.property("modifiedUser")));
		return journalCriteria.list();
	}

	@Override
	protected Collection<JournalEntry> handleFindRecent(JournalModule module, Long modifiedUserId, DBModule criteriaModule, Long entityDepartmentId, boolean limit, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria("journalEntry0");
		SubCriteriaMap criteriaMap = new SubCriteriaMap(JournalEntry.class, journalCriteria);
		if (modifiedUserId != null) {
			journalCriteria.add(Restrictions.eq("modifiedUser.id", modifiedUserId.longValue()));
		}
		if (limit) {
			applyRecentJournalEntryTimestampCriterion(journalCriteria, null);
		}
		journalCriteria.add(Restrictions.or(
				Restrictions.eq("systemMessage", false),
				Restrictions.and(Restrictions.eq("systemMessage", true), Restrictions.eq("systemMessageModule", module))));
		criteriaMap.createCriteria("category", CriteriaSpecification.LEFT_JOIN).add(Restrictions.or(Restrictions.eq("module", module), Restrictions.isNull("module")));
		DetachedCriteria subQuery = DetachedCriteria.forClass(JournalEntryImpl.class, "journalEntry1"); // IMPL!!!!
		subQuery.setProjection(Projections.max("id"));
		journalCriteria.add(Subqueries.propertyEq("id", subQuery));
		switch (module) {
			case INVENTORY_JOURNAL:
				subQuery.add(Restrictions.eqProperty("journalEntry1.inventory", "journalEntry0.inventory"));
				if (entityDepartmentId != null) {
					criteriaMap.createCriteria("inventory").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case STAFF_JOURNAL:
				subQuery.add(Restrictions.eqProperty("journalEntry1.staff", "journalEntry0.staff"));
				if (entityDepartmentId != null) {
					criteriaMap.createCriteria("staff").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case COURSE_JOURNAL:
				subQuery.add(Restrictions.eqProperty("journalEntry1.course", "journalEntry0.course"));
				if (entityDepartmentId != null) {
					criteriaMap.createCriteria("course").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case USER_JOURNAL:
				subQuery.add(Restrictions.eqProperty("journalEntry1.user", "journalEntry0.user"));
				if (entityDepartmentId != null) {
					criteriaMap.createCriteria("user").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case TRIAL_JOURNAL:
				subQuery.add(Restrictions.eqProperty("journalEntry1.trial", "journalEntry0.trial"));
				if (entityDepartmentId != null) {
					criteriaMap.createCriteria("trial").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case PROBAND_JOURNAL:
				subQuery.add(Restrictions.eqProperty("journalEntry1.proband", "journalEntry0.proband"));
				if (entityDepartmentId != null) {
					criteriaMap.createCriteria("proband").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case CRITERIA_JOURNAL:
				subQuery.add(Restrictions.eqProperty("journalEntry1.criteria", "journalEntry0.criteria"));
				if (criteriaModule != null) {
					subQuery.createCriteria("criteria", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("module", criteriaModule));
				}
				break;
			case INPUT_FIELD_JOURNAL:
				subQuery.add(Restrictions.eqProperty("journalEntry1.inputField", "journalEntry0.inputField"));
				break;
			case MASS_MAIL_JOURNAL:
				subQuery.add(Restrictions.eqProperty("journalEntry1.massMail", "journalEntry0.massMail"));
				if (entityDepartmentId != null) {
					criteriaMap.createCriteria("massMail").add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			default:
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return journalCriteria.list();
	}

	@Override
	protected Collection<JournalEntry> handleFindRecent(JournalModule module, Long modifiedUserId, DBModule criteriaModule, Long entityDepartmentId, int maxRecentJournalEntries,
			boolean limit) throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
		if (modifiedUserId != null) {
			journalCriteria.add(Restrictions.eq("modifiedUser.id", modifiedUserId.longValue()));
		}
		if (limit) {
			applyRecentJournalEntryTimestampCriterion(journalCriteria, null);
		}
		journalCriteria.add(Restrictions.or(
				Restrictions.eq("systemMessage", false),
				Restrictions.and(Restrictions.eq("systemMessage", true), Restrictions.eq("systemMessageModule", module))));
		journalCriteria.createCriteria("category", CriteriaSpecification.LEFT_JOIN).add(Restrictions.or(Restrictions.eq("module", module), Restrictions.isNull("module")));
		String property = null;
		org.hibernate.Criteria entityCriteria = null;
		switch (module) {
			case INVENTORY_JOURNAL:
				property = "inventory";
				if (entityDepartmentId != null) {
					entityCriteria = journalCriteria.createCriteria(property, CriteriaSpecification.INNER_JOIN);
					entityCriteria.add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case STAFF_JOURNAL:
				property = "staff";
				if (entityDepartmentId != null) {
					entityCriteria = journalCriteria.createCriteria(property, CriteriaSpecification.INNER_JOIN);
					entityCriteria.add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case COURSE_JOURNAL:
				property = "course";
				if (entityDepartmentId != null) {
					entityCriteria = journalCriteria.createCriteria(property, CriteriaSpecification.INNER_JOIN);
					entityCriteria.add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case USER_JOURNAL:
				property = "user";
				if (entityDepartmentId != null) {
					entityCriteria = journalCriteria.createCriteria(property, CriteriaSpecification.INNER_JOIN);
					entityCriteria.add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case TRIAL_JOURNAL:
				property = "trial";
				if (entityDepartmentId != null) {
					entityCriteria = journalCriteria.createCriteria(property, CriteriaSpecification.INNER_JOIN);
					entityCriteria.add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case PROBAND_JOURNAL:
				property = "proband";
				if (entityDepartmentId != null) {
					entityCriteria = journalCriteria.createCriteria(property, CriteriaSpecification.INNER_JOIN);
					entityCriteria.add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			case CRITERIA_JOURNAL:
				property = "criteria";
				if (criteriaModule != null) {
					entityCriteria = journalCriteria.createCriteria(property, CriteriaSpecification.INNER_JOIN);
					entityCriteria.add(Restrictions.eq("module", criteriaModule));
				}
				break;
			case INPUT_FIELD_JOURNAL:
				property = "inputField";
				break;
			case MASS_MAIL_JOURNAL:
				property = "massMail";
				if (entityDepartmentId != null) {
					entityCriteria = journalCriteria.createCriteria(property, CriteriaSpecification.INNER_JOIN);
					entityCriteria.add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
				}
				break;
			default:
		}
		journalCriteria.add(Restrictions.isNotNull(property));
		int maxResults = maxRecentJournalEntries < 0 ? RECENT_JOURNAL_ENTRY_PAGE_SIZE_BASE : maxRecentJournalEntries;
		boolean emptyPage = false;
		journalCriteria.setFirstResult(0);
		journalCriteria.setMaxResults(maxResults);
		journalCriteria.addOrder(Order.desc("id"));
		Iterator<JournalEntry> resultPageIt = journalCriteria.list().iterator();
		HashMap<Long, JournalEntry> distinctJournalEntryMap = new HashMap<Long, JournalEntry>();
		ArrayList<Long> idsFound = new ArrayList<Long>();
		while (!emptyPage && (distinctJournalEntryMap.size() < maxRecentJournalEntries || maxRecentJournalEntries < 0)) {
			if (resultPageIt.hasNext()) {
				JournalEntry journalEntry = resultPageIt.next();
				Long id = null;
				switch (module) {
					case INVENTORY_JOURNAL:
						id = journalEntry.getInventory().getId();
						break;
					case STAFF_JOURNAL:
						id = journalEntry.getStaff().getId();
						break;
					case COURSE_JOURNAL:
						id = journalEntry.getCourse().getId();
						break;
					case USER_JOURNAL:
						id = journalEntry.getUser().getId();
						break;
					case TRIAL_JOURNAL:
						id = journalEntry.getTrial().getId();
						break;
					case PROBAND_JOURNAL:
						id = journalEntry.getProband().getId();
						break;
					case CRITERIA_JOURNAL:
						id = journalEntry.getCriteria().getId();
						break;
					case INPUT_FIELD_JOURNAL:
						id = journalEntry.getInputField().getId();
						break;
					case MASS_MAIL_JOURNAL:
						id = journalEntry.getMassMail().getId();
						break;
					default:
				}
				if (!distinctJournalEntryMap.containsKey(id)) {
					distinctJournalEntryMap.put(id, journalEntry);
					idsFound.add(id);
				}
			} else {
				maxResults = maxResults * RECENT_JOURNAL_ENTRY_PAGE_SIZE_BASE;
				journalCriteria.setMaxResults(maxResults);
				Iterator<Long> idsFoundIt = idsFound.iterator();
				while (idsFoundIt.hasNext()) {
					if (entityCriteria == null) {
						entityCriteria = journalCriteria.createCriteria(property, CriteriaSpecification.INNER_JOIN);
					}
					entityCriteria.add(Restrictions.ne("id", idsFoundIt.next().longValue()));
				}
				idsFound.clear();
				resultPageIt = journalCriteria.list().iterator();
				emptyPage = !resultPageIt.hasNext();
			}
		}
		ArrayList<JournalEntry> result = new ArrayList<JournalEntry>(distinctJournalEntryMap.values());
		Collections.sort(result, new EntityIDComparator<JournalEntry>(true));
		return result;
	}

	@Override
	protected Collection<JournalEntry> handleFindSystemMessages(JournalModule module,
			Long id, String systemMessageCode, PSFVO psf) throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(JournalEntry.class, journalCriteria);
		applyJournalCriterion(journalCriteria, module, id);
		journalCriteria.add(Restrictions.eq("systemMessage", true));
		journalCriteria.add(Restrictions.eq("systemMessageCode", systemMessageCode));
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return journalCriteria.list();
	}

	@Override
	protected long handleGetActivityCount(JournalModule module,
			Long modifiedUserId, DBModule criteriaModule, Long entityDepartmentId, boolean limit) throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
		if (modifiedUserId != null) {
			journalCriteria.add(Restrictions.eq("modifiedUser.id", modifiedUserId.longValue()));
		}
		if (limit) {
			applyRecentJournalEntryTimestampCriterion(journalCriteria, null);
		}
		if (module != null) {
			journalCriteria.add(Restrictions.or(
					Restrictions.eq("systemMessage", false),
					Restrictions.and(Restrictions.eq("systemMessage", true), Restrictions.eq("systemMessageModule", module))));
			journalCriteria.createCriteria("category", CriteriaSpecification.LEFT_JOIN).add(Restrictions.or(Restrictions.eq("module", module), Restrictions.isNull("module")));
			switch (module) {
				case INVENTORY_JOURNAL:
					if (entityDepartmentId != null) {
						journalCriteria.createCriteria("inventory", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case STAFF_JOURNAL:
					if (entityDepartmentId != null) {
						journalCriteria.createCriteria("staff", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case COURSE_JOURNAL:
					if (entityDepartmentId != null) {
						journalCriteria.createCriteria("course", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case USER_JOURNAL:
					if (entityDepartmentId != null) {
						journalCriteria.createCriteria("user", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case TRIAL_JOURNAL:
					if (entityDepartmentId != null) {
						journalCriteria.createCriteria("trial", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case PROBAND_JOURNAL:
					if (entityDepartmentId != null) {
						journalCriteria.createCriteria("proband", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				case CRITERIA_JOURNAL:
					if (criteriaModule != null) {
						journalCriteria.createCriteria("criteria", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("module", criteriaModule));
					}
					break;
				case INPUT_FIELD_JOURNAL:
					break;
				case MASS_MAIL_JOURNAL:
					if (entityDepartmentId != null) {
						journalCriteria.createCriteria("massMail", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("department.id", entityDepartmentId.longValue()));
					}
					break;
				default:
			}
		}
		return (Long) journalCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected Long handleGetActivityCount(Long journalEntryId, boolean limit) throws Exception {
		JournalEntry journalEntry = this.load(journalEntryId);
		JournalModule module = null;
		if (journalEntry.isSystemMessage()) {
			module = journalEntry.getSystemMessageModule();
		} else {
			module = journalEntry.getCategory().getModule();
		}
		if (module != null) {
			org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
			if (limit) {
				applyRecentJournalEntryTimestampCriterion(journalCriteria, null);
			}
			journalCriteria.setProjection(Projections.rowCount());
			switch (module) {
				case INVENTORY_JOURNAL:
					return (Long) journalCriteria.add(Restrictions.eq("inventory.id", journalEntry.getInventory().getId())).uniqueResult();
				case STAFF_JOURNAL:
					return (Long) journalCriteria.add(Restrictions.eq("staff.id", journalEntry.getStaff().getId())).uniqueResult();
				case COURSE_JOURNAL:
					return (Long) journalCriteria.add(Restrictions.eq("course.id", journalEntry.getCourse().getId())).uniqueResult();
				case TRIAL_JOURNAL:
					return (Long) journalCriteria.add(Restrictions.eq("trial.id", journalEntry.getTrial().getId())).uniqueResult();
				case PROBAND_JOURNAL:
					return (Long) journalCriteria.add(Restrictions.eq("proband.id", journalEntry.getProband().getId())).uniqueResult();
				case USER_JOURNAL:
					return (Long) journalCriteria.add(Restrictions.eq("user.id", journalEntry.getUser().getId())).uniqueResult();
				case INPUT_FIELD_JOURNAL:
					return (Long) journalCriteria.add(Restrictions.eq("inputField.id", journalEntry.getInputField().getId())).uniqueResult();
				case CRITERIA_JOURNAL:
					return (Long) journalCriteria.add(Restrictions.eq("criteria.id", journalEntry.getCriteria().getId())).uniqueResult();
				case MASS_MAIL_JOURNAL:
					return (Long) journalCriteria.add(Restrictions.eq("massMail.id", journalEntry.getMassMail().getId())).uniqueResult();
				default:
			}
		}
		return null;
	}

	@Override
	protected long handleGetCount(JournalModule module,
			Long id) throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
		applyJournalCriterion(journalCriteria, module, id);
		return (Long) journalCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected String handleGetCountSafe(JournalModule module,
			Long id, Integer limit) throws Exception {
		org.hibernate.Criteria journalCriteria = createJournalEntryCriteria(null);
		applyJournalCriterion(journalCriteria, module, id);
		return CriteriaUtil.limitCount(limit, Settings.getIntNullable(SettingCodes.JOURNAL_ENTRY_DEFAULT_COUNT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.JOURNAL_ENTRY_DEFAULT_COUNT_LIMIT), journalCriteria);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public JournalEntry journalEntryInVOToEntity(JournalEntryInVO journalEntryInVO) {
		JournalEntry entity = this.loadJournalEntryFromJournalEntryInVO(journalEntryInVO);
		this.journalEntryInVOToEntity(journalEntryInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void journalEntryInVOToEntity(
			JournalEntryInVO source,
			JournalEntry target,
			boolean copyIfNull) {
		super.journalEntryInVOToEntity(source, target, copyIfNull);
		Long categoryId = source.getCategoryId();
		Long inventoryId = source.getInventoryId();
		Long staffId = source.getStaffId();
		Long courseId = source.getCourseId();
		Long userId = source.getUserId();
		Long trialId = source.getTrialId();
		Long probandId = source.getProbandId();
		Long criteriaId = source.getCriteriaId();
		Long inputFieldId = source.getInputFieldId();
		Long massMailId = source.getMassMailId();
		JournalCategory category = null;
		if (categoryId != null) {
			category = this.getJournalCategoryDao().load(categoryId);
			target.setCategory(category);
		} else if (copyIfNull) {
			target.setCategory(category);
		}
		if (inventoryId != null) {
			Inventory inventory = this.getInventoryDao().load(inventoryId);
			target.setInventory(inventory);
			inventory.addJournalEntries(target);
		} else if (copyIfNull) {
			Inventory inventory = target.getInventory();
			target.setInventory(null);
			if (inventory != null) {
				inventory.removeJournalEntries(target);
			}
		}
		if (staffId != null) {
			Staff staff = this.getStaffDao().load(staffId);
			target.setStaff(staff);
			staff.addJournalEntries(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeJournalEntries(target);
			}
		}
		if (courseId != null) {
			Course course = this.getCourseDao().load(courseId);
			target.setCourse(course);
			course.addJournalEntries(target);
		} else if (copyIfNull) {
			Course course = target.getCourse();
			target.setCourse(null);
			if (course != null) {
				course.removeJournalEntries(target);
			}
		}
		if (userId != null) {
			User user = this.getUserDao().load(userId);
			target.setUser(user);
			user.addJournalEntries(target);
		} else if (copyIfNull) {
			User user = target.getUser();
			target.setUser(null);
			if (user != null) {
				user.removeJournalEntries(target);
			}
		}
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addJournalEntries(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeJournalEntries(target);
			}
		}
		if (probandId != null) {
			Proband proband = this.getProbandDao().load(probandId);
			target.setProband(proband);
			proband.addJournalEntries(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeJournalEntries(target);
			}
		}
		if (criteriaId != null) {
			Criteria criteria = this.getCriteriaDao().load(criteriaId);
			target.setCriteria(criteria);
			criteria.addJournalEntries(target);
		} else if (copyIfNull) {
			Criteria criteria = target.getCriteria();
			target.setCriteria(null);
			if (criteria != null) {
				criteria.removeJournalEntries(target);
			}
		}
		if (inputFieldId != null) {
			InputField inputField = this.getInputFieldDao().load(inputFieldId);
			target.setInputField(inputField);
			inputField.addJournalEntries(target);
		} else if (copyIfNull) {
			InputField inputField = target.getInputField();
			target.setInputField(null);
			if (inputField != null) {
				inputField.removeJournalEntries(target);
			}
		}
		if (massMailId != null) {
			MassMail massMail = this.getMassMailDao().load(massMailId);
			target.setMassMail(massMail);
			massMail.addJournalEntries(target);
		} else if (copyIfNull) {
			MassMail massMail = target.getMassMail();
			target.setMassMail(null);
			if (massMail != null) {
				massMail.removeJournalEntries(target);
			}
		}
		if (CommonUtil.getUseJournalEncryption(target.getSystemMessageModule(), category == null ? null : category.getModule())) {
			try {
				if (copyIfNull || source.getTitle() != null) {
					CipherText cipherText = CryptoUtil.encryptValue(source.getTitle());
					target.setTitleIv(cipherText.getIv());
					target.setEncryptedTitle(cipherText.getCipherText());
					target.setTitleHash(CryptoUtil.hashForSearch(source.getTitle()));
				}
				if (copyIfNull || source.getComment() != null) {
					CipherText cipherText = CryptoUtil.encryptValue(source.getComment());
					target.setCommentIv(cipherText.getIv());
					target.setEncryptedComment(cipherText.getCipherText());
					target.setCommentHash(CryptoUtil.hashForSearch(source.getComment()));
				}
			} catch (Exception e) {
				throw new RuntimeException(e);
			} finally {
				target.setTitle(null);
				target.setComment(null);
			}
		} else {
			target.setTitleIv(null);
			target.setEncryptedTitle(null);
			target.setTitleHash(null);
			target.setCommentIv(null);
			target.setEncryptedComment(null);
			target.setCommentHash(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public JournalEntry journalEntryOutVOToEntity(JournalEntryOutVO journalEntryOutVO) {
		JournalEntry entity = this.loadJournalEntryFromJournalEntryOutVO(journalEntryOutVO);
		this.journalEntryOutVOToEntity(journalEntryOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void journalEntryOutVOToEntity(
			JournalEntryOutVO source,
			JournalEntry target,
			boolean copyIfNull) {
		super.journalEntryOutVOToEntity(source, target, copyIfNull);
		JournalCategoryVO categoryVO = source.getCategory();
		InventoryOutVO inventoryVO = source.getInventory();
		StaffOutVO staffVO = source.getStaff();
		CourseOutVO courseVO = source.getCourse();
		UserOutVO userVO = source.getUser();
		TrialOutVO trialVO = source.getTrial();
		ProbandOutVO probandVO = source.getProband();
		CriteriaOutVO criteriaVO = source.getCriteria();
		InputFieldOutVO inputFieldVO = source.getInputField();
		MassMailOutVO massMailVO = source.getMassMail();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (categoryVO != null) {
			target.setCategory(this.getJournalCategoryDao().journalCategoryVOToEntity(categoryVO));
		} else if (copyIfNull) {
			target.setCategory(null);
		}
		if (inventoryVO != null) {
			Inventory inventory = this.getInventoryDao().inventoryOutVOToEntity(inventoryVO);
			target.setInventory(inventory);
			inventory.addJournalEntries(target);
		} else if (copyIfNull) {
			Inventory inventory = target.getInventory();
			target.setInventory(null);
			if (inventory != null) {
				inventory.removeJournalEntries(target);
			}
		}
		if (staffVO != null) {
			Staff staff = this.getStaffDao().staffOutVOToEntity(staffVO);
			target.setStaff(staff);
			staff.addJournalEntries(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeJournalEntries(target);
			}
		}
		if (courseVO != null) {
			Course course = this.getCourseDao().courseOutVOToEntity(courseVO);
			target.setCourse(course);
			course.addJournalEntries(target);
		} else if (copyIfNull) {
			Course course = target.getCourse();
			target.setCourse(null);
			if (course != null) {
				course.removeJournalEntries(target);
			}
		}
		if (userVO != null) {
			User user = this.getUserDao().userOutVOToEntity(userVO);
			target.setUser(user);
			user.addJournalEntries(target);
		} else if (copyIfNull) {
			User user = target.getUser();
			target.setUser(null);
			if (user != null) {
				user.removeJournalEntries(target);
			}
		}
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addJournalEntries(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeJournalEntries(target);
			}
		}
		if (probandVO != null) {
			Proband proband = this.getProbandDao().probandOutVOToEntity(probandVO);
			target.setProband(proband);
			proband.addJournalEntries(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeJournalEntries(target);
			}
		}
		if (criteriaVO != null) {
			Criteria criteria = this.getCriteriaDao().criteriaOutVOToEntity(criteriaVO);
			target.setCriteria(criteria);
			criteria.addJournalEntries(target);
		} else if (copyIfNull) {
			Criteria criteria = target.getCriteria();
			target.setCriteria(null);
			if (criteria != null) {
				criteria.removeJournalEntries(target);
			}
		}
		if (inputFieldVO != null) {
			InputField inputField = this.getInputFieldDao().inputFieldOutVOToEntity(inputFieldVO);
			target.setInputField(inputField);
			inputField.addJournalEntries(target);
		} else if (copyIfNull) {
			InputField inputField = target.getInputField();
			target.setInputField(null);
			if (inputField != null) {
				inputField.removeJournalEntries(target);
			}
		}
		if (massMailVO != null) {
			MassMail massMail = this.getMassMailDao().massMailOutVOToEntity(massMailVO);
			target.setMassMail(massMail);
			massMail.addJournalEntries(target);
		} else if (copyIfNull) {
			MassMail massMail = target.getMassMail();
			target.setMassMail(null);
			if (massMail != null) {
				massMail.removeJournalEntries(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
		if (CommonUtil.getUseJournalEncryption(source.getSystemMessageModule(), categoryVO == null ? null : categoryVO.getModule())) {
			try {
				if (copyIfNull || source.getTitle() != null) {
					CipherText cipherText = CryptoUtil.encryptValue(source.getTitle());
					target.setTitleIv(cipherText.getIv());
					target.setEncryptedTitle(cipherText.getCipherText());
					target.setTitleHash(CryptoUtil.hashForSearch(source.getTitle()));
				}
				if (copyIfNull || source.getComment() != null) {
					CipherText cipherText = CryptoUtil.encryptValue(source.getComment());
					target.setCommentIv(cipherText.getIv());
					target.setEncryptedComment(cipherText.getCipherText());
					target.setCommentHash(CryptoUtil.hashForSearch(source.getComment()));
				}
			} catch (Exception e) {
				throw new RuntimeException(e);
			} finally {
				target.setTitle(null);
				target.setComment(null);
			}
		} else {
			target.setTitleIv(null);
			target.setEncryptedTitle(null);
			target.setTitleHash(null);
			target.setCommentIv(null);
			target.setEncryptedComment(null);
			target.setCommentHash(null);
		}
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private JournalEntry loadJournalEntryFromJournalEntryInVO(JournalEntryInVO journalEntryInVO) {
		JournalEntry journalEntry = null;
		Long id = journalEntryInVO.getId();
		if (id != null) {
			journalEntry = this.load(id);
		}
		if (journalEntry == null) {
			journalEntry = JournalEntry.Factory.newInstance();
		}
		return journalEntry;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private JournalEntry loadJournalEntryFromJournalEntryOutVO(JournalEntryOutVO journalEntryOutVO) {
		JournalEntry journalEntry = this.load(journalEntryOutVO.getId());
		if (journalEntry == null) {
			journalEntry = JournalEntry.Factory.newInstance();
		}
		return journalEntry;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public JournalEntryInVO toJournalEntryInVO(final JournalEntry entity) {
		return super.toJournalEntryInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toJournalEntryInVO(
			JournalEntry source,
			JournalEntryInVO target) {
		super.toJournalEntryInVO(source, target);
		JournalCategory category = source.getCategory();
		Inventory inventory = source.getInventory();
		Staff staff = source.getStaff();
		Course course = source.getCourse();
		User user = source.getUser();
		Trial trial = source.getTrial();
		Proband proband = source.getProband();
		Criteria criteria = source.getCriteria();
		InputField inputField = source.getInputField();
		MassMail massMail = source.getMassMail();
		if (category != null) {
			target.setCategoryId(category.getId());
		}
		if (inventory != null) {
			target.setInventoryId(inventory.getId());
		}
		if (staff != null) {
			target.setStaffId(staff.getId());
		}
		if (course != null) {
			target.setCourseId(course.getId());
		}
		if (user != null) {
			target.setUserId(user.getId());
		}
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		if (proband != null) {
			target.setProbandId(proband.getId());
		}
		if (criteria != null) {
			target.setCriteriaId(criteria.getId());
		}
		if (inputField != null) {
			target.setInputFieldId(inputField.getId());
		}
		if (massMail != null) {
			target.setMassMailId(massMail.getId());
		}
		if (CommonUtil.getUseJournalEncryption(source.getSystemMessageModule(), category == null ? null : category.getModule())) {
			try {
				target.setTitle((String) CryptoUtil.decryptValue(source.getTitleIv(), source.getEncryptedTitle()));
				target.setComment((String) CryptoUtil.decryptValue(source.getCommentIv(), source.getEncryptedComment()));
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public JournalEntryOutVO toJournalEntryOutVO(final JournalEntry entity) {
		return super.toJournalEntryOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toJournalEntryOutVO(
			JournalEntry source,
			JournalEntryOutVO target) {
		super.toJournalEntryOutVO(source, target);
		JournalCategory category = source.getCategory();
		Inventory inventory = source.getInventory();
		Staff staff = source.getStaff();
		Course course = source.getCourse();
		User user = source.getUser();
		Trial trial = source.getTrial();
		Proband proband = source.getProband();
		Criteria criteria = source.getCriteria();
		InputField inputField = source.getInputField();
		MassMail massMail = source.getMassMail();
		User modifiedUser = source.getModifiedUser();
		if (category != null) {
			target.setCategory(this.getJournalCategoryDao().toJournalCategoryVO(category));
		}
		if (inventory != null) {
			target.setInventory(this.getInventoryDao().toInventoryOutVO(inventory));
		}
		if (staff != null) {
			target.setStaff(this.getStaffDao().toStaffOutVO(staff));
		}
		if (course != null) {
			target.setCourse(this.getCourseDao().toCourseOutVO(course));
		}
		if (user != null) {
			target.setUser(this.getUserDao().toUserOutVO(user));
		}
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		if (proband != null) {
			target.setProband(this.getProbandDao().toProbandOutVO(proband));
		}
		if (criteria != null) {
			target.setCriteria(this.getCriteriaDao().toCriteriaOutVO(criteria));
		}
		if (inputField != null) {
			target.setInputField(this.getInputFieldDao().toInputFieldOutVO(inputField));
		}
		if (massMail != null) {
			target.setMassMail(this.getMassMailDao().toMassMailOutVO(massMail));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		if (CommonUtil.getUseJournalEncryption(source.getSystemMessageModule(), category == null ? null : category.getModule())) {
			try {
				if (!CoreUtil.isPassDecryption()) {
					throw new Exception();
				}
				target.setTitle((String) CryptoUtil.decryptValue(source.getTitleIv(), source.getEncryptedTitle()));
				target.setComment((String) CryptoUtil.decryptValue(source.getCommentIv(), source.getEncryptedComment()));
				target.setDecrypted(true);
			} catch (Exception e) {
				target.setTitle(null);
				target.setComment(null);
				target.setDecrypted(false);
			}
		} else {
			target.setDecrypted(true);
		}
	}
}