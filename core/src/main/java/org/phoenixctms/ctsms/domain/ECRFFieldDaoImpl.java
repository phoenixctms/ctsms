// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.text.MessageFormat;
import java.util.Collection;

import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.ECRFFieldInVO;
import org.phoenixctms.ctsms.vo.ECRFFieldOutVO;
import org.phoenixctms.ctsms.vo.ECRFOutVO;
import org.phoenixctms.ctsms.vo.InputFieldOutVO;
import org.phoenixctms.ctsms.vo.LightECRFFieldOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

public class ECRFFieldDaoImpl
		extends ECRFFieldDaoBase {

	private static void applySortOrders(org.hibernate.Criteria ecrfFieldCriteria, org.hibernate.Criteria ecrfCriteria) {
		if (ecrfFieldCriteria != null) {
			ecrfFieldCriteria.addOrder(Order.asc("trial"));
			if (ecrfCriteria != null) {
				ecrfFieldCriteria.addOrder(Order.asc(ecrfCriteria.getAlias() + ".name"));
			} else {
				ecrfFieldCriteria.addOrder(Order.asc("ecrf"));
			}
			ecrfFieldCriteria.addOrder(Order.asc("section"));
			ecrfFieldCriteria.addOrder(Order.asc("position"));
		}
	}

	private static String getUniqueECRFFieldName(ECRFField ecrfField) {
		Trial trial;
		InputField field;
		ECRF ecrf;
		if (ecrfField != null && (trial = ecrfField.getTrial()) != null && (field = ecrfField.getField()) != null && (ecrf = ecrfField.getEcrf()) != null) {
			String section = ecrfField.getSection();
			String inputFieldName;
			if (field.isLocalized()) {
				inputFieldName = L10nUtil.getInputFieldName(Locales.USER, field.getNameL10nKey());
			} else {
				inputFieldName = field.getNameL10nKey();
			}
			String revision = ecrf.getRevision();
			if (section != null && section.length() > 0) {
				if (revision != null && revision.length() > 0) {
					return MessageFormat.format(CommonUtil.UNIQUE_ECRF_NAME_REVISION_SECTION_ECRF_FIELD_NAME, trial.getName(), ecrf.getName(), revision, section,
							Long.toString(ecrfField.getPosition()), inputFieldName);
				} else {
					return MessageFormat.format(CommonUtil.UNIQUE_ECRF_NAME_SECTION_ECRF_FIELD_NAME, trial.getName(), ecrf.getName(), section,
							Long.toString(ecrfField.getPosition()), inputFieldName);
				}
			} else {
				if (revision != null && revision.length() > 0) {
					return MessageFormat.format(CommonUtil.UNIQUE_ECRF_NAME_REVISION_ECRF_FIELD_NAME, trial.getName(), ecrf.getName(), revision,
							Long.toString(ecrfField.getPosition()),
							inputFieldName);
				} else {
					return MessageFormat.format(CommonUtil.UNIQUE_ECRF_NAME_ECRF_FIELD_NAME, trial.getName(), ecrf.getName(), Long.toString(ecrfField.getPosition()),
							inputFieldName);
				}
			}
		}
		return null;
	}

	private org.hibernate.Criteria createEcrfFieldCriteria() {
		org.hibernate.Criteria ecrfFieldCriteria = this.getSession().createCriteria(ECRFField.class);
		return ecrfFieldCriteria;
	}

	@Override
	public ECRFField eCRFFieldInVOToEntity(ECRFFieldInVO eCRFFieldInVO) {
		ECRFField entity = this.loadECRFFieldFromECRFFieldInVO(eCRFFieldInVO);
		this.eCRFFieldInVOToEntity(eCRFFieldInVO, entity, true);
		return entity;
	}

	@Override
	public void eCRFFieldInVOToEntity(
			ECRFFieldInVO source,
			ECRFField target,
			boolean copyIfNull) {
		super.eCRFFieldInVOToEntity(source, target, copyIfNull);
		target.setTitleL10nKey(source.getTitle());
		Long ecrfId = source.getEcrfId();
		Long fieldId = source.getFieldId();
		Long trialId = source.getTrialId();
		if (ecrfId != null) {
			ECRF ecrf = this.getECRFDao().load(ecrfId);
			target.setEcrf(ecrf);
			ecrf.addEcrfFields(target);
		} else if (copyIfNull) {
			ECRF ecrf = target.getEcrf();
			target.setEcrf(null);
			if (ecrf != null) {
				ecrf.removeEcrfFields(target);
			}
		}
		if (fieldId != null) {
			InputField field = this.getInputFieldDao().load(fieldId);
			target.setField(field);
			field.addEcrfFields(target);
		} else if (copyIfNull) {
			InputField field = target.getField();
			target.setField(null);
			if (field != null) {
				field.removeEcrfFields(target);
			}
		}
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addEcrfFields(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeEcrfFields(target);
			}
		}
	}

	@Override
	public ECRFField eCRFFieldOutVOToEntity(ECRFFieldOutVO eCRFFieldOutVO) {
		ECRFField entity = this.loadECRFFieldFromECRFFieldOutVO(eCRFFieldOutVO);
		this.eCRFFieldOutVOToEntity(eCRFFieldOutVO, entity, true);
		return entity;
	}

	@Override
	public void eCRFFieldOutVOToEntity(
			ECRFFieldOutVO source,
			ECRFField target,
			boolean copyIfNull) {
		super.eCRFFieldOutVOToEntity(source, target, copyIfNull);
		ECRFOutVO ecrfVO = source.getEcrf();
		TrialOutVO trialVO = source.getTrial();
		InputFieldOutVO fieldVO = source.getField();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (ecrfVO != null) {
			ECRF ecrf = this.getECRFDao().eCRFOutVOToEntity(ecrfVO);
			target.setEcrf(ecrf);
			ecrf.addEcrfFields(target);
		} else if (copyIfNull) {
			ECRF ecrf = target.getEcrf();
			target.setEcrf(null);
			if (ecrf != null) {
				ecrf.removeEcrfFields(target);
			}
		}
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addEcrfFields(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeEcrfFields(target);
			}
		}
		if (fieldVO != null) {
			InputField field = this.getInputFieldDao().inputFieldOutVOToEntity(fieldVO);
			target.setField(field);
			field.addEcrfFields(target);
		} else if (copyIfNull) {
			InputField field = target.getField();
			target.setField(null);
			if (field != null) {
				field.removeEcrfFields(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	@Override
	protected Collection<ECRFField> handleFindAllSorted() throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		org.hibernate.Criteria ecrfCriteria = ecrfFieldCriteria.createCriteria("ecrf", "ecrf0", CriteriaSpecification.INNER_JOIN);
		applySortOrders(ecrfFieldCriteria, ecrfCriteria);
		return ecrfFieldCriteria.list();
	}

	@Override
	protected Collection<ECRFField> handleFindAllSorted(String nameInfix, Integer limit) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		org.hibernate.Criteria ecrfCriteria = ecrfFieldCriteria.createCriteria("ecrf", "ecrf0", CriteriaSpecification.INNER_JOIN);
		if (!CommonUtil.isEmptyString(nameInfix)) {
			org.hibernate.Criteria trialCriteria = ecrfFieldCriteria.createCriteria("trial", "trial0", CriteriaSpecification.INNER_JOIN);
			org.hibernate.Criteria fieldCriteria = ecrfFieldCriteria.createCriteria("field", "inputField", CriteriaSpecification.INNER_JOIN);
			ecrfFieldCriteria.add(Restrictions.or(
					(new CategoryCriterion(nameInfix, "section", MatchMode.ANYWHERE)).getRestriction(),
					Restrictions.or(
							(new CategoryCriterion(nameInfix, "inputField.nameL10nKey", MatchMode.ANYWHERE)).getRestriction(),
							Restrictions.or(
									(new CategoryCriterion(nameInfix, "ecrf0.name", MatchMode.ANYWHERE)).getRestriction(),
									(new CategoryCriterion(nameInfix, "trial0.name", MatchMode.ANYWHERE)).getRestriction()))));
		}
		applySortOrders(ecrfFieldCriteria, ecrfCriteria);
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.ECRF_FIELD_FIELD_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.ECRF_FIELD_FIELD_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), ecrfFieldCriteria);
		return ecrfFieldCriteria.list();
	}

	@Override
	protected Collection<ECRFField> handleFindByEcrfJsVariableName(Long ecrfId,
			String jsVariableName) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		ecrfFieldCriteria.add(Restrictions.eq("jsVariableName", jsVariableName));
		return ecrfFieldCriteria.list();
	}

	@Override
	protected Collection<ECRFField> handleFindByEcrfSectionPosition(Long ecrfId, String section,
			Long position) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		if (position != null) {
			ecrfFieldCriteria.add(Restrictions.eq("position", position.longValue()));
		}
		return ecrfFieldCriteria.list();
	}

	@Override
	protected ECRFField handleFindFirst(Long ecrfId, String section,
			Long excludeId) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		if (excludeId != null) {
			ecrfFieldCriteria.add(Restrictions.ne("id", excludeId.longValue()));
		}
		ecrfFieldCriteria.addOrder(Order.desc("position"));
		ecrfFieldCriteria.setMaxResults(1);
		return (ECRFField) ecrfFieldCriteria.uniqueResult();
	}

	@Override
	protected Collection<ECRFField> handleFindByEcrfRef(Long ecrfId, String ref) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		if (ref != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ref", ref));
		}
		return ecrfFieldCriteria.list();
	}

	@Override
	protected Collection<ECRFField> handleFindByTrialEcrfSectionSeriesJs(Long trialId, Long ecrfId, String section, boolean sort, Boolean series, Boolean js, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFField.class, ecrfFieldCriteria);
		if (trialId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		if (series != null) {
			ecrfFieldCriteria.add(Restrictions.eq("series", series.booleanValue()));
		}
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		if (js != null) {
			if (js) {
				ecrfFieldCriteria.add(Restrictions.and(Restrictions.ne("jsVariableName", ""), Restrictions.isNotNull("jsVariableName")));
			} else {
				ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("jsVariableName", ""), Restrictions.isNull("jsVariableName")));
			}
		}
		org.hibernate.Criteria ecrfCriteria = null;
		if (sort) {
			ecrfCriteria = criteriaMap.createCriteria("ecrf", "ecrf0", CriteriaSpecification.INNER_JOIN);
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(ecrfFieldCriteria, ecrfCriteria);
		}
		return ecrfFieldCriteria.list();
	}

	@Override
	protected Collection<ECRFField> handleFindByTrialEcrfSeriesJs(Long trialId, Long ecrfId, boolean sort, Boolean series, Boolean js, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFField.class, ecrfFieldCriteria);
		if (trialId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		if (series != null) {
			ecrfFieldCriteria.add(Restrictions.eq("series", series.booleanValue()));
		}
		if (js != null) {
			if (js) {
				ecrfFieldCriteria.add(Restrictions.and(Restrictions.ne("jsVariableName", ""), Restrictions.isNotNull("jsVariableName")));
			} else {
				ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("jsVariableName", ""), Restrictions.isNull("jsVariableName")));
			}
		}
		org.hibernate.Criteria ecrfCriteria = null;
		if (sort) {
			ecrfCriteria = criteriaMap.createCriteria("ecrf", "ecrf0", CriteriaSpecification.INNER_JOIN);
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(ecrfFieldCriteria, ecrfCriteria);
		}
		return ecrfFieldCriteria.list();
	}

	@Override
	protected Collection<ECRFField> handleFindByTrialField(Long trialId, Long fieldId, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFField.class, ecrfFieldCriteria);
		if (trialId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (fieldId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return ecrfFieldCriteria.list();
	}

	@Override
	protected Long handleFindMaxPosition(Long ecrfId, String section) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		ecrfFieldCriteria.setProjection(Projections.max("position"));
		return (Long) ecrfFieldCriteria.uniqueResult();
	}

	@Override
	protected Collection<String> handleFindSections(Long trialId, Long ecrfId, String sectionPrefix, Integer limit) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		if (trialId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		CategoryCriterion.apply(ecrfFieldCriteria, new CategoryCriterion(sectionPrefix, "section", MatchMode.START));
		ecrfFieldCriteria.addOrder(Order.asc("section"));
		ecrfFieldCriteria.setProjection(Projections.distinct(Projections.property("section")));
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.ECRF_FIELD_SECTION_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.ECRF_FIELD_SECTION_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), ecrfFieldCriteria);
		return ecrfFieldCriteria.list();
	}

	@Override
	protected long handleGetCount(Long trialId, Long ecrfId, Boolean series, Boolean optional) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		if (trialId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		if (series != null) {
			ecrfFieldCriteria.add(Restrictions.eq("series", series.booleanValue()));
		}
		if (optional != null) {
			ecrfFieldCriteria.add(Restrictions.eq("optional", optional.booleanValue()));
		}
		return (Long) ecrfFieldCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long trialId, Long ecrfId, String section, Boolean series, Boolean optional) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		if (trialId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		if (series != null) {
			ecrfFieldCriteria.add(Restrictions.eq("series", series.booleanValue()));
		}
		if (optional != null) {
			ecrfFieldCriteria.add(Restrictions.eq("optional", optional.booleanValue()));
		}
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		return (Long) ecrfFieldCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long ecrfId, String section, Long ecrfFieldId) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		if (ecrfFieldId != null) {
			ecrfFieldCriteria.add(Restrictions.idEq(ecrfFieldId.longValue()));
		}
		return (Long) ecrfFieldCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCountByField(Long inputFieldId) throws Exception {
		org.hibernate.Criteria ecrfFieldCriteria = createEcrfFieldCriteria();
		if (inputFieldId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("field.id", inputFieldId.longValue()));
		}
		return (Long) ecrfFieldCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	public ECRFField lightECRFFieldOutVOToEntity(LightECRFFieldOutVO lightECRFFieldOutVO) {
		ECRFField entity = this.loadECRFFieldFromLightECRFFieldOutVO(lightECRFFieldOutVO);
		this.lightECRFFieldOutVOToEntity(lightECRFFieldOutVO, entity, true);
		return entity;
	}

	@Override
	public void lightECRFFieldOutVOToEntity(
			LightECRFFieldOutVO source,
			ECRFField target,
			boolean copyIfNull) {
		super.lightECRFFieldOutVOToEntity(source, target, copyIfNull);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRFField loadECRFFieldFromECRFFieldInVO(ECRFFieldInVO eCRFFieldInVO) {
		ECRFField ecrfField = null;
		Long id = eCRFFieldInVO.getId();
		if (id != null) {
			ecrfField = this.load(id);
		}
		if (ecrfField == null) {
			ecrfField = ECRFField.Factory.newInstance();
		}
		return ecrfField;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRFField loadECRFFieldFromECRFFieldOutVO(ECRFFieldOutVO eCRFFieldOutVO) {
		ECRFField ecrfField = this.load(eCRFFieldOutVO.getId());
		if (ecrfField == null) {
			ecrfField = ECRFField.Factory.newInstance();
		}
		return ecrfField;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRFField loadECRFFieldFromLightECRFFieldOutVO(LightECRFFieldOutVO lightECRFFieldOutVO) {
		ECRFField ecrfField = this.load(lightECRFFieldOutVO.getId());
		if (ecrfField == null) {
			ecrfField = ECRFField.Factory.newInstance();
		}
		return ecrfField;
	}

	@Override
	public ECRFFieldInVO toECRFFieldInVO(final ECRFField entity) {
		return super.toECRFFieldInVO(entity);
	}

	@Override
	public void toECRFFieldInVO(
			ECRFField source,
			ECRFFieldInVO target) {
		super.toECRFFieldInVO(source, target);
		target.setTitle(source.getTitleL10nKey());
		ECRF ecrf = source.getEcrf();
		Trial trial = source.getTrial();
		InputField field = source.getField();
		if (ecrf != null) {
			target.setEcrfId(ecrf.getId());
		}
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		if (field != null) {
			target.setFieldId(field.getId());
		}
	}

	@Override
	public ECRFFieldOutVO toECRFFieldOutVO(final ECRFField entity) {
		return super.toECRFFieldOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toECRFFieldOutVO(
			ECRFField source,
			ECRFFieldOutVO target) {
		super.toECRFFieldOutVO(source, target);
		Trial trial = source.getTrial();
		ECRF ecrf = source.getEcrf();
		InputField field = source.getField();
		User modifiedUser = source.getModifiedUser();
		if (ecrf != null) {
			target.setEcrf(this.getECRFDao().toECRFOutVO(ecrf));
		}
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		target.setTitle(source.getTitleL10nKey());
		if (field != null) {
			target.setField(this.getInputFieldDao().toInputFieldOutVO(field));
			if (field.isLocalized()) {
				target.setTitle(L10nUtil.getInputFieldTitle(Locales.USER, source.getTitleL10nKey()));
			}
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setUniqueName(CommonUtil.getUniqueECRFFieldName(target, null));
	}

	@Override
	public LightECRFFieldOutVO toLightECRFFieldOutVO(final ECRFField entity) {
		return super.toLightECRFFieldOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toLightECRFFieldOutVO(
			ECRFField source,
			LightECRFFieldOutVO target) {
		super.toLightECRFFieldOutVO(source, target);
		target.setUniqueName(getUniqueECRFFieldName(source));
	}
}