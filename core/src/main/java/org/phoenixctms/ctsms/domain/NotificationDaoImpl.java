// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;

import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.hibernate.Criteria;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.adapt.InputFieldValueStringAdapterBase;
import org.phoenixctms.ctsms.compare.VOIDComparator;
import org.phoenixctms.ctsms.email.NotificationMessageTemplateParameters;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.BundleControl;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.CoreUtil;
import org.phoenixctms.ctsms.util.DefaultMessages;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.KeyValueString;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.util.MessageCodes;
import org.phoenixctms.ctsms.util.ServiceUtil;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.util.date.DateCalc;
import org.phoenixctms.ctsms.vo.ECRFFieldValueOutVO;
import org.phoenixctms.ctsms.vo.InputFieldOutVO;
import org.phoenixctms.ctsms.vo.InputFieldSelectionSetValueOutVO;
import org.phoenixctms.ctsms.vo.NotificationRecipientVO;
import org.phoenixctms.ctsms.vo.NotificationVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.springframework.ui.velocity.VelocityEngineUtils;

/**
 * @see Notification
 */
public class NotificationDaoImpl
extends NotificationDaoBase
{

	private final static VOIDComparator RECIPIENT_VO_ID_COMPARATOR = new VOIDComparator<NotificationRecipientVO>(false);
	private final static String TEMPLATE_ENCODING = "UTF-8";
	// private final static VelocityStringUtils STRING_UTILS = new VelocityStringUtils();

	private final static InputFieldValueStringAdapterBase ECRF_INPUT_FIELD_VALUE_ADAPTER = new InputFieldValueStringAdapterBase<ECRFFieldValueOutVO>() {

		private final static String SELECTION_SET_VALUES_SEPARATOR = ", ";

		@Override
		protected boolean getBooleanValue(ECRFFieldValueOutVO value) {
			return value.getBooleanValue();
		}

		@Override
		protected String getCheckboxString(boolean value) {
			return L10nUtil.getString(Locales.NOTIFICATION,
					value ? MessageCodes.NOTIFICATION_INPUT_FIELD_VALUE_CHECKBOX_CHECKED : MessageCodes.NOTIFICATION_INPUT_FIELD_VALUE_CHECKBOX_UNCHECKED,
							value ? DefaultMessages.NOTIFICATION_INPUT_FIELD_VALUE_CHECKBOX_CHECKED : DefaultMessages.NOTIFICATION_INPUT_FIELD_VALUE_CHECKBOX_UNCHECKED);
		}

		@Override
		protected DateFormat getDateFormat(boolean isUserTimeZone) {
			return Settings.getSimpleDateFormat(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_DATE_PATTERN, Bundle.SETTINGS, DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_DATE_PATTERN,
					Locales.NOTIFICATION);
		}

		@Override
		protected DateFormat getDateTimeFormat(boolean isUserTimeZone) {
			return Settings.getSimpleDateFormat(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_DATETIME_PATTERN, Bundle.SETTINGS,
					DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_DATETIME_PATTERN, Locales.NOTIFICATION);
		}

		@Override
		protected Date getDateValue(ECRFFieldValueOutVO value) {
			return value.getDateValue();
		}

		@Override
		protected String getDecimalSeparator() {
			return Settings.getString(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_DECIMAL_SEPARATOR, Bundle.SETTINGS, DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_DECIMAL_SEPARATOR);
		}

		@Override
		protected Float getFloatValue(ECRFFieldValueOutVO value) {
			return value.getFloatValue();
		}

		@Override
		protected InputFieldOutVO getInputField(ECRFFieldValueOutVO value) {
			return value != null ? value.getEcrfField().getField() : null;
		}

		@Override
		protected Long getLongValue(ECRFFieldValueOutVO value) {
			return value.getLongValue();
		}

		@Override
		protected Collection<InputFieldSelectionSetValueOutVO> getSelectionSetValues(ECRFFieldValueOutVO value) {
			return value.getSelectionValues();
		}

		@Override
		protected String getSelectionSetValuesSeparator() {
			return SELECTION_SET_VALUES_SEPARATOR;
			// return L10nUtil.getString(Locales.NOTIFICATION, MessageCodes.NOTIFICATION_INPUT_FIELD_VALUE_SELECTION_SET_VALUES_SEPARATOR,
			// DefaultMessages.NOTIFICATION_INPUT_FIELD_VALUE_SELECTION_SET_VALUES_SEPARATOR);
		}

		@Override
		protected Integer getTextClipMaxLength() {
			return null;
		}

		@Override
		protected String getTextValue(ECRFFieldValueOutVO value) {
			return value.getTextValue();
		}

		@Override
		protected DateFormat getTimeFormat(boolean isUserTimeZone) {
			return Settings.getSimpleDateFormat(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_TIME_PATTERN, Bundle.SETTINGS, DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_TIME_PATTERN,
					Locales.NOTIFICATION);
		}

		@Override
		protected Date getTimestampValue(ECRFFieldValueOutVO value) {
			return value.getTimestampValue();
		}

		@Override
		protected Date getTimeValue(ECRFFieldValueOutVO value) {
			return value.getTimeValue();
		}
	};
	private VelocityEngine velocityEngine;

	private void addDepartmentRecipients(Notification newNotification, Department department, org.phoenixctms.ctsms.enumeration.NotificationType notificationType)
			throws Exception {
		if (Settings.getBoolean(SettingCodes.NOTIFY_ALL_DEPARTMENT_RECIPIENTS, Bundle.SETTINGS,
				DefaultSettings.NOTIFY_ALL_DEPARTMENT_RECIPIENTS)) {
			Iterator<Staff> staffIt = this.getStaffDao().findByDepartmentNotificationType(department == null ? null : department.getId(), notificationType).iterator();
			while (staffIt.hasNext()) {
				createNotificationRecipient(newNotification, staffIt.next());
			}
		}
	}

	private HashSet<Staff> addLecturerRecipients(Notification newNotification, Course course, boolean create) throws Exception {
		HashSet<Staff> result = new HashSet<Staff>();
		if (course != null) {
			Iterator<Lecturer> lecturersIt = course.getLecturers().iterator();
			while (lecturersIt.hasNext()) {
				Staff lecturerStaff = lecturersIt.next().getStaff();
				if (result.add(lecturerStaff) && create) {
					createNotificationRecipient(newNotification, lecturerStaff);
				}
			}
		}
		return result;
	}

	private ArrayList<Staff> addSuperVisorsRecipients(Notification newNotification, Staff staff, boolean create) throws Exception {
		ArrayList<Staff> result = new ArrayList<Staff>();
		if (staff != null) {
			Staff parent = staff.getParent();
			if (parent != null) {
				Iterator<Staff> it = parent.getChildren().iterator();
				while (it.hasNext()) {
					Staff colleague = it.next();
					if (colleague.isSupervisor() && !colleague.equals(staff)) {
						if (create) {
							createNotificationRecipient(newNotification, colleague);
						}
						result.add(colleague);
					}
				}
				while (parent != null) {
					if (parent.isSupervisor()) {
						if (create) {
							createNotificationRecipient(newNotification, parent);
						}
						result.add(parent);
					}
					parent = parent.getParent();
				}
			}
		}
		return result;
	}

	private HashSet<Staff> addTrialTeamMemberOtherRecipients(Notification newNotification, Trial trial, boolean create) throws Exception {
		return addTrialTeamMemberRecipients(newNotification, trial, false, true, false, false, false, false, create);
	}

	private HashSet<Staff> addTrialTeamMemberRecipients(Notification newNotification, Trial trial, boolean filterTimelineEventRecipients, boolean filterOtherRecipients,
			boolean filterEcrfValidatedStatusRecipients, boolean filterEcrfReviewStatusRecipients, boolean filterEcrfVerifiedStatusRecipients,
			boolean filterEcrfFieldStatusRecipients, boolean create) throws Exception {
		HashSet<Staff> result = new HashSet<Staff>();
		if (trial != null) {
			Iterator<TeamMember> membersIt = trial.getMembers().iterator();
			while (membersIt.hasNext()) {
				TeamMember teamMember = membersIt.next();
				if ((!filterTimelineEventRecipients || teamMember.isNotifyTimelineEvent())
						&& (!filterOtherRecipients || teamMember.isNotifyOther())
						&& (!filterEcrfValidatedStatusRecipients || teamMember.isNotifyEcrfValidatedStatus())
						&& (!filterEcrfReviewStatusRecipients || teamMember.isNotifyEcrfReviewStatus())
						&& (!filterEcrfVerifiedStatusRecipients || teamMember.isNotifyEcrfVerifiedStatus())
						&& (!filterEcrfFieldStatusRecipients || teamMember.isNotifyEcrfFieldStatus())) {
					Staff teamMemberStaff = teamMember.getStaff();
					if (result.add(teamMemberStaff) && create) {
						createNotificationRecipient(newNotification, teamMemberStaff);
					}
				}
			}
		}
		return result;
	}

	private org.hibernate.Criteria createNotificationCriteria() {
		org.hibernate.Criteria notificationCriteria = this.getSession().createCriteria(Notification.class);
		return notificationCriteria;
	}

	private NotificationRecipient createNotificationRecipient(Notification notification, Staff staff) throws Exception {
		if (staff != null) { // should never be null
			NotificationRecipient notificationRecipient = NotificationRecipient.Factory.newInstance();
			notificationRecipient.setNotification(notification);
			notification.addRecipients(notificationRecipient);
			notificationRecipient.setStaff(staff);
			staff.addNotificationReceipts(notificationRecipient);
			notificationRecipient.setTimesProcessed(0l);
			notificationRecipient.setTimestamp(new Timestamp(System.currentTimeMillis()));
			return this.getNotificationRecipientDao().create(notificationRecipient);
		}
		return null;
	}

	private ArrayList<NotificationRecipient> createNotificationRecipients(Notification notification, Collection<Staff> staffs) throws Exception {
		ArrayList<NotificationRecipient> result = new ArrayList<NotificationRecipient>(staffs.size());
		if (staffs != null && staffs.size() > 0) {
			Iterator<Staff> it = staffs.iterator();
			while (it.hasNext()) {
				result.add(createNotificationRecipient(notification, it.next()));
			}
		}
		return result;
	}

	private Map createTemplateModel(Notification notification, Date today, Map messageParameters) throws Exception {
		Map model = CoreUtil.createEmptyTemplateModel();
		NotificationVO preliminaryNotificationVO = this.toNotificationVO(notification);
		boolean enumerateEntities = Settings.getBoolean(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_ENUMERATE_ENTITIES, Bundle.SETTINGS,
				DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_ENUMERATE_ENTITIES);
		boolean excludeEncryptedFields = Settings.getBoolean(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_OMIT_ENCRYPTED_FIELDS, Bundle.SETTINGS,
				DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_OMIT_ENCRYPTED_FIELDS);
		String datetimePattern = Settings.getString(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_DATETIME_PATTERN, Bundle.SETTINGS,
				DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_DATETIME_PATTERN);
		String datePattern = Settings.getString(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_DATE_PATTERN, Bundle.SETTINGS, DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_DATE_PATTERN);
		String timePattern = Settings.getString(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_TIME_PATTERN, Bundle.SETTINGS, DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_TIME_PATTERN);
		Iterator<KeyValueString> voFieldIt = KeyValueString
				.getKeyValuePairs(
						NotificationVO.class,
						Settings.getInt(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_VO_DEPTH, Bundle.SETTINGS, DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_VO_DEPTH),
						excludeEncryptedFields,
						null,
						enumerateEntities,
						Settings.getBoolean(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_ENUMERATE_REFERENCES, Bundle.SETTINGS,
								DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_ENUMERATE_REFERENCES),
						Settings.getBoolean(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_ENUMERATE_COLLECTIONS, Bundle.SETTINGS,
								DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_ENUMERATE_COLLECTIONS),
						Settings.getBoolean(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_ENUMERATE_MAPS, Bundle.SETTINGS, DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_ENUMERATE_MAPS),
						NotificationMessageTemplateParameters.TEMPLATE_MODEL_FIELD_NAME_ASSOCIATION_PATH_SEPARATOR,
						NotificationMessageTemplateParameters.TEMPLATE_MODEL_LOWER_CASE_FIELD_NAMES
						).iterator();


		while (voFieldIt.hasNext()) {
			KeyValueString keyValuePair = voFieldIt.next();
			Iterator<ArrayList<Object>> indexesKeysIt = keyValuePair.getIndexesKeys(preliminaryNotificationVO).iterator();
			while (indexesKeysIt.hasNext()) {
				ArrayList<Object> indexesKeys = indexesKeysIt.next();
				model.put(keyValuePair.getKey(indexesKeys),
						keyValuePair.getValue(Locales.NOTIFICATION, preliminaryNotificationVO, indexesKeys, datetimePattern, datePattern, timePattern, enumerateEntities,
								excludeEncryptedFields));
			}
		}
		model.put(NotificationMessageTemplateParameters.NOTIFICATION, preliminaryNotificationVO);
		model.put(
				NotificationMessageTemplateParameters.GENERATED_ON,
				Settings.getSimpleDateFormat(SettingCodes.NOTIFICATION_TEMPLATE_MODEL_DATETIME_PATTERN, Bundle.SETTINGS,
						DefaultSettings.NOTIFICATION_TEMPLATE_MODEL_DATETIME_PATTERN, Locales.NOTIFICATION).format(today));
		model.put(
				NotificationMessageTemplateParameters.INSTANCE_NAME, Settings.getInstanceName());
		model.put(
				NotificationMessageTemplateParameters.HTTP_BASE_URL, Settings.getHttpBaseUrl());
		model.put(
				NotificationMessageTemplateParameters.HTTP_DOMAIN_NAME, Settings.getHttpDomainName());
		model.put(NotificationMessageTemplateParameters.STRING_UTILS, ServiceUtil.VELOCITY_STRING_UTILS);
		if (messageParameters != null && messageParameters.size() > 0) {
			model.putAll(messageParameters);
		}
		return model;
	}

	private String getMessage(Notification notification, Map messageParameters) throws Exception {
		String messageVslFileName = L10nUtil.getNotificationMessageTemplate(Locales.NOTIFICATION, notification.getType().getMessageTemplateL10nKey());

		if (messageVslFileName != null && messageVslFileName.length() > 0) {
			Iterator<String> it = BundleControl.PROPERTIES_SEARCH_PATHS.iterator();
			while (it.hasNext()) {
				try {
					File messageVslFile = new java.io.File(it.next(), messageVslFileName);
					FileInputStream stream = new FileInputStream(messageVslFile);
					try {
						StringWriter result = new StringWriter();
						velocityEngine.evaluate(new VelocityContext(messageParameters), result, messageVslFile.getName(), new InputStreamReader(stream, TEMPLATE_ENCODING));
						return result.toString();
					} catch (IOException e) {
						// e.printStackTrace();
					} finally {
						stream.close();
					}
				} catch (FileNotFoundException e) {
					// e.printStackTrace();
				} catch (SecurityException e) {
					// e.printStackTrace();
				}
			}
			return VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, messageVslFileName, TEMPLATE_ENCODING, messageParameters);
		} else {
			return null;
		}
	}

	private String getSubject(Notification notification, Map messageParameters) {
		NotificationType type = notification.getType();
		switch (type.getType()) {
			case MAINTENANCE_REMINDER:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("maintenancescheduleitem_inventory_name"),
						messageParameters.get("maintenancescheduleitem_title")
				});
			case INVENTORY_INACTIVE:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("inventorystatusentry_inventory_name"),
						messageParameters.get("inventorystatusentry_type"),
				});
			case INVENTORY_INACTIVE_BOOKING:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("inventorybooking_start"),
						messageParameters.get("inventorybooking_stop"),
						messageParameters.get("inventorybooking_inventory_name"),
						messageParameters.get("inventorystatusentry_type")
				});
			case STAFF_INACTIVE:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("staffstatusentry_staff_name"),
						messageParameters.get("staffstatusentry_type"),
				});
			case STAFF_INACTIVE_DUTY_ROSTER_TURN:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("dutyrosterturn_start"),
						messageParameters.get("dutyrosterturn_stop"),
						messageParameters.get("dutyrosterturn_staff_name"),
						messageParameters.get("staffstatusentry_type")
				});
			case PROBAND_INACTIVE:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("probandstatusentry_proband_id"),
						messageParameters.get("probandstatusentry_type")
				});
			case PROBAND_INACTIVE_VISIT_SCHEDULE_ITEM:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("visitscheduleitem_trial_name"),
						messageParameters.get("visitscheduleitem_name"),
						messageParameters.get("probandstatusentry_proband_id"),
						messageParameters.get("probandstatusentry_type")
				});
			case STAFF_INACTIVE_VISIT_SCHEDULE_ITEM:
				return L10nUtil.getNotificationSubject(
						Locales.NOTIFICATION,
						type.getSubjectL10nKey(),
						new Object[] {
								messageParameters.get("visitscheduleitem_trial_name"),
								messageParameters.get("visitscheduleitem_name"),
								messageParameters.get(NotificationMessageTemplateParameters.VISIT_SCHEDULE_ITEM_DAY_DATE),
								((Collection) messageParameters.get(NotificationMessageTemplateParameters.INACTIVE_STAFF)).size(),
								messageParameters.get(NotificationMessageTemplateParameters.INACTIVE_STAFF_LIMIT),
						});
			case EXPIRING_COURSE:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("course_name"),
						messageParameters.get(NotificationMessageTemplateParameters.COURSE_EXPIRATION_DAYS_LEFT)
				});
			case EXPIRING_COURSE_PARTICIPATION:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("courseparticipationstatusentry_course_name"),
						messageParameters.get(NotificationMessageTemplateParameters.COURSE_EXPIRATION_DAYS_LEFT)
				});
			case COURSE_PARTICIPATION_STATUS_UPDATED:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("courseparticipationstatusentry_course_name"),
						messageParameters.get("courseparticipationstatusentry_staff_name"),
						messageParameters.get("courseparticipationstatusentry_status")
				});
			case TIMELINE_EVENT_REMINDER:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("timelineevent_trial_name"),
						messageParameters.get("timelineevent_type"),
						messageParameters.get("timelineevent_title")
				});
			case VISIT_SCHEDULE_ITEM_REMINDER:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("visitscheduleitem_trial_name"),
						messageParameters.get("visitscheduleitem_name")
				});
			case EXPIRING_PROBAND_AUTO_DELETE:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("proband_id"),
						messageParameters.get(NotificationMessageTemplateParameters.PROBAND_AUTO_DELETE_DAYS_LEFT)
				});
			case EXPIRING_PASSWORD:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("password_user_name"),
						messageParameters.get(NotificationMessageTemplateParameters.PASSWORD_EXPIRATION_DAYS_LEFT)
				});
			case TRIAL_STATUS_UPDATED:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("trial_name"),
						messageParameters.get("trial_status")
				});
			case ECRF_STATUS_UPDATED:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("ecrfstatusentry_listentry_trial_name"),
						messageParameters.get("ecrfstatusentry_listentry_proband_id"),
						messageParameters.get("ecrfstatusentry_ecrf_name"),
						messageParameters.get("ecrfstatusentry_status")
				});
			case NEW_ECRF_FIELD_STATUS:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("ecrffieldstatusentry_listentry_trial_name"),
						messageParameters.get("ecrffieldstatusentry_listentry_proband_id"),
						messageParameters.get("ecrffieldstatusentry_ecrffield_ecrf_name"),
						messageParameters.get("ecrffieldstatusentry_status")
				});
			case PROBANDS_DELETED:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get(NotificationMessageTemplateParameters.NUMBER_OF_PROBANDS_DELETED)
				});
			case TRIAL_TAG_MISSING:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("trial_name"),
						messageParameters.get("trialtag")
				});
			case DUTY_ROSTER_TURN_UPDATED:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("dutyrosterturn_start"),
						messageParameters.get("dutyrosterturn_stop")
				});
			case DUTY_ROSTER_TURN_ASSIGNED:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("dutyrosterturn_start"),
						messageParameters.get("dutyrosterturn_stop")
				});
			case DUTY_ROSTER_TURN_UNASSIGNED:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("dutyrosterturn_start"),
						messageParameters.get("dutyrosterturn_stop")
				});
			case NEW_COURSE:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("course_name")
				});
			case USER_ACCOUNT:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("user_name")
				});
			case DUTY_ROSTER_TURN_DELETED:
				return L10nUtil.getNotificationSubject(Locales.NOTIFICATION, type.getSubjectL10nKey(), new Object[] {
						messageParameters.get("dutyrosterturn_start"),
						messageParameters.get("dutyrosterturn_stop")
				});
			default:
		}
		return null;
	}

	@Override
	protected Notification handleAddExpiringCourseNotification(Course course, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.EXPIRING_COURSE;
		ServiceUtil.cancelNotifications(course.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Department department = null;
		HashSet<Staff> lecturers = addLecturerRecipients(notification, course, false);
		if (lecturers.size() == 0) {
			department = course.getDepartment();
			notification.setDepartment(department);
		}
		notification.setCourse(course);
		course.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			// if (lecturers.size() == 0) {
			// addDepartmentRecipients(notification, department, notificationType);
			// } else {
			createNotificationRecipients(notification, lecturers);
			// }
			return notification;
		} else {
			course.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNewCourseNotification(Course course, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.NEW_COURSE;
		ServiceUtil.cancelNotifications(course.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Department department = course.getDepartment();
		notification.setDepartment(department);
		notification.setCourse(course);
		course.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			addDepartmentRecipients(notification, department, notificationType);
			return notification;
		} else {
			course.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(
			CourseParticipationStatusEntry courseParticipationStatusEntry,
			boolean expires, boolean toLecturers, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType;
		if (expires) {
			notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.EXPIRING_COURSE_PARTICIPATION;
		} else {
			notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.COURSE_PARTICIPATION_STATUS_UPDATED;
		}
		ServiceUtil.cancelNotifications(courseParticipationStatusEntry.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		notification.setCourseParticipationStatusEntry(courseParticipationStatusEntry);
		courseParticipationStatusEntry.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			if (!toLecturers || addLecturerRecipients(notification, courseParticipationStatusEntry.getCourse(), true).size() == 0) {
				createNotificationRecipient(notification, courseParticipationStatusEntry.getStaff());
			}
			return notification;
		} else {
			courseParticipationStatusEntry.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(Department department,
			Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.PROBANDS_DELETED;
		Notification notification = Notification.Factory.newInstance();
		notification.setDepartment(department);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			addDepartmentRecipients(notification, department, notificationType);
			return notification;
		} else {
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(DutyRosterTurn dutyRosterTurn, Staff staff, Boolean assigned, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType;
		if (assigned == null) {
			notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.DUTY_ROSTER_TURN_UPDATED;
		} else if (assigned) {
			notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.DUTY_ROSTER_TURN_ASSIGNED;
		} else {
			notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.DUTY_ROSTER_TURN_UNASSIGNED;
		}
		ServiceUtil.cancelNotifications(dutyRosterTurn.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		notification.setDutyRosterTurn(dutyRosterTurn);
		dutyRosterTurn.addNotifications(notification);
		notification.setStaff(staff);
		staff.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			createNotificationRecipient(notification, staff);
			if (Settings.getBoolean(SettingCodes.NOTIFY_SUPERVISOR_DUTY_ROSTER_TURN_UPDATES, Bundle.SETTINGS,
					DefaultSettings.NOTIFY_SUPERVISOR_DUTY_ROSTER_TURN_UPDATES) && !CoreUtil.getUserContext().equals(dutyRosterTurn.getModifiedUser())) {
				addSuperVisorsRecipients(notification, staff, true);
			}
			return notification;
		} else {
			dutyRosterTurn.removeNotifications(notification);
			staff.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(DutyRosterTurn dutyRosterTurn, StaffStatusEntry staffStatusEntry, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.STAFF_INACTIVE_DUTY_ROSTER_TURN;
		ServiceUtil.cancelNotifications(dutyRosterTurn.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		notification.setDutyRosterTurn(dutyRosterTurn);
		dutyRosterTurn.addNotifications(notification);
		notification.setStaffStatusEntry(staffStatusEntry);
		staffStatusEntry.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			if (addSuperVisorsRecipients(notification, dutyRosterTurn.getStaff(), true).size() == 0
					&& addTrialTeamMemberOtherRecipients(notification, dutyRosterTurn.getTrial(), true).size() == 0) {
				createNotificationRecipient(notification, dutyRosterTurn.getStaff());
			}
			return notification;
		} else {
			dutyRosterTurn.removeNotifications(notification);
			staffStatusEntry.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(DutyRosterTurn dutyRosterTurn, User modified, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.DUTY_ROSTER_TURN_DELETED;
		Notification notification = Notification.Factory.newInstance();
		User originalModifiedUser = dutyRosterTurn.getModifiedUser();
		dutyRosterTurn.setModifiedUser(modified);
		Staff staff = dutyRosterTurn.getStaff();
		notification.setDutyRosterTurn(dutyRosterTurn);
		dutyRosterTurn.addNotifications(notification);
		notification.setStaff(staff);
		staff.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification.setDutyRosterTurn(null);
			dutyRosterTurn.removeNotifications(notification);
			dutyRosterTurn.setModifiedUser(originalModifiedUser);
			notification = this.create(notification);
			createNotificationRecipient(notification, staff);
			if (Settings.getBoolean(SettingCodes.NOTIFY_SUPERVISOR_DUTY_ROSTER_TURN_UPDATES, Bundle.SETTINGS,
					DefaultSettings.NOTIFY_SUPERVISOR_DUTY_ROSTER_TURN_UPDATES) && !CoreUtil.getUserContext().equals(modified)) {
				addSuperVisorsRecipients(notification, staff, true);
			}
			return notification;
		} else {
			dutyRosterTurn.removeNotifications(notification);
			staff.removeNotifications(notification);
			dutyRosterTurn.setModifiedUser(originalModifiedUser);
			return null;
		}
	}


	@Override
	protected Notification handleAddNotification(ECRFFieldStatusEntry ecrfFieldStatusEntry, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.NEW_ECRF_FIELD_STATUS;
		ServiceUtil.cancelNotifications(ecrfFieldStatusEntry.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Department department = null;
		Trial trial = ecrfFieldStatusEntry.getListEntry().getTrial();
		HashSet<Staff> trialMembers = addTrialTeamMemberRecipients(notification, trial, false, false, false, false, false, true, false);
		if (trialMembers.size() == 0) {
			department = trial.getDepartment();
			notification.setDepartment(department);
		}
		notification.setEcrfFieldStatusEntry(ecrfFieldStatusEntry);
		ecrfFieldStatusEntry.addNotifications(notification);
		if (messageParameters == null) {
			messageParameters = CoreUtil.createEmptyTemplateModel();
		}
		messageParameters.put(NotificationMessageTemplateParameters.ECRF_INPUT_FIELD_VALUE_ADAPTER, ECRF_INPUT_FIELD_VALUE_ADAPTER);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			// if (trialMembers.size() == 0) {
			// addDepartmentRecipients(notification, department, notificationType);
			// } else {
			createNotificationRecipients(notification, trialMembers);
			// }
			return notification;
		} else {
			ecrfFieldStatusEntry.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(ECRFStatusEntry ecrfStatusEntry, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.ECRF_STATUS_UPDATED;
		ServiceUtil.cancelNotifications(ecrfStatusEntry.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Department department = null;
		Trial trial = ecrfStatusEntry.getListEntry().getTrial();
		HashSet<Staff> trialMembers = addTrialTeamMemberRecipients(notification, trial, false, false, ecrfStatusEntry.getStatus().isValidated(), ecrfStatusEntry.getStatus()
				.isReview(), ecrfStatusEntry.getStatus().isVerified(), false, false);
		if (trialMembers.size() == 0) {
			department = trial.getDepartment();
			notification.setDepartment(department);
		}
		notification.setEcrfStatusEntry(ecrfStatusEntry);
		ecrfStatusEntry.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			// if (trialMembers.size() == 0) {
			// addDepartmentRecipients(notification, department, notificationType);
			// } else {
			createNotificationRecipients(notification, trialMembers);
			// }
			return notification;
		} else {
			ecrfStatusEntry.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(
			InventoryBooking inventoryBooking, InventoryStatusEntry inventoryStatusEntry, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.INVENTORY_INACTIVE_BOOKING;
		ServiceUtil.cancelNotifications(inventoryBooking.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		notification.setInventoryBooking(inventoryBooking);
		inventoryBooking.addNotifications(notification);
		notification.setInventoryStatusEntry(inventoryStatusEntry);
		inventoryStatusEntry.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			createNotificationRecipient(notification, inventoryBooking.getOnBehalfOf());
			return notification;
		} else {
			inventoryBooking.removeNotifications(notification);
			inventoryStatusEntry.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(
			InventoryStatusEntry inventoryStatusEntry, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.INVENTORY_INACTIVE;
		ServiceUtil.cancelNotifications(inventoryStatusEntry.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Department department = inventoryStatusEntry.getInventory().getDepartment();
		notification.setDepartment(department);
		notification.setInventoryStatusEntry(inventoryStatusEntry);
		inventoryStatusEntry.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			addDepartmentRecipients(notification, department, notificationType);
			return notification;
		} else {
			inventoryStatusEntry.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(
			MaintenanceScheduleItem maintenanceScheduleItem, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.MAINTENANCE_REMINDER;
		ServiceUtil.cancelNotifications(maintenanceScheduleItem.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		notification.setMaintenanceScheduleItem(maintenanceScheduleItem);
		maintenanceScheduleItem.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			createNotificationRecipient(notification, maintenanceScheduleItem.getResponsiblePerson());
			return notification;
		} else {
			maintenanceScheduleItem.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(Password password, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.EXPIRING_PASSWORD;
		ServiceUtil.cancelNotifications(password.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		User user = password.getUser();
		Staff identity = user.getIdentity();
		Department department = null;
		if (identity == null) {
			department = user.getDepartment();
			notification.setDepartment(department);
			// } else {
			// createNotificationRecipient(notification, identity);
		}
		notification.setPassword(password);
		password.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			// if (identity == null) {
			// addDepartmentRecipients(notification, department, notificationType);
			// } else {
			if (identity != null) {
				createNotificationRecipient(notification, identity);
			}
			// }
			return notification;
		} else {
			password.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(Proband proband, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.EXPIRING_PROBAND_AUTO_DELETE;
		ServiceUtil.cancelNotifications(proband.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Department department = proband.getDepartment();
		notification.setDepartment(department);
		notification.setProband(proband);
		proband.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			addDepartmentRecipients(notification, department, notificationType);
			return notification;
		} else {
			proband.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(
			ProbandStatusEntry probandStatusEntry, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.PROBAND_INACTIVE;
		ServiceUtil.cancelNotifications(probandStatusEntry.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Department department = probandStatusEntry.getProband().getDepartment();
		notification.setDepartment(department);
		notification.setProbandStatusEntry(probandStatusEntry);
		probandStatusEntry.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			addDepartmentRecipients(notification, department, notificationType);
			return notification;
		} else {
			probandStatusEntry.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(
			StaffStatusEntry staffStatusEntry, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.STAFF_INACTIVE;
		ServiceUtil.cancelNotifications(staffStatusEntry.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		notification.setStaffStatusEntry(staffStatusEntry);
		staffStatusEntry.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			if (addSuperVisorsRecipients(notification, staffStatusEntry.getStaff(), true).size() == 0) {
				createNotificationRecipient(notification, staffStatusEntry.getStaff());
			}
			return notification;
		} else {
			staffStatusEntry.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(TimelineEvent timelineEvent, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.TIMELINE_EVENT_REMINDER;
		ServiceUtil.cancelNotifications(timelineEvent.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Trial trial = timelineEvent.getTrial();
		Department department = null;
		HashSet<Staff> trialMembers = addTrialTeamMemberRecipients(notification, trial, true, false, false, false, false, false, false);
		if (trialMembers.size() == 0) {
			department = trial.getDepartment();
			notification.setDepartment(department);
		}
		notification.setTimelineEvent(timelineEvent);
		timelineEvent.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			// if (trialMembers.size() == 0) {
			// addDepartmentRecipients(notification, department, notificationType);
			// } else {
			createNotificationRecipients(notification, trialMembers);
			// }
			return notification;
		} else {
			timelineEvent.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(Trial trial, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.TRIAL_STATUS_UPDATED;
		ServiceUtil.cancelNotifications(trial.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Department department = null;
		HashSet<Staff> trialMembers = addTrialTeamMemberOtherRecipients(notification, trial, false);
		if (trialMembers.size() == 0) {
			department = trial.getDepartment();
			notification.setDepartment(department);
		}
		notification.setTrial(trial);
		trial.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			// if (trialMembers.size() == 0) {
			// addDepartmentRecipients(notification, department, notificationType);
			// } else {
			createNotificationRecipients(notification, trialMembers);
			// }
			return notification;
		} else {
			trial.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(Trial trial, TrialTag trialTag, Date today, Map messageParameters) throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.TRIAL_TAG_MISSING;
		Collection<Notification> notifications = trial.getNotifications();
		ArrayList<Notification> trialTagNotifications = new ArrayList<Notification>(notifications.size());
		Iterator<Notification> notificationsIt = notifications.iterator();
		while (notificationsIt.hasNext()) {
			Notification notification = notificationsIt.next();
			if (trialTag.equals(notification.getTrialTag())) {
				trialTagNotifications.add(notification);
			}
		}
		ServiceUtil.cancelNotifications(trialTagNotifications, this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Department department = null;
		HashSet<Staff> trialMembers = addTrialTeamMemberOtherRecipients(notification, trial, false);
		if (trialMembers.size() == 0) {
			department = trial.getDepartment();
			notification.setDepartment(department);
		}
		notification.setTrial(trial);
		trial.addNotifications(notification);
		notification.setTrialTag(trialTag);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			// if (trialMembers.size() == 0) {
			// addDepartmentRecipients(notification, department, notificationType);
			// } else {
			createNotificationRecipients(notification, trialMembers);
			// }
			return notification;
		} else {
			trial.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(User user, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.USER_ACCOUNT;
		ServiceUtil.cancelNotifications(user.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Staff identity = user.getIdentity();
		notification.setUser(user);
		user.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			createNotificationRecipient(notification, identity);
			return notification;
		} else {
			user.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(VisitScheduleItem visitScheduleItem, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.VISIT_SCHEDULE_ITEM_REMINDER;
		ServiceUtil.cancelNotifications(visitScheduleItem.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Trial trial = visitScheduleItem.getTrial();
		Department department = null;
		HashSet<Staff> trialMembers = addTrialTeamMemberRecipients(notification, trial, true, false, false, false, false, false, false);
		if (trialMembers.size() == 0) {
			department = trial.getDepartment();
			notification.setDepartment(department);
		}
		notification.setVisitScheduleItem(visitScheduleItem);
		visitScheduleItem.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			// if (trialMembers.size() == 0) {
			// addDepartmentRecipients(notification, department, notificationType);
			// } else {
			createNotificationRecipients(notification, trialMembers);
			// }
			return notification;
		} else {
			visitScheduleItem.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(
			VisitScheduleItem visitScheduleItem, Proband proband, ProbandStatusEntry probandStatusEntry, Date today, Map messageParameters)
					throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.PROBAND_INACTIVE_VISIT_SCHEDULE_ITEM;
		ServiceUtil.cancelNotifications(visitScheduleItem.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		Trial trial = visitScheduleItem.getTrial();
		Department department = null;
		HashSet<Staff> trialMembers = addTrialTeamMemberOtherRecipients(notification, trial, false);
		if (trialMembers.size() == 0) {
			department = trial.getDepartment();
			notification.setDepartment(department);
		}
		notification.setVisitScheduleItem(visitScheduleItem);
		visitScheduleItem.addNotifications(notification);
		notification.setProband(proband);
		proband.addNotifications(notification);
		notification.setProbandStatusEntry(probandStatusEntry);
		probandStatusEntry.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			// if (trialMembers.size() == 0) {
			// addDepartmentRecipients(notification, department, notificationType);
			// } else {
			createNotificationRecipients(notification, trialMembers);
			// }
			return notification;
		} else {
			visitScheduleItem.removeNotifications(notification);
			proband.removeNotifications(notification);
			probandStatusEntry.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Notification handleAddNotification(VisitScheduleItem visitScheduleItem, Staff staff, Date today, Map messageParameters)
			throws Exception {
		org.phoenixctms.ctsms.enumeration.NotificationType notificationType = org.phoenixctms.ctsms.enumeration.NotificationType.STAFF_INACTIVE_VISIT_SCHEDULE_ITEM;
		ServiceUtil.cancelNotifications(visitScheduleItem.getNotifications(), this, notificationType);
		Notification notification = Notification.Factory.newInstance();
		notification.setVisitScheduleItem(visitScheduleItem);
		visitScheduleItem.addNotifications(notification);
		notification.setStaff(staff);
		staff.addNotifications(notification);
		if (setRemainingFields(notification, today, notificationType, messageParameters)) {
			notification = this.create(notification);
			if (addSuperVisorsRecipients(notification, staff, true).size() == 0
					&& addTrialTeamMemberOtherRecipients(notification, visitScheduleItem.getTrial(), true).size() == 0) {
				createNotificationRecipient(notification, staff);
			}
			return notification;
		} else {
			visitScheduleItem.removeNotifications(notification);
			staff.removeNotifications(notification);
			return null;
		}
	}

	@Override
	protected Collection<Notification> handleFindByRecipient(Long recipientId,
			Long departmentId, Boolean obsolete, Boolean send, Boolean show, Boolean sent, Boolean dropped, PSFVO psf)
					throws Exception {
		org.hibernate.Criteria notificationCriteria = createNotificationCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Notification.class, notificationCriteria);
		if (recipientId != null) {
			criteriaMap.createCriteria("recipients").add(Restrictions.eq("staff.id", recipientId.longValue()));
		}
		if (departmentId != null) { // again either recipient or department
			notificationCriteria.add(Restrictions.eq("department.id", departmentId.longValue()));
		}
		if (obsolete != null) {
			notificationCriteria.add(Restrictions.eq("obsolete", obsolete.booleanValue()));
		}
		if (send != null) {
			criteriaMap.createCriteria("type").add(Restrictions.eq("send", send.booleanValue()));
		}
		if (show != null) {
			criteriaMap.createCriteria("type").add(Restrictions.eq("show", show.booleanValue()));
		}
		if (sent != null) {
			criteriaMap.createCriteria("recipients").add(Restrictions.eq("sent", sent.booleanValue()));
		}
		if (dropped != null) {
			criteriaMap.createCriteria("recipients").add(Restrictions.eq("dropped", dropped.booleanValue()));
		}
		// if ((psf != null && (psf.getFilters().size() > 0 || (!CommonUtil.isEmptyString(psf.getSortField()) && !"id".equals(psf.getSortField()))))
		// || (sent != null || dropped != null) && recipientId == null) {
		if ((psf != null) || (sent != null || dropped != null) && recipientId == null) {
			return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this);
		} else {
			CriteriaUtil.applyPSFVO(criteriaMap, psf); // disticnt because if sent or dropped is passed
			return notificationCriteria.list();
		}
	}

	@Override
	protected long handleGetCountByDay(Date currentDate, Long recipientId,
			Long departmentId, Boolean obsolete, Boolean send, Boolean show, Boolean sent, Boolean dropped)
					throws Exception {
		org.hibernate.Criteria notificationCriteria = createNotificationCriteria();
		Date today;
		if (currentDate == null) {
			today = DateCalc.getStartOfDay(new Date());
		} else {
			today = DateCalc.getStartOfDay(currentDate);
		}
		notificationCriteria.add(Restrictions.eq("date", today));
		if (recipientId != null || sent != null || dropped != null) { // either recipeint
			Criteria notificationRecipientCriteria = notificationCriteria.createCriteria("recipients", CriteriaSpecification.INNER_JOIN);
			if (recipientId != null) {
				notificationRecipientCriteria.add(Restrictions.eq("staff.id", recipientId.longValue()));
			}
			if (sent != null) {
				notificationRecipientCriteria.add(Restrictions.eq("sent", sent.booleanValue()));
			}
			if (dropped != null) {
				notificationRecipientCriteria.add(Restrictions.eq("dropped", dropped.booleanValue()));
			}
		}
		if (departmentId != null) { // or department, not both intended
			notificationCriteria.add(Restrictions.eq("department.id", departmentId.longValue()));
		}
		if (obsolete != null) {
			notificationCriteria.add(Restrictions.eq("obsolete", obsolete.booleanValue()));
		}
		if (send != null || show != null) {
			Criteria notificationTypeCriteria = notificationCriteria.createCriteria("type", CriteriaSpecification.INNER_JOIN);
			if (send != null) {
				notificationTypeCriteria.add(Restrictions.eq("send", send.booleanValue()));
			}
			if (show != null) {
				notificationTypeCriteria.add(Restrictions.eq("show", show.booleanValue()));
			}
		}
		return (Long) notificationCriteria.setProjection(((sent != null || dropped != null) && recipientId == null) ? Projections.countDistinct("id") : Projections.rowCount())
				.uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Notification loadNotificationFromNotificationVO(NotificationVO notificationVO)
	{
		// TODO implement loadNotificationFromNotificationVO
		throw new UnsupportedOperationException("org.phoenixctms.ctsms.domain.loadNotificationFromNotificationVO(NotificationVO) not yet implemented.");
		// Notification notification = null;
		// Long id = notificationVO.getId();
		// if (id != null) {
		// notification = this.load(id);
		// }
		// if (notification == null)
		// {
		// notification = Notification.Factory.newInstance();
		// }
		// return notification;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Notification notificationVOToEntity(NotificationVO notificationVO)
	{
		Notification entity = this.loadNotificationFromNotificationVO(notificationVO);
		this.notificationVOToEntity(notificationVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void notificationVOToEntity(
			NotificationVO source,
			Notification target,
			boolean copyIfNull)
	{
		super.notificationVOToEntity(source, target, copyIfNull);
	}

	private boolean setRemainingFields(Notification newNotification, Date today, org.phoenixctms.ctsms.enumeration.NotificationType type, Map messageParameters) throws Exception {
		newNotification.setType(this.getNotificationTypeDao().searchUniqueType(type));
		newNotification.setDate(DateCalc.getStartOfDay(today));
		Map model = createTemplateModel(newNotification, today, messageParameters);
		newNotification.setSubject(getSubject(newNotification, model));
		newNotification.setMessage(getMessage(newNotification, model));
		return !CommonUtil.isEmptyString(newNotification.getSubject()) && !CommonUtil.isEmptyString(newNotification.getMessage());
	}

	public void setVelocityEngine(VelocityEngine velocityEngine) {
		this.velocityEngine = velocityEngine;
	}

	private ArrayList<NotificationRecipientVO> toNotificationRecipientVOCollection(Collection<NotificationRecipient> recipients) {
		// related to http://forum.andromda.org/viewtopic.php?t=4288
		NotificationRecipientDao notificationRecipientDao = this.getNotificationRecipientDao();
		ArrayList<NotificationRecipientVO> result = new ArrayList<NotificationRecipientVO>(recipients.size());
		Iterator<NotificationRecipient> it = recipients.iterator();
		while (it.hasNext()) {
			result.add(notificationRecipientDao.toNotificationRecipientVO(it.next()));
		}
		Collections.sort(result, RECIPIENT_VO_ID_COMPARATOR);
		return result;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public NotificationVO toNotificationVO(final Notification entity)
	{
		return super.toNotificationVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toNotificationVO(
			Notification source,
			NotificationVO target)
	{
		super.toNotificationVO(source, target);
		MaintenanceScheduleItem maintenanceScheduleItem = source.getMaintenanceScheduleItem();
		InventoryStatusEntry inventoryStatusEntry = source.getInventoryStatusEntry();
		InventoryBooking inventoryBooking = source.getInventoryBooking();
		StaffStatusEntry staffStatusEntry = source.getStaffStatusEntry();
		DutyRosterTurn dutyRosterTurn = source.getDutyRosterTurn();
		ProbandStatusEntry probandStatusEntry = source.getProbandStatusEntry();
		VisitScheduleItem visitScheduleItem = source.getVisitScheduleItem();
		Course course = source.getCourse();
		CourseParticipationStatusEntry courseParticipationStatusEntry = source.getCourseParticipationStatusEntry();
		TimelineEvent timelineEvent = source.getTimelineEvent();
		Proband proband = source.getProband();
		Password password = source.getPassword();
		Trial trial = source.getTrial();
		ECRFStatusEntry ecrfStatusEntry = source.getEcrfStatusEntry();
		ECRFFieldStatusEntry ecrfFieldStatusEntry = source.getEcrfFieldStatusEntry();
		Staff staff = source.getStaff();
		User user = source.getUser();
		NotificationType type = source.getType();
		Department department = source.getDepartment();
		TrialTag trialTag = source.getTrialTag();
		if (maintenanceScheduleItem != null) {
			target.setMaintenanceScheduleItem(this.getMaintenanceScheduleItemDao().toMaintenanceScheduleItemOutVO(maintenanceScheduleItem));
		}
		if (inventoryStatusEntry != null) {
			target.setInventoryStatusEntry(this.getInventoryStatusEntryDao().toInventoryStatusEntryOutVO(inventoryStatusEntry));
		}
		if (inventoryBooking != null) {
			target.setInventoryBooking(this.getInventoryBookingDao().toInventoryBookingOutVO(inventoryBooking));
		}
		if (staffStatusEntry != null) {
			target.setStaffStatusEntry(this.getStaffStatusEntryDao().toStaffStatusEntryOutVO(staffStatusEntry));
		}
		if (dutyRosterTurn != null) {
			target.setDutyRosterTurn(this.getDutyRosterTurnDao().toDutyRosterTurnOutVO(dutyRosterTurn));
		}
		if (probandStatusEntry != null) {
			target.setProbandStatusEntry(this.getProbandStatusEntryDao().toProbandStatusEntryOutVO(probandStatusEntry));
		}
		if (visitScheduleItem != null) {
			target.setVisitScheduleItem(this.getVisitScheduleItemDao().toVisitScheduleItemOutVO(visitScheduleItem));
		}
		if (course != null) {
			target.setCourse(this.getCourseDao().toCourseOutVO(course));
		}
		if (courseParticipationStatusEntry != null) {
			target.setCourseParticipationStatusEntry(this.getCourseParticipationStatusEntryDao().toCourseParticipationStatusEntryOutVO(courseParticipationStatusEntry));
		}
		if (timelineEvent != null) {
			target.setTimelineEvent(this.getTimelineEventDao().toTimelineEventOutVO(timelineEvent));
		}
		if (proband != null) {
			target.setProband(this.getProbandDao().toProbandOutVO(proband));
		}
		if (password != null) {
			target.setPassword(this.getPasswordDao().toPasswordOutVO(password));
		}
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		if (ecrfStatusEntry != null) {
			target.setEcrfStatusEntry(this.getECRFStatusEntryDao().toECRFStatusEntryVO(ecrfStatusEntry));
		}
		if (ecrfFieldStatusEntry != null) {
			target.setEcrfFieldStatusEntry(this.getECRFFieldStatusEntryDao().toECRFFieldStatusEntryOutVO(ecrfFieldStatusEntry));
		}
		if (staff != null) {
			target.setStaff(this.getStaffDao().toStaffOutVO(staff));
		}
		if (user != null) {
			target.setUser(this.getUserDao().toUserOutVO(user));
		}
		if (trialTag != null) {
			target.setTrialTag(this.getTrialTagDao().toTrialTagVO(trialTag));
		}
		if (type != null) {
			target.setType(this.getNotificationTypeDao().toNotificationTypeVO(type));
		}
		// target.setRecipients(toNotificationRecipientVOCollection(source.getRecipients()));
		if (department != null) {
			target.setDepartment(this.getDepartmentDao().toDepartmentVO(department));
		} else {
			target.setRecipients(toNotificationRecipientVOCollection(source.getRecipients()));
		}
		User recipientUser = CoreUtil.getUser();
		Staff identity = null;
		boolean sent = false;
		boolean dropped = false;
		if (recipientUser != null && (identity = recipientUser.getIdentity()) != null) {
			Iterator<NotificationRecipient> it = source.getRecipients().iterator();
			while (it.hasNext()) {
				NotificationRecipient recipient = it.next();
				if (identity.equals(recipient.getStaff())) { // recipient.equals(identity)) {
					sent = recipient.isSent();
					dropped = recipient.isDropped();
					break;
				}
			}
		}
		target.setSent(sent);
		target.setDropped(dropped);
	}
}