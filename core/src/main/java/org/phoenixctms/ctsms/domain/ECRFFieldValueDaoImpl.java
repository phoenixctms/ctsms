// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.

/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;

import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.phoenixctms.ctsms.compare.VOIDComparator;
import org.phoenixctms.ctsms.enumeration.ECRFFieldStatusQueue;
import org.phoenixctms.ctsms.enumeration.InputFieldType;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.CoreUtil;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.util.ServiceUtil;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.ECRFFieldOutVO;
import org.phoenixctms.ctsms.vo.ECRFFieldValueInVO;
import org.phoenixctms.ctsms.vo.ECRFFieldValueJsonVO;
import org.phoenixctms.ctsms.vo.ECRFFieldValueOutVO;
import org.phoenixctms.ctsms.vo.InputFieldSelectionSetValueJsonVO;
import org.phoenixctms.ctsms.vo.InputFieldSelectionSetValueOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandListEntryOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;


public class ECRFFieldValueDaoImpl
extends ECRFFieldValueDaoBase
{

	private final static VOIDComparator SELECTION_SET_VALUE_OUT_VO_ID_COMPARATOR = new VOIDComparator<InputFieldSelectionSetValueOutVO>(false);
	private final static VOIDComparator SELECTION_SET_VALUE_JSON_VO_ID_COMPARATOR = new VOIDComparator<InputFieldSelectionSetValueJsonVO>(false);

	private static void applyEcrfFieldValueMaxIdSubCriteria(org.hibernate.Criteria ecrfFieldValueCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			org.hibernate.Criteria probandListEntryCriteria,Long probandListEntryId, Long ecrfFieldId) {
		DetachedCriteria subQuery = createEcrfFieldValueDetachedCriteriaMaxId(ecrfFieldValueCriteria, ecrfFieldCriteria, probandListEntryCriteria, probandListEntryId, ecrfFieldId);
		subQuery.add(Restrictions.or(Restrictions.isNull("index"),
				Restrictions.eqProperty("index", ecrfFieldValueCriteria.getAlias() + ".index")));
		ecrfFieldValueCriteria.add(Subqueries.propertyEq("id", subQuery));
	}


	private static void applyEcrfFieldValueMaxIdSubCriteria(org.hibernate.Criteria ecrfFieldValueCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			org.hibernate.Criteria probandListEntryCriteria,Long probandListEntryId, Long ecrfFieldId, Long index) {
		DetachedCriteria subQuery = createEcrfFieldValueDetachedCriteriaMaxId(ecrfFieldValueCriteria, ecrfFieldCriteria, probandListEntryCriteria, probandListEntryId, ecrfFieldId);
		if (index != null) {
			subQuery.add(Restrictions.eq("index", index.longValue()));
		} else {
			subQuery.add(Restrictions.isNull("index"));
		}
		ecrfFieldValueCriteria.add(Subqueries.propertyEq("id", subQuery));
	}



	private static void applySortOrders(org.hibernate.Criteria listEntryCriteria, org.hibernate.Criteria ecrfFieldCriteria, org.hibernate.Criteria ecrfFieldValueCriteria) {
		if (listEntryCriteria != null) {
			listEntryCriteria.addOrder(Order.asc("trial"));
			listEntryCriteria.addOrder(Order.asc("position"));
		}
		if (ecrfFieldCriteria != null) {
			ecrfFieldCriteria.addOrder(Order.asc("trial"));
			ecrfFieldCriteria.addOrder(Order.asc("ecrf"));
			ecrfFieldCriteria.addOrder(Order.asc("section"));
		}
		if (ecrfFieldValueCriteria != null) {
			ecrfFieldValueCriteria.addOrder(Order.asc("index"));
		}
		if (ecrfFieldCriteria != null) {
			ecrfFieldCriteria.addOrder(Order.asc("position"));
		}
		if (ecrfFieldValueCriteria != null) {
			ecrfFieldValueCriteria.addOrder(Order.asc("id"));
		}
	}

	private static DetachedCriteria createEcrfFieldValueDetachedCriteria(org.hibernate.Criteria ecrfFieldValueCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			org.hibernate.Criteria probandListEntryCriteria,
			Long probandListEntryId, Long ecrfFieldId) {
		DetachedCriteria subQuery = DetachedCriteria.forClass(ECRFFieldValueImpl.class, "ecrfFieldValue1"); // IMPL!!!!
		// subQuery.setProjection(Projections.max("id"));
		if (probandListEntryId == null) {
			if (probandListEntryCriteria == null) {
				probandListEntryCriteria = ecrfFieldValueCriteria.createCriteria("listEntry", "probandListEntry0");
			}
			subQuery.add(Restrictions.eqProperty("listEntry.id", probandListEntryCriteria.getAlias() + ".id"));
		} else {
			subQuery.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		}
		if (ecrfFieldId == null) {
			if (ecrfFieldCriteria == null) {
				ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField", "ecrfField0");
			}
			subQuery.add(Restrictions.eqProperty("ecrfField.id", ecrfFieldCriteria.getAlias() + ".id"));
		} else {
			subQuery.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		}
		return subQuery;
	}

	private static DetachedCriteria createEcrfFieldValueDetachedCriteriaMaxId(org.hibernate.Criteria ecrfFieldValueCriteria, org.hibernate.Criteria ecrfFieldCriteria,
			org.hibernate.Criteria probandListEntryCriteria,
			Long probandListEntryId, Long ecrfFieldId) {
		DetachedCriteria subQuery = createEcrfFieldValueDetachedCriteria(ecrfFieldValueCriteria, ecrfFieldCriteria, probandListEntryCriteria, probandListEntryId, ecrfFieldId);
		subQuery.setProjection(Projections.max("id"));
		return subQuery;
	}

	private org.hibernate.Criteria[] createEcrfFieldCriteria(Long probandListEntryId, Long ecrfId) {
		org.hibernate.Criteria ecrfFieldCriteria = this.getSession().createCriteria(ECRFField.class, ServiceUtil.ECRF_FIELD_VALUE_DAO_ECRF_FIELD_ALIAS);
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));

		org.hibernate.Criteria ecrfFieldValueCriteria = ecrfFieldCriteria.createCriteria("fieldValues", ServiceUtil.ECRF_FIELD_VALUE_DAO_ECRF_FIELD_VALUE_ALIAS,
				CriteriaSpecification.LEFT_JOIN,
				Restrictions.eq(ServiceUtil.ECRF_FIELD_VALUE_DAO_ECRF_FIELD_VALUE_ALIAS + ".listEntry.id", probandListEntryId.longValue()));
		// criteriaMap.createCriteria("ecrfField", CriteriaSpecification.LEFT_JOIN);
		// ecrfFieldValueCriteria.add(Restrictions.or(Restrictions.eq("listEntry.id", probandListEntryId.longValue()),
		// Restrictions.isNull("listEntry")));
		// correlated - slow:
		DetachedCriteria subQuery = createEcrfFieldValueDetachedCriteriaMaxId(ecrfFieldValueCriteria, ecrfFieldCriteria, null, probandListEntryId, null);
		// DetachedCriteria subQuery = DetachedCriteria.forClass(ECRFFieldValueImpl.class, "ecrfFieldValue1"); // IMPL!!!!
		// subQuery.setProjection(Projections.max("id"));
		// subQuery.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		// subQuery.add(Restrictions.eqProperty("ecrfField.id", "ecrfField0.id"));
		subQuery.add(Restrictions.or(Restrictions.isNull("index"),
				Restrictions.eqProperty("index", ServiceUtil.ECRF_FIELD_VALUE_DAO_ECRF_FIELD_VALUE_ALIAS + ".index")));
		ecrfFieldValueCriteria.add(Restrictions.or(
				Restrictions.isNull("listEntry"),
				Restrictions.and(
						Restrictions.eq("listEntry.id", probandListEntryId.longValue()),
						Subqueries.propertyIn("id", subQuery)
						)
				));

		// System.out.println(CriteriaUtil.criteriaToSql(ecrfFieldCriteria));
		return new org.hibernate.Criteria[] { ecrfFieldCriteria, ecrfFieldValueCriteria };
	}



	private org.hibernate.Criteria createEcrfFieldValueCriteria(String alias) {
		org.hibernate.Criteria ecrfFieldValueCriteria;
		if (alias != null && alias.length() > 0) {
			ecrfFieldValueCriteria = this.getSession().createCriteria(ECRFFieldValue.class, alias);
		} else {
			ecrfFieldValueCriteria = this.getSession().createCriteria(ECRFFieldValue.class);
		}
		return ecrfFieldValueCriteria;
	}


	public ECRFFieldValue eCRFFieldValueInVOToEntity(ECRFFieldValueInVO eCRFFieldValueInVO)
	{
		ECRFFieldValue entity = this.loadECRFFieldValueFromECRFFieldValueInVO(eCRFFieldValueInVO);
		this.eCRFFieldValueInVOToEntity(eCRFFieldValueInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	public void eCRFFieldValueInVOToEntity(
			ECRFFieldValueInVO source,
			ECRFFieldValue target,
			boolean copyIfNull)
	{
		super.eCRFFieldValueInVOToEntity(source, target, copyIfNull);
		Long listEntryId = source.getListEntryId();
		Long ecrfFieldId = source.getEcrfFieldId();
		if (listEntryId != null) {
			ProbandListEntry listEntry = this.getProbandListEntryDao().load(listEntryId);
			target.setListEntry(listEntry);
			listEntry.addEcrfValues(target);
		} else if (copyIfNull) {
			ProbandListEntry listEntry = target.getListEntry();
			target.setListEntry(null);
			if (listEntry != null) {
				listEntry.removeEcrfValues(target);
			}
		}

		if (ecrfFieldId != null) {
			ECRFField ecrfField = this.getECRFFieldDao().load(ecrfFieldId);
			target.setEcrfField(ecrfField);
			ecrfField.addFieldValues(target);
		} else if (copyIfNull) {
			ECRFField ecrfField = target.getEcrfField();
			target.setEcrfField(null);
			if (ecrfField != null) {
				ecrfField.removeFieldValues(target);
			}
		}
		InputFieldValue value = target.getValue();
		if (value == null) {
			value = InputFieldValue.Factory.newInstance();
			target.setValue(value);
		}
		if (copyIfNull || source.getTextValue() != null) {
			value.setStringValue(source.getTextValue());
			value.setTruncatedStringValue(CommonUtil.truncateStringValue(source.getTextValue(), Settings.getIntNullable(SettingCodes.INPUT_FIELD_TRUNCATED_STRING_VALUE_MAX_LENGTH,
					Bundle.SETTINGS, DefaultSettings.INPUT_FIELD_TRUNCATED_STRING_VALUE_MAX_LENGTH)));
		}
		value.setBooleanValue(source.getBooleanValue());
		// if (copyIfNull || source.getBooleanValue() != null) {
		// value.setBooleanValue(booleanValueIn)
		// }
		if (copyIfNull || source.getLongValue() != null) {
			value.setLongValue(source.getLongValue());
		}
		if (copyIfNull || source.getFloatValue() != null) {
			value.setFloatValue(source.getFloatValue());
		}
		if (copyIfNull || source.getDateValue() != null)
		{
			value.setDateValue(CoreUtil.forceDate(source.getDateValue()));
		}
		if (copyIfNull || source.getTimestampValue() != null)
		{
			value.setTimestampValue((source.getTimestampValue() == null ? null : new Timestamp(source.getTimestampValue().getTime())));
		}
		if (copyIfNull || source.getTimeValue() != null)
		{
			value.setTimeValue(CoreUtil.forceDate(source.getTimeValue()));
		}
		if (copyIfNull || source.getInkValues() != null) {
			value.setInkValue(source.getInkValues());
		}
		Collection selectionValueIds;
		if ((selectionValueIds = source.getSelectionValueIds()).size() > 0 || copyIfNull)
		{
			value.setSelectionValues(toInputFieldSelectionSetValueSet(selectionValueIds));
		}
	}

	public ECRFFieldValue eCRFFieldValueJsonVOToEntity(ECRFFieldValueJsonVO eCRFFieldValueJsonVO)
	{
		ECRFFieldValue entity = this.loadECRFFieldValueFromECRFFieldValueJsonVO(eCRFFieldValueJsonVO);
		this.eCRFFieldValueJsonVOToEntity(eCRFFieldValueJsonVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	public void eCRFFieldValueJsonVOToEntity(
			ECRFFieldValueJsonVO source,
			ECRFFieldValue target,
			boolean copyIfNull)
	{
		// TODO verify behavior of eCRFFieldValueJsonVOToEntity
		super.eCRFFieldValueJsonVOToEntity(source, target, copyIfNull);
	}

	public ECRFFieldValue eCRFFieldValueOutVOToEntity(ECRFFieldValueOutVO eCRFFieldValueOutVO)
	{
		ECRFFieldValue entity = this.loadECRFFieldValueFromECRFFieldValueOutVO(eCRFFieldValueOutVO);
		this.eCRFFieldValueOutVOToEntity(eCRFFieldValueOutVO, entity, true);
		return entity;
	}

	public void eCRFFieldValueOutVOToEntity(
			ECRFFieldValueOutVO source,
			ECRFFieldValue target,
			boolean copyIfNull)
	{
		super.eCRFFieldValueOutVOToEntity(source, target, copyIfNull);
		ProbandListEntryOutVO listEntryVO = source.getListEntry();
		ECRFFieldOutVO ecrfFieldVO = source.getEcrfField();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (listEntryVO != null) {
			ProbandListEntry listEntry = this.getProbandListEntryDao().probandListEntryOutVOToEntity(listEntryVO);
			target.setListEntry(listEntry);
			listEntry.addEcrfValues(target);
		} else if (copyIfNull) {
			ProbandListEntry listEntry = target.getListEntry();
			target.setListEntry(null);
			if (listEntry != null) {
				listEntry.removeEcrfValues(target);
			}
		}
		if (ecrfFieldVO != null) {
			ECRFField ecrfField = this.getECRFFieldDao().eCRFFieldOutVOToEntity(ecrfFieldVO);
			target.setEcrfField(ecrfField);
			ecrfField.addFieldValues(target);
		} else if (copyIfNull) {
			ECRFField ecrfField = target.getEcrfField();
			target.setEcrfField(ecrfField);
			if (ecrfField != null) {
				ecrfField.removeFieldValues(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
		InputFieldValue value = target.getValue();
		if (value == null) {
			value = InputFieldValue.Factory.newInstance();
			target.setValue(value);
		}
		if (copyIfNull || source.getTextValue() != null) {
			value.setStringValue(source.getTextValue());
			value.setTruncatedStringValue(CommonUtil.truncateStringValue(source.getTextValue(), Settings.getIntNullable(SettingCodes.INPUT_FIELD_TRUNCATED_STRING_VALUE_MAX_LENGTH,
					Bundle.SETTINGS, DefaultSettings.INPUT_FIELD_TRUNCATED_STRING_VALUE_MAX_LENGTH)));
		}
		value.setBooleanValue(source.getBooleanValue());
		// if (copyIfNull || source.getBooleanValue() != null) {
		// value.setBooleanValue(booleanValueIn)
		// }
		if (copyIfNull || source.getLongValue() != null) {
			value.setLongValue(source.getLongValue());
		}
		if (copyIfNull || source.getFloatValue() != null) {
			value.setFloatValue(source.getFloatValue());
		}
		if (copyIfNull || source.getDateValue() != null) {
			value.setDateValue(CoreUtil.forceDate(source.getDateValue()));
		}
		if (copyIfNull || source.getTimestampValue() != null) {
			value.setTimestampValue((source.getTimestampValue() == null ? null : new Timestamp(source.getTimestampValue().getTime())));
		}
		if (copyIfNull || source.getTimeValue() != null) {
			value.setTimeValue(CoreUtil.forceDate(source.getTimeValue()));
		}
		if (copyIfNull || source.getInkValues() != null) {
			value.setInkValue(source.getInkValues());
		}
		Collection selectionValues;
		if ((selectionValues = source.getSelectionValues()).size() > 0 || copyIfNull) {
			this.getInputFieldSelectionSetValueDao().inputFieldSelectionSetValueOutVOToEntityCollection(selectionValues);
			value.setSelectionValues((Collection<InputFieldSelectionSetValue>) selectionValues); // hashset-exception!!!
		}
	}

	@Override
	protected Collection<ECRFFieldValue> handleFindByListEntryEcrf(Long probandListEntryId, Long ecrfId, boolean sort, PSFVO psf) throws Exception {

		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria(null);
		ecrfFieldValueCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField");
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldValue.class, ecrfFieldValueCriteria);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(null, ecrfFieldCriteria, ecrfFieldValueCriteria);
		}
		return ecrfFieldValueCriteria.list();

	}

	@Override
	protected Collection<ECRFFieldValue> handleFindByListEntryEcrfFieldIndex(Long probandListEntryId, Long ecrfFieldId, Long index, boolean auditTrail, boolean sort, PSFVO psf)
			throws Exception {

		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria("ecrfFieldValue0");
		ecrfFieldValueCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		ecrfFieldValueCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		if (index != null) {
			ecrfFieldValueCriteria.add(Restrictions.eq("index", index.longValue()));
		} else {
			ecrfFieldValueCriteria.add(Restrictions.isNull("index"));
		}
		if (!auditTrail) {
			// uncorrelated - fast:
			// value with max id only:
			applyEcrfFieldValueMaxIdSubCriteria(ecrfFieldValueCriteria, null, null, probandListEntryId, ecrfFieldId, index);
		}
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldValue.class, ecrfFieldValueCriteria);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) { // after applyPSFVO
			ecrfFieldValueCriteria.addOrder(Order.asc("index"));
			ecrfFieldValueCriteria.addOrder(Order.desc("id"));
		}
		return ecrfFieldValueCriteria.list();

	}

	@Override
	protected Collection<Map> handleFindByListEntryEcrfJs(Long probandListEntryId, Long ecrfId, boolean sort, Boolean js, PSFVO psf) throws Exception {
		org.hibernate.Criteria[] criterias = createEcrfFieldCriteria(probandListEntryId, ecrfId);
		org.hibernate.Criteria ecrfFieldCriteria = criterias[0];
		org.hibernate.Criteria ecrfFieldValueCriteria = criterias[1];
		//		if (active != null) {
		//			ecrfFieldCriteria.add(Restrictions.eq("active", active.booleanValue()));
		//		}
		if (js != null) {
			if (js) {
				ecrfFieldCriteria.add(Restrictions.and(Restrictions.ne("jsVariableName", ""), Restrictions.isNotNull("jsVariableName")));
			} else {
				ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("jsVariableName", ""), Restrictions.isNull("jsVariableName")));
			}
		}
		if (psf != null) {
			SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFField.class, ecrfFieldCriteria);
			// clear sort and filters?
			CriteriaUtil.applyPSFVO(criteriaMap, psf);
		}
		if (sort) {
			applySortOrders(null, ecrfFieldCriteria, ecrfFieldValueCriteria);
		}
		ecrfFieldCriteria.setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP);
		return ecrfFieldCriteria.list();
	}

	@Override
	protected Collection<ECRFFieldValue> handleFindByListEntryEcrfSection(Long probandListEntryId, Long ecrfId, String section, boolean sort, PSFVO psf) throws Exception {

		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria(null);
		ecrfFieldValueCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField");
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldValue.class, ecrfFieldValueCriteria);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		if (sort) {
			applySortOrders(null, ecrfFieldCriteria, ecrfFieldValueCriteria);
		}
		return ecrfFieldValueCriteria.list();

	}

	@Override
	protected Collection<Map> handleFindByListEntryEcrfSectionIndexJs(Long probandListEntryId, Long ecrfId, String section, Long index, boolean sort, Boolean js, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria[] criterias = createEcrfFieldCriteria(probandListEntryId, ecrfId);
		org.hibernate.Criteria ecrfFieldCriteria = criterias[0];
		org.hibernate.Criteria ecrfFieldValueCriteria = criterias[1];
		// if (active != null) {
		// ecrfFieldCriteria.add(Restrictions.eq("active", active.booleanValue()));
		// }
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		if (index != null) {
			ecrfFieldValueCriteria.add(Restrictions.eq("index", index.longValue()));
		}
		if (js != null) {
			if (js) {
				ecrfFieldCriteria.add(Restrictions.and(Restrictions.ne("jsVariableName", ""), Restrictions.isNotNull("jsVariableName")));
			} else {
				ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("jsVariableName", ""), Restrictions.isNull("jsVariableName")));
			}
		}
		if (psf != null) {
			SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFField.class, ecrfFieldCriteria);
			// clear sort and filters?
			CriteriaUtil.applyPSFVO(criteriaMap, psf);
		}
		if (sort) {
			applySortOrders(null, ecrfFieldCriteria, ecrfFieldValueCriteria);
		}
		ecrfFieldCriteria.setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP);
		return ecrfFieldCriteria.list();
	}

	@Override
	protected ECRFFieldValue handleGetByListEntryEcrfFieldIndex(Long probandListEntryId, Long ecrfFieldId, Long index)
			throws Exception {

		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria("ecrfFieldValue0");
		ecrfFieldValueCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		ecrfFieldValueCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		if (index != null) {
			ecrfFieldValueCriteria.add(Restrictions.eq("index", index.longValue()));
		} else {
			ecrfFieldValueCriteria.add(Restrictions.isNull("index"));
		}

		applyEcrfFieldValueMaxIdSubCriteria(ecrfFieldValueCriteria, null, null, probandListEntryId, ecrfFieldId, index);
		ecrfFieldValueCriteria.setMaxResults(1);
		return (ECRFFieldValue) ecrfFieldValueCriteria.uniqueResult();
		// PSFVO p = new PSFVO();
		// p.setPageSize(1);
		// p.setUpdateRowCount(false);
		// Iterator<ECRFFieldValue> it = this.handleFindByListEntryEcrfFieldIndex(probandListEntryId, ecrfFieldId, index, false, false, p).iterator();
		// if (it.hasNext()) {
		// return it.next();
		// }
		// return null;
	}

	@Override
	protected long handleGetCount(Long ecrfFieldId, boolean excludeAuditTrail) throws Exception {
		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria("ecrfFieldValue0");
		if (ecrfFieldId != null) {
			ecrfFieldValueCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		}
		if (excludeAuditTrail) {
			applyEcrfFieldValueMaxIdSubCriteria(ecrfFieldValueCriteria, null, null, null, ecrfFieldId);
		}
		return (Long) ecrfFieldValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long probandListEntryId, Long ecrfId) throws Exception {
		org.hibernate.Criteria[] criterias = createEcrfFieldCriteria(probandListEntryId, ecrfId);
		org.hibernate.Criteria ecrfFieldCriteria = criterias[0];
		// org.hibernate.Criteria ecrfFieldValueCriteria = criterias[1];
		return (Long) ecrfFieldCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long probandListEntryId, Long ecrfId, boolean excludeAuditTrail, Boolean series, Boolean optional) throws Exception {
		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria("ecrfFieldValue0");
		// if (probandListEntryId != null) {
		ecrfFieldValueCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		// }
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField", "ecrfField0"); // , CriteriaSpecification.INNER_JOIN);
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		// if (ecrfId != null) {
		// ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField", "ecrfField0", CriteriaSpecification.INNER_JOIN);
		// ecrfFieldValueCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		// }
		// org.hibernate.Criteria ecrfFieldCriteria = null;
		if (series != null) {
			ecrfFieldCriteria.add(Restrictions.eq("series", series.booleanValue()));
		}
		if (optional != null) {
			ecrfFieldCriteria.add(Restrictions.eq("optional", optional.booleanValue()));
		}
		if (excludeAuditTrail) {
			applyEcrfFieldValueMaxIdSubCriteria(ecrfFieldValueCriteria, ecrfFieldCriteria, null, probandListEntryId, null);
		}
		return (Long) ecrfFieldValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long probandListEntryId, Long ecrfId, String section, boolean excludeAuditTrail, Boolean optional) throws Exception {
		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria("ecrfFieldValue0");
		// if (probandListEntryId != null) {
		ecrfFieldValueCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		// }
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField", "ecrfField0"); // , CriteriaSpecification.INNER_JOIN);
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		// if (series != null) {
		// ecrfFieldCriteria.add(Restrictions.eq("series", series.booleanValue()));
		// }
		if (optional != null) {
			ecrfFieldCriteria.add(Restrictions.eq("optional", optional.booleanValue()));
		}
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		if (excludeAuditTrail) {
			applyEcrfFieldValueMaxIdSubCriteria(ecrfFieldValueCriteria, ecrfFieldCriteria, null, probandListEntryId, null);
		}
		return (Long) ecrfFieldValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long probandListEntryId, Long ecrfId, String section, Long index) throws Exception {
		org.hibernate.Criteria[] criterias = createEcrfFieldCriteria(probandListEntryId, ecrfId);
		org.hibernate.Criteria ecrfFieldCriteria = criterias[0];
		org.hibernate.Criteria ecrfFieldValueCriteria = criterias[1];
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		if (index != null) {
			ecrfFieldValueCriteria.add(Restrictions.eq("index", index.longValue()));
		}
		return (Long) ecrfFieldCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long ecrfId, String section) throws Exception {
		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria(null);
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField", CriteriaSpecification.INNER_JOIN);
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}

		return (Long) ecrfFieldValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCountByField(Long inputFieldId) throws Exception {
		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria(null);
		if (inputFieldId != null) {
			org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField", CriteriaSpecification.INNER_JOIN);
			ecrfFieldCriteria.add(Restrictions.eq("field.id", inputFieldId.longValue()));
		}
		return (Long) ecrfFieldValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}




	@Override
	protected Collection<ECRFFieldValue> handleGetLog(Long trialId, Long probandListEntryId, Long ecrfId, boolean sort, PSFVO psf) throws Exception {

		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria("ecrfFieldValue0");
		org.hibernate.Criteria listEntryCriteria = ecrfFieldValueCriteria.createCriteria("listEntry","probandListEntry0");
		if (trialId != null || probandListEntryId != null) {

			if (trialId != null) {
				listEntryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
			}
			if (probandListEntryId != null) {
				listEntryCriteria.add(Restrictions.idEq(probandListEntryId.longValue()));
			}
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField","ecrfField0");
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}

		DetachedCriteria subQuery = createEcrfFieldValueDetachedCriteria(ecrfFieldValueCriteria, ecrfFieldCriteria, listEntryCriteria, probandListEntryId, null);
		subQuery.setProjection(Projections.rowCount());

		subQuery.add(Restrictions.or(Restrictions.isNull("index"),
				Restrictions.eqProperty("index", "ecrfFieldValue0" + ".index")));

		ecrfFieldValueCriteria.add(Subqueries.lt(1l, subQuery));


		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldValue.class, ecrfFieldValueCriteria);
		criteriaMap.registerCriteria("listEntry", listEntryCriteria);
		criteriaMap.registerCriteria("ecrfField", ecrfFieldCriteria);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		//		if (sort) { // after applyPSFVO
		//			ecrfFieldValueCriteria.addOrder(Order.asc("index"));
		//			ecrfFieldValueCriteria.addOrder(Order.desc("id"));
		//		}
		if (sort) {
			applySortOrders(listEntryCriteria, ecrfFieldCriteria, ecrfFieldValueCriteria);
		}
		return ecrfFieldValueCriteria.list();

		//throw new Exception();
	}


	@Override
	protected Collection<ECRFFieldValue> handleGetLog(Long trialId, Long probandListEntryId, Long ecrfId, String section, boolean sort, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria("ecrfFieldValue0");
		org.hibernate.Criteria listEntryCriteria = ecrfFieldValueCriteria.createCriteria("listEntry","probandListEntry0");
		if (trialId != null || probandListEntryId != null) {

			if (trialId != null) {
				listEntryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
			}
			if (probandListEntryId != null) {
				listEntryCriteria.add(Restrictions.idEq(probandListEntryId.longValue()));
			}
		}
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField","ecrfField0");
		if (ecrfId != null) {
			ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		}
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}

		DetachedCriteria subQuery = createEcrfFieldValueDetachedCriteria(ecrfFieldValueCriteria, ecrfFieldCriteria, listEntryCriteria, probandListEntryId, null);
		subQuery.setProjection(Projections.rowCount());

		subQuery.add(Restrictions.or(Restrictions.isNull("index"),
				Restrictions.eqProperty("index", "ecrfFieldValue0" + ".index")));

		ecrfFieldValueCriteria.add(Subqueries.lt(1l, subQuery));


		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRFFieldValue.class, ecrfFieldValueCriteria);
		criteriaMap.registerCriteria("listEntry", listEntryCriteria);
		criteriaMap.registerCriteria("ecrfField", ecrfFieldCriteria);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		//		if (sort) { // after applyPSFVO
		//			ecrfFieldValueCriteria.addOrder(Order.asc("index"));
		//			ecrfFieldValueCriteria.addOrder(Order.desc("id"));
		//		}
		if (sort) {
			applySortOrders(listEntryCriteria, ecrfFieldCriteria, ecrfFieldValueCriteria);
		}
		return ecrfFieldValueCriteria.list();

		//throw new Exception();
	}



	@Override
	protected Long handleGetMaxIndex(Long probandListEntryId, Long ecrfFieldId) throws Exception {

		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria(null);
		ecrfFieldValueCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		ecrfFieldValueCriteria.add(Restrictions.eq("ecrfField.id", ecrfFieldId.longValue()));
		ecrfFieldValueCriteria.add(Restrictions.isNotNull("index"));
		return (Long) ecrfFieldValueCriteria.setProjection(Projections.max("index")).uniqueResult();

	}


	@Override
	protected Long handleGetMaxIndex(Long probandListEntryId, Long ecrfId, String section) throws Exception {
		org.hibernate.Criteria ecrfFieldValueCriteria = createEcrfFieldValueCriteria(null);
		if (probandListEntryId != null) {
			ecrfFieldValueCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		}
		ecrfFieldValueCriteria.add(Restrictions.isNotNull("index"));
		org.hibernate.Criteria ecrfFieldCriteria = ecrfFieldValueCriteria.createCriteria("ecrfField");
		ecrfFieldCriteria.add(Restrictions.eq("ecrf.id", ecrfId.longValue()));
		ecrfFieldCriteria.add(Restrictions.eq("series", true));
		if (section != null && section.length() > 0) {
			ecrfFieldCriteria.add(Restrictions.eq("section", section));
		} else {
			ecrfFieldCriteria.add(Restrictions.or(Restrictions.eq("section", ""), Restrictions.isNull("section")));
		}
		return (Long) ecrfFieldValueCriteria.setProjection(Projections.max("index")).uniqueResult();
	}


	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRFFieldValue loadECRFFieldValueFromECRFFieldValueInVO(ECRFFieldValueInVO eCRFFieldValueInVO)
	{
		// TODO implement loadECRFFieldValueFromECRFFieldValueInVO
		// throw new UnsupportedOperationException("org.phoenixctms.ctsms.domain.loadECRFFieldValueFromECRFFieldValueInVO(ECRFFieldValueInVO) not yet implemented.");
		ECRFFieldValue ecrfFieldValue = null;
		Long id = eCRFFieldValueInVO.getId();
		if (id != null) {
			ecrfFieldValue = this.load(id);
		}
		if (ecrfFieldValue == null)
		{
			ecrfFieldValue = ECRFFieldValue.Factory.newInstance();
		}
		return ecrfFieldValue;
	}


	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRFFieldValue loadECRFFieldValueFromECRFFieldValueJsonVO(ECRFFieldValueJsonVO eCRFFieldValueJsonVO)
	{
		// TODO implement loadECRFFieldValueFromECRFFieldValueJsonVO
		throw new UnsupportedOperationException("org.phoenixctms.ctsms.domain.loadECRFFieldValueFromECRFFieldValueJsonVO(ECRFFieldValueJsonVO) not yet implemented.");

		/* A typical implementation looks like this:
        ECRFFieldValue eCRFFieldValue = this.load(eCRFFieldValueJsonVO.getId());
        if (eCRFFieldValue == null)
        {
            eCRFFieldValue = ECRFFieldValue.Factory.newInstance();
        }
        return eCRFFieldValue;
		 */
	}



	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRFFieldValue loadECRFFieldValueFromECRFFieldValueOutVO(ECRFFieldValueOutVO eCRFFieldValueOutVO)
	{
		// TODO implement loadECRFFieldValueFromECRFFieldValueOutVO
		// throw new UnsupportedOperationException("org.phoenixctms.ctsms.domain.loadECRFFieldValueFromECRFFieldValueOutVO(ECRFFieldValueOutVO) not yet implemented.");
		ECRFFieldValue ecrfFieldValue = this.load(eCRFFieldValueOutVO.getId());
		if (ecrfFieldValue == null)
		{
			ecrfFieldValue = ECRFFieldValue.Factory.newInstance();
		}
		return ecrfFieldValue;
	}



	public ECRFFieldValueInVO toECRFFieldValueInVO(final ECRFFieldValue entity)
	{

		return super.toECRFFieldValueInVO(entity);
	}

	public void toECRFFieldValueInVO(
			ECRFFieldValue source,
			ECRFFieldValueInVO target)
	{

		super.toECRFFieldValueInVO(source, target);
		ProbandListEntry listEntry = source.getListEntry();
		ECRFField ecrfField = source.getEcrfField();
		if (listEntry != null) {
			target.setListEntryId(listEntry.getId());
		}
		if (ecrfField != null) {
			target.setEcrfFieldId(ecrfField.getId());
		}
		InputFieldValue value = source.getValue();
		if (value != null) {
			target.setTextValue(value.getStringValue());
			target.setBooleanValue((value.getBooleanValue() == null ? false : value.getBooleanValue().booleanValue()));
			target.setLongValue(value.getLongValue());
			target.setFloatValue(value.getFloatValue());
			target.setDateValue(CoreUtil.forceDate(value.getDateValue()));
			target.setTimestampValue(value.getTimestampValue());
			target.setTimeValue(CoreUtil.forceDate(value.getTimeValue()));
			target.setInkValues(value.getInkValue());
			target.setSelectionValueIds(ServiceUtil.toInputFieldSelectionSetValueIdCollection(value.getSelectionValues()));
		}
	}

	/**
	 * @inheritDoc
	 */
	public ECRFFieldValueJsonVO toECRFFieldValueJsonVO(final ECRFFieldValue entity)
	{
		// TODO verify behavior of toECRFFieldValueJsonVO
		return super.toECRFFieldValueJsonVO(entity);
	}



	/**
	 * @inheritDoc
	 */
	public void toECRFFieldValueJsonVO(
			ECRFFieldValue source,
			ECRFFieldValueJsonVO target)
	{

		super.toECRFFieldValueJsonVO(source, target);
		ECRFField ecrfField = source.getEcrfField();
		if (ecrfField != null) {
			target.setEcrfFieldId(ecrfField.getId());
			target.setSeries(ecrfField.isSeries());
			target.setPosition(ecrfField.getPosition());
			target.setJsVariableName(ecrfField.getJsVariableName());
			target.setJsValueExpression(ecrfField.getJsValueExpression());
			target.setJsOutputExpression(ecrfField.getJsOutputExpression());
			target.setSection(ecrfField.getSection());
			ECRF ecrf = ecrfField.getEcrf();
			if (ecrf != null) {
				target.setProbandGroupToken(ecrf.getGroup() != null ? ecrf.getGroup().getToken() : null);
				target.setVisitToken(ecrf.getVisit() != null ? ecrf.getVisit().getToken() : null);
			}
			target.setDisabled(ecrfField.isDisabled());
			InputField inputField = ecrfField.getField();
			if (inputField != null) {
				target.setInputFieldId(inputField.getId());
				target.setInputFieldType(inputField.getFieldType());
				target.setUserTimeZone(inputField.isUserTimeZone());
				if (inputField.isLocalized()) {
					target.setInputFieldName(L10nUtil.getInputFieldName(Locales.USER, inputField.getNameL10nKey()));
				} else {
					target.setInputFieldName(inputField.getNameL10nKey());
				}
				if (ServiceUtil.isLoadSelectionSet(inputField.getFieldType())) {
					target.setInputFieldSelectionSetValues(toInputFieldSelectionSetValueJsonVOCollection(inputField.getSelectionSetValues()));
				}
			}
		}
		InputFieldValue value = source.getValue();
		if (value != null) {
			target.setTextValue(value.getStringValue());
			target.setBooleanValue((value.getBooleanValue() == null ? false : value.getBooleanValue().booleanValue()));
			target.setLongValue(value.getLongValue());
			target.setFloatValue(value.getFloatValue());
			target.setDateValue(CoreUtil.forceDate(value.getDateValue()));
			target.setTimestampValue(value.getTimestampValue());
			target.setTimeValue(CoreUtil.forceDate(value.getTimeValue()));
			if (InputFieldType.SKETCH.equals(target.getInputFieldType())) {
				target.setInkValues(value.getInkValue());
			} else {
				target.setInkValues(null);
			}
			target.setSelectionValueIds(ServiceUtil.toInputFieldSelectionSetValueIdCollection(value.getSelectionValues()));
		}
	}

	public ECRFFieldValueOutVO toECRFFieldValueOutVO(final ECRFFieldValue entity)
	{

		return super.toECRFFieldValueOutVO(entity);
	}

	public void toECRFFieldValueOutVO(
			ECRFFieldValue source,
			ECRFFieldValueOutVO target)
	{
		super.toECRFFieldValueOutVO(source, target);
		// WARNING! No conversion for target.ecrfField (can't convert source.getEcrfField():org.phoenixctms.ctsms.domain.ECRFField to org.phoenixctms.ctsms.vo.ECRFFieldOutVO
		// WARNING! No conversion for target.listEntry (can't convert source.getListEntry():org.phoenixctms.ctsms.domain.ProbandListEntry to org.phoenixctms.ctsms.vo.ProbandListEntryOutVO
		ProbandListEntry listEntry = source.getListEntry();
		ECRFField ecrfField = source.getEcrfField();
		User modifiedUser = source.getModifiedUser();
		if (listEntry != null) {
			target.setListEntry(this.getProbandListEntryDao().toProbandListEntryOutVO(listEntry));
		}
		if (ecrfField != null) {
			target.setEcrfField(this.getECRFFieldDao().toECRFFieldOutVO(ecrfField));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		InputFieldValue value = source.getValue();
		if (value != null) {
			target.setTextValue(value.getStringValue());
			target.setBooleanValue((value.getBooleanValue() == null ? false : value.getBooleanValue().booleanValue()));
			target.setLongValue(value.getLongValue());
			target.setFloatValue(value.getFloatValue());
			target.setDateValue(CoreUtil.forceDate(value.getDateValue()));
			target.setTimestampValue(value.getTimestampValue());
			target.setTimeValue(CoreUtil.forceDate(value.getTimeValue()));
			if (ServiceUtil.isInputFieldType(target.getEcrfField(), InputFieldType.SKETCH)) {
				target.setInkValues(value.getInkValue());
			} else {
				target.setInkValues(null);
			}
			target.setSelectionValues(toInputFieldSelectionSetValueOutVOCollection(value.getSelectionValues()));
		}
		if (listEntry != null && ecrfField != null) {
			ECRFFieldStatusQueue[] queues = ECRFFieldStatusQueue.values();
			for (int i = 0; i < queues.length; i++) {
				ECRFFieldStatusEntry lastStatus = this.getECRFFieldStatusEntryDao().findLastStatus(queues[i], listEntry.getId(), ecrfField.getId(), source.getIndex());
				if (lastStatus != null) {
					target.getLastFieldStatuses().add(this.getECRFFieldStatusTypeDao().toECRFFieldStatusTypeVO(lastStatus.getStatus()));
					if (!lastStatus.getStatus().isResolved()
							&& (target.getLastUnresolvedFieldStatusEntry() == null || target.getLastUnresolvedFieldStatusEntry().getId() < lastStatus.getId())) {
						target.setLastUnresolvedFieldStatusEntry(this.getECRFFieldStatusEntryDao().toECRFFieldStatusEntryOutVO(lastStatus));
					}
				}
			}
			// ServiceUtil.populateEcrfFieldStatusEntryCount(target.getEcrfFieldStatusQueueCounts(), listEntry.getId(), ecrfField.getId(), source.getIndex(),
			// this.getECRFFieldStatusEntryDao());
		}
	}


	private ArrayList<InputFieldSelectionSetValueJsonVO> toInputFieldSelectionSetValueJsonVOCollection(Collection<InputFieldSelectionSetValue> selectionValues) { // lazyload
		// persistentset
		// prevention
		// ArrayList<InputFieldSelectionSetValueJsonVO> result;
		// if (selectionValues != null && selectionValues.size() > 0) {
		// InputFieldSelectionSetValueDao inputFieldSelectionSetValueDao = this.getInputFieldSelectionSetValueDao();
		// result = new ArrayList<InputFieldSelectionSetValueJsonVO>(selectionValues.size());
		// Iterator<InputFieldSelectionSetValue> it = selectionValues.iterator();
		// while (it.hasNext()) {
		// result.add(inputFieldSelectionSetValueDao.toInputFieldSelectionSetValueJsonVO(it.next()));
		// }
		// } else {
		// result = new ArrayList<InputFieldSelectionSetValueJsonVO>();
		// }
		// return result;
		InputFieldSelectionSetValueDao inputFieldSelectionSetValueDao = this.getInputFieldSelectionSetValueDao();
		ArrayList<InputFieldSelectionSetValueJsonVO> result = new ArrayList<InputFieldSelectionSetValueJsonVO>(selectionValues.size());
		Iterator<InputFieldSelectionSetValue> it = selectionValues.iterator();
		while (it.hasNext()) {
			result.add(inputFieldSelectionSetValueDao.toInputFieldSelectionSetValueJsonVO(it.next()));
		}
		Collections.sort(result, SELECTION_SET_VALUE_JSON_VO_ID_COMPARATOR);
		return result;
	}

	private ArrayList<InputFieldSelectionSetValueOutVO> toInputFieldSelectionSetValueOutVOCollection(Collection<InputFieldSelectionSetValue> selectionValues) { // lazyload
		// persistentset
		// prevention
		// ArrayList<InputFieldSelectionSetValueOutVO> result;
		// if (selectionValues != null && selectionValues.size() > 0) {
		// InputFieldSelectionSetValueDao inputFieldSelectionSetValueDao = this.getInputFieldSelectionSetValueDao();
		// result = new ArrayList<InputFieldSelectionSetValueOutVO>(selectionValues.size());
		// Iterator<InputFieldSelectionSetValue> it = selectionValues.iterator();
		// while (it.hasNext()) {
		// result.add(inputFieldSelectionSetValueDao.toInputFieldSelectionSetValueOutVO(it.next()));
		// }
		// } else {
		// result = new ArrayList<InputFieldSelectionSetValueOutVO>();
		// }
		// return result;
		InputFieldSelectionSetValueDao inputFieldSelectionSetValueDao = this.getInputFieldSelectionSetValueDao();
		ArrayList<InputFieldSelectionSetValueOutVO> result = new ArrayList<InputFieldSelectionSetValueOutVO>(selectionValues.size());
		Iterator<InputFieldSelectionSetValue> it = selectionValues.iterator();
		while (it.hasNext()) {
			result.add(inputFieldSelectionSetValueDao.toInputFieldSelectionSetValueOutVO(it.next()));
		}
		Collections.sort(result, SELECTION_SET_VALUE_OUT_VO_ID_COMPARATOR);
		return result;
	}

	private HashSet<InputFieldSelectionSetValue> toInputFieldSelectionSetValueSet(Collection<Long> selectionValueIds) { // lazyload persistentset prevention
		InputFieldSelectionSetValueDao inputFieldSelectionSetValueDao = this.getInputFieldSelectionSetValueDao();
		HashSet<InputFieldSelectionSetValue> result = new HashSet<InputFieldSelectionSetValue>(selectionValueIds.size());
		Iterator<Long> it = selectionValueIds.iterator();
		while (it.hasNext()) {
			result.add(inputFieldSelectionSetValueDao.load(it.next()));
		}
		return result;
	}
}