// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;

import org.hibernate.Criteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.security.CipherText;
import org.phoenixctms.ctsms.security.CryptoUtil;
import org.phoenixctms.ctsms.security.reencrypt.FieldReEncrypter;
import org.phoenixctms.ctsms.security.reencrypt.ReEncrypter;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandListEntryOutVO;
import org.phoenixctms.ctsms.vo.ProbandListStatusEntryInVO;
import org.phoenixctms.ctsms.vo.ProbandListStatusEntryOutVO;
import org.phoenixctms.ctsms.vo.ProbandListStatusTypeVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vocycle.ProbandListStatusEntryGraph;

/**
 * @see ProbandListStatusEntry
 */
public class ProbandListStatusEntryDaoImpl
		extends ProbandListStatusEntryDaoBase {

	private final static Collection<ReEncrypter<ProbandListStatusEntry>> RE_ENCRYPTERS = new ArrayList<ReEncrypter<ProbandListStatusEntry>>();
	static {
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandListStatusEntry>() {

			@Override
			protected byte[] getIv(ProbandListStatusEntry item) {
				return item.getReasonIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandListStatusEntry item) {
				return item.getEncryptedReason();
			}

			@Override
			protected void setIv(ProbandListStatusEntry item, byte[] iv) {
				item.setReasonIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandListStatusEntry item, byte[] cipherText) {
				item.setEncryptedReason(cipherText);
			}

			@Override
			protected void setHash(ProbandListStatusEntry item, byte[] hash) {
				item.setReasonHash(hash);
			}

			@Override
			protected boolean isSkip(ProbandListStatusEntry item) {
				return !CommonUtil.ENCRPYTED_PROBAND_LIST_STATUS_ENTRY_REASON;
			}
		});
	}

	@Override
	protected Collection<ReEncrypter<ProbandListStatusEntry>> getReEncrypters() {
		return RE_ENCRYPTERS;
	}

	private org.hibernate.Criteria createStatusEntryCriteria(String alias) {
		org.hibernate.Criteria statusEntryCriteria;
		if (alias != null && alias.length() > 0) {
			statusEntryCriteria = this.getSession().createCriteria(ProbandListStatusEntry.class, alias);
		} else {
			statusEntryCriteria = this.getSession().createCriteria(ProbandListStatusEntry.class);
		}
		return statusEntryCriteria;
	}

	@Override
	protected Collection<ProbandListStatusEntry> handleFindByListEntry(
			Long probandListEntryId, PSFVO psf) throws Exception {
		org.hibernate.Criteria statusEntryCriteria = createStatusEntryCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ProbandListStatusEntry.class, statusEntryCriteria);
		if (probandListEntryId != null) {
			statusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return statusEntryCriteria.list();
	}

	@Override
	protected Collection<ProbandListStatusEntry> handleFindByTrialProband(
			Long trialId, Long probandId, boolean last, Boolean initial, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria statusEntryCriteria = createStatusEntryCriteria("probandListStatusEntry");
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ProbandListStatusEntry.class, statusEntryCriteria);
		if (trialId != null) {
			criteriaMap.createCriteria("listEntry").add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (probandId != null) {
			criteriaMap.createCriteria("listEntry").add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		if (initial != null) {
			criteriaMap.createCriteria("status").add(Restrictions.eq("initial", initial.booleanValue()));
		}
		if (last) {
			criteriaMap.createCriteria("listEntry.lastStatus").add(Restrictions.eqProperty("id", "probandListStatusEntry.id")); // didn't work without explicit id compare
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return statusEntryCriteria.list();
	}

	@Override
	protected ProbandListStatusEntry handleFindLastStatus(
			Long probandListEntryId) throws Exception {
		org.hibernate.Criteria statusEntryCriteria = createStatusEntryCriteria(null);
		if (probandListEntryId != null) {
			statusEntryCriteria.add(Restrictions.eq("listEntry.id", probandListEntryId.longValue()));
		}
		statusEntryCriteria.addOrder(Order.desc("id"));
		statusEntryCriteria.setMaxResults(1);
		return (ProbandListStatusEntry) statusEntryCriteria.uniqueResult();
	}

	@Override
	protected ProbandListStatusEntry handleFindRecentStatus(
			Long trialId, Long probandId, Timestamp maxRealTimestamp)
			throws Exception {
		org.hibernate.Criteria statusEntryCriteria = createStatusEntryCriteria(null);
		if (maxRealTimestamp != null) {
			statusEntryCriteria.add(Restrictions.le("realTimestamp", maxRealTimestamp));
		}
		if (trialId != null || probandId != null) {
			Criteria listEntryCriteria = statusEntryCriteria.createCriteria("listEntry");
			if (trialId != null) {
				listEntryCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
			}
			if (probandId != null) {
				listEntryCriteria.add(Restrictions.eq("proband.id", probandId.longValue()));
			}
		}
		statusEntryCriteria.addOrder(Order.desc("realTimestamp"));
		statusEntryCriteria.addOrder(Order.desc("id"));
		statusEntryCriteria.setMaxResults(1);
		return (ProbandListStatusEntry) statusEntryCriteria.uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandListStatusEntry loadProbandListStatusEntryFromProbandListStatusEntryInVO(ProbandListStatusEntryInVO probandListStatusEntryInVO) {
		ProbandListStatusEntry probandListStatusEntry = null;
		Long id = probandListStatusEntryInVO.getId();
		if (id != null) {
			probandListStatusEntry = this.load(id);
		}
		if (probandListStatusEntry == null) {
			probandListStatusEntry = ProbandListStatusEntry.Factory.newInstance();
		}
		return probandListStatusEntry;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandListStatusEntry loadProbandListStatusEntryFromProbandListStatusEntryOutVO(ProbandListStatusEntryOutVO probandListStatusEntryOutVO) {
		throw new UnsupportedOperationException("out value object to recursive entity not supported");
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandListStatusEntry probandListStatusEntryInVOToEntity(ProbandListStatusEntryInVO probandListStatusEntryInVO) {
		ProbandListStatusEntry entity = this.loadProbandListStatusEntryFromProbandListStatusEntryInVO(probandListStatusEntryInVO);
		this.probandListStatusEntryInVOToEntity(probandListStatusEntryInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandListStatusEntryInVOToEntity(
			ProbandListStatusEntryInVO source,
			ProbandListStatusEntry target,
			boolean copyIfNull) {
		super.probandListStatusEntryInVOToEntity(source, target, copyIfNull);
		Long statusId = source.getStatusId();
		Long listEntryId = source.getListEntryId();
		if (statusId != null) {
			target.setStatus(this.getProbandListStatusTypeDao().load(statusId));
		} else if (copyIfNull) {
			target.setStatus(null);
		}
		if (listEntryId != null) {
			ProbandListEntry listEntry = this.getProbandListEntryDao().load(listEntryId);
			target.setListEntry(listEntry);
			listEntry.addStatusEntries(target);
		} else if (copyIfNull) {
			ProbandListEntry listEntry = target.getListEntry();
			target.setListEntry(null);
			if (listEntry != null) {
				listEntry.removeStatusEntries(target);
			}
		}
		if (CommonUtil.ENCRPYTED_PROBAND_LIST_STATUS_ENTRY_REASON) {
			try {
				if (copyIfNull || source.getReason() != null) {
					CipherText cipherText = CryptoUtil.encryptValue(source.getReason());
					target.setReasonIv(cipherText.getIv());
					target.setEncryptedReason(cipherText.getCipherText());
					target.setReasonHash(CryptoUtil.hashForSearch(source.getReason()));
				}
			} catch (Exception e) {
				throw new RuntimeException(e);
			} finally {
				target.setReason(null);
			}
		} else {
			target.setReasonIv(null);
			target.setEncryptedReason(null);
			target.setReasonHash(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandListStatusEntry probandListStatusEntryOutVOToEntity(ProbandListStatusEntryOutVO probandListStatusEntryOutVO) {
		ProbandListStatusEntry entity = this.loadProbandListStatusEntryFromProbandListStatusEntryOutVO(probandListStatusEntryOutVO);
		this.probandListStatusEntryOutVOToEntity(probandListStatusEntryOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandListStatusEntryOutVOToEntity(
			ProbandListStatusEntryOutVO source,
			ProbandListStatusEntry target,
			boolean copyIfNull) {
		super.probandListStatusEntryOutVOToEntity(source, target, copyIfNull);
		ProbandListStatusTypeVO statusVO = source.getStatus();
		ProbandListEntryOutVO listEntryVO = source.getListEntry();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (statusVO != null) {
			target.setStatus(this.getProbandListStatusTypeDao().probandListStatusTypeVOToEntity(statusVO));
		} else if (copyIfNull) {
			target.setStatus(null);
		}
		if (listEntryVO != null) {
			ProbandListEntry listEntry = this.getProbandListEntryDao().probandListEntryOutVOToEntity(listEntryVO);
			target.setListEntry(listEntry);
			listEntry.addStatusEntries(target);
		} else if (copyIfNull) {
			ProbandListEntry listEntry = target.getListEntry();
			target.setListEntry(null);
			if (listEntry != null) {
				listEntry.removeStatusEntries(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
		if (CommonUtil.ENCRPYTED_PROBAND_LIST_STATUS_ENTRY_REASON) {
			try {
				if (copyIfNull || source.getReason() != null) {
					CipherText cipherText = CryptoUtil.encryptValue(source.getReason());
					target.setReasonIv(cipherText.getIv());
					target.setEncryptedReason(cipherText.getCipherText());
					target.setReasonHash(CryptoUtil.hashForSearch(source.getReason()));
				}
			} catch (Exception e) {
				throw new RuntimeException(e);
			} finally {
				target.setReason(null);
			}
		} else {
			target.setReasonIv(null);
			target.setEncryptedReason(null);
			target.setReasonHash(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandListStatusEntryInVO toProbandListStatusEntryInVO(final ProbandListStatusEntry entity) {
		return super.toProbandListStatusEntryInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandListStatusEntryInVO(
			ProbandListStatusEntry source,
			ProbandListStatusEntryInVO target) {
		super.toProbandListStatusEntryInVO(source, target);
		ProbandListStatusType status = source.getStatus();
		ProbandListEntry listEntry = source.getListEntry();
		if (status != null) {
			target.setStatusId(status.getId());
		}
		if (listEntry != null) {
			target.setListEntryId(listEntry.getId());
		}
		if (CommonUtil.ENCRPYTED_PROBAND_LIST_STATUS_ENTRY_REASON) {
			try {
				target.setReason((String) CryptoUtil.decryptValue(source.getReasonIv(), source.getEncryptedReason()));
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandListStatusEntryOutVO toProbandListStatusEntryOutVO(final ProbandListStatusEntry entity) {
		return super.toProbandListStatusEntryOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandListStatusEntryOutVO(
			ProbandListStatusEntry source,
			ProbandListStatusEntryOutVO target) {
		(new ProbandListStatusEntryGraph(this, this.getProbandListEntryDao(), this.getProbandListStatusTypeDao(), this.getUserDao())).toVOHelper(source, target,
				new HashMap<Class, HashMap<Long, Object>>());
	}

	@Override
	public void toProbandListStatusEntryOutVO(
			ProbandListStatusEntry source,
			ProbandListStatusEntryOutVO target, HashMap<Class, HashMap<Long, Object>> voMap) {
		(new ProbandListStatusEntryGraph(this, this.getProbandListEntryDao(), this.getProbandListStatusTypeDao(), this.getUserDao())).toVOHelper(source, target, voMap);
	}
}